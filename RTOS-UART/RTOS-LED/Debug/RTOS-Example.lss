
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a7dc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a7dc  0040a7dc  0001a7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040a7e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000039c  204009b8  0040b19c  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400d54  0040b538  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d58  0040d53c  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fe21  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000040c9  00000000  00000000  00040860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000097aa  00000000  00000000  00044929  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ed8  00000000  00000000  0004e0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d0  00000000  00000000  0004efab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000233f3  00000000  00000000  0005017b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ebd  00000000  00000000  0007356e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cd25  00000000  00000000  0008442b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000379c  00000000  00000000  00121150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2d 40 20 b1 0c 40 00 af 0c 40 00 af 0c 40 00     X-@ ..@...@...@.
  400010:	af 0c 40 00 af 0c 40 00 af 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 10 40 00 af 0c 40 00 00 00 00 00 41 11 40 00     ..@...@.....A.@.
  40003c:	a5 11 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40004c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40005c:	af 0c 40 00 af 0c 40 00 00 00 00 00 09 07 40 00     ..@...@.......@.
  40006c:	1d 07 40 00 31 07 40 00 af 0c 40 00 f9 37 40 00     ..@.1.@...@..7@.
  40007c:	af 0c 40 00 45 07 40 00 59 07 40 00 af 0c 40 00     ..@.E.@.Y.@...@.
  40008c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40009c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000ac:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000bc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000cc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000dc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000ec:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000fc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40010c:	af 0c 40 00 af 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ......@...@...@.
  40012c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40013c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40014c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40015c:	af 0c 40 00 af 0c 40 00 af 0c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	0040a7e4 	.word	0x0040a7e4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040a7e4 	.word	0x0040a7e4
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	0040a7e4 	.word	0x0040a7e4
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400e85 	.word	0x00400e85
  400220:	00400809 	.word	0x00400809
  400224:	0040085d 	.word	0x0040085d
  400228:	0040086d 	.word	0x0040086d
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	0040087d 	.word	0x0040087d
  400238:	0040076d 	.word	0x0040076d
  40023c:	004007a5 	.word	0x004007a5
  400240:	00400d79 	.word	0x00400d79

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400cdc 	.word	0x20400cdc
  40027c:	20400cd4 	.word	0x20400cd4

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400cd8 	.word	0x20400cd8
  4002cc:	20400cdc 	.word	0x20400cdc

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	0040088d 	.word	0x0040088d
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40046c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400470:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400474:	d105      	bne.n	400482 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400476:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400478:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40047a:	bf14      	ite	ne
  40047c:	2001      	movne	r0, #1
  40047e:	2000      	moveq	r0, #0
  400480:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400482:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400484:	e7f8      	b.n	400478 <pio_get+0xc>

00400486 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400486:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400488:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40048c:	d03a      	beq.n	400504 <pio_set_peripheral+0x7e>
  40048e:	d813      	bhi.n	4004b8 <pio_set_peripheral+0x32>
  400490:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400494:	d025      	beq.n	4004e2 <pio_set_peripheral+0x5c>
  400496:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40049a:	d10a      	bne.n	4004b2 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40049c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40049e:	4313      	orrs	r3, r2
  4004a0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004a6:	400b      	ands	r3, r1
  4004a8:	ea23 0302 	bic.w	r3, r3, r2
  4004ac:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4004ae:	6042      	str	r2, [r0, #4]
  4004b0:	4770      	bx	lr
	switch (ul_type) {
  4004b2:	2900      	cmp	r1, #0
  4004b4:	d1fb      	bne.n	4004ae <pio_set_peripheral+0x28>
  4004b6:	4770      	bx	lr
  4004b8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004bc:	d021      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004be:	d809      	bhi.n	4004d4 <pio_set_peripheral+0x4e>
  4004c0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004c4:	d1f3      	bne.n	4004ae <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004c8:	4313      	orrs	r3, r2
  4004ca:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004ce:	4313      	orrs	r3, r2
  4004d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004d2:	e7ec      	b.n	4004ae <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004d8:	d013      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004de:	d010      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004e0:	e7e5      	b.n	4004ae <pio_set_peripheral+0x28>
{
  4004e2:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004e4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004e6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004e8:	43d3      	mvns	r3, r2
  4004ea:	4021      	ands	r1, r4
  4004ec:	461c      	mov	r4, r3
  4004ee:	4019      	ands	r1, r3
  4004f0:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004f6:	400b      	ands	r3, r1
  4004f8:	4023      	ands	r3, r4
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004fc:	6042      	str	r2, [r0, #4]
}
  4004fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400502:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400504:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400506:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400508:	400b      	ands	r3, r1
  40050a:	ea23 0302 	bic.w	r3, r3, r2
  40050e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400510:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400512:	4313      	orrs	r3, r2
  400514:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400516:	e7ca      	b.n	4004ae <pio_set_peripheral+0x28>

00400518 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400518:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40051a:	f012 0f01 	tst.w	r2, #1
  40051e:	d10d      	bne.n	40053c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400520:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400522:	f012 0f0a 	tst.w	r2, #10
  400526:	d00b      	beq.n	400540 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400528:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40052a:	f012 0f02 	tst.w	r2, #2
  40052e:	d109      	bne.n	400544 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400530:	f012 0f08 	tst.w	r2, #8
  400534:	d008      	beq.n	400548 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400536:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40053a:	e005      	b.n	400548 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40053c:	6641      	str	r1, [r0, #100]	; 0x64
  40053e:	e7f0      	b.n	400522 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400540:	6241      	str	r1, [r0, #36]	; 0x24
  400542:	e7f2      	b.n	40052a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400544:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400548:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40054a:	6001      	str	r1, [r0, #0]
  40054c:	4770      	bx	lr

0040054e <pio_set_output>:
{
  40054e:	b410      	push	{r4}
  400550:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400552:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400554:	b94c      	cbnz	r4, 40056a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400556:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400558:	b14b      	cbz	r3, 40056e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40055a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40055c:	b94a      	cbnz	r2, 400572 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40055e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400560:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400562:	6001      	str	r1, [r0, #0]
}
  400564:	f85d 4b04 	ldr.w	r4, [sp], #4
  400568:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40056a:	6641      	str	r1, [r0, #100]	; 0x64
  40056c:	e7f4      	b.n	400558 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40056e:	6541      	str	r1, [r0, #84]	; 0x54
  400570:	e7f4      	b.n	40055c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400572:	6301      	str	r1, [r0, #48]	; 0x30
  400574:	e7f4      	b.n	400560 <pio_set_output+0x12>
	...

00400578 <pio_configure>:
{
  400578:	b570      	push	{r4, r5, r6, lr}
  40057a:	b082      	sub	sp, #8
  40057c:	4605      	mov	r5, r0
  40057e:	4616      	mov	r6, r2
  400580:	461c      	mov	r4, r3
	switch (ul_type) {
  400582:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400586:	d014      	beq.n	4005b2 <pio_configure+0x3a>
  400588:	d90a      	bls.n	4005a0 <pio_configure+0x28>
  40058a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40058e:	d024      	beq.n	4005da <pio_configure+0x62>
  400590:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400594:	d021      	beq.n	4005da <pio_configure+0x62>
  400596:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40059a:	d017      	beq.n	4005cc <pio_configure+0x54>
		return 0;
  40059c:	2000      	movs	r0, #0
  40059e:	e01a      	b.n	4005d6 <pio_configure+0x5e>
	switch (ul_type) {
  4005a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4005a4:	d005      	beq.n	4005b2 <pio_configure+0x3a>
  4005a6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005aa:	d002      	beq.n	4005b2 <pio_configure+0x3a>
  4005ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005b0:	d1f4      	bne.n	40059c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4005b2:	4632      	mov	r2, r6
  4005b4:	4628      	mov	r0, r5
  4005b6:	4b11      	ldr	r3, [pc, #68]	; (4005fc <pio_configure+0x84>)
  4005b8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005ba:	f014 0f01 	tst.w	r4, #1
  4005be:	d102      	bne.n	4005c6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4005c0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4005c2:	2001      	movs	r0, #1
  4005c4:	e007      	b.n	4005d6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4005c6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4005c8:	2001      	movs	r0, #1
  4005ca:	e004      	b.n	4005d6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4005cc:	461a      	mov	r2, r3
  4005ce:	4631      	mov	r1, r6
  4005d0:	4b0b      	ldr	r3, [pc, #44]	; (400600 <pio_configure+0x88>)
  4005d2:	4798      	blx	r3
	return 1;
  4005d4:	2001      	movs	r0, #1
}
  4005d6:	b002      	add	sp, #8
  4005d8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4005da:	f004 0301 	and.w	r3, r4, #1
  4005de:	9300      	str	r3, [sp, #0]
  4005e0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005e4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005e8:	bf14      	ite	ne
  4005ea:	2200      	movne	r2, #0
  4005ec:	2201      	moveq	r2, #1
  4005ee:	4631      	mov	r1, r6
  4005f0:	4628      	mov	r0, r5
  4005f2:	4c04      	ldr	r4, [pc, #16]	; (400604 <pio_configure+0x8c>)
  4005f4:	47a0      	blx	r4
	return 1;
  4005f6:	2001      	movs	r0, #1
		break;
  4005f8:	e7ed      	b.n	4005d6 <pio_configure+0x5e>
  4005fa:	bf00      	nop
  4005fc:	00400487 	.word	0x00400487
  400600:	00400519 	.word	0x00400519
  400604:	0040054f 	.word	0x0040054f

00400608 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400608:	f012 0f10 	tst.w	r2, #16
  40060c:	d012      	beq.n	400634 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40060e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400612:	f012 0f20 	tst.w	r2, #32
  400616:	d007      	beq.n	400628 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400618:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40061c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400620:	d005      	beq.n	40062e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400622:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400626:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400628:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40062c:	e7f6      	b.n	40061c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40062e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400632:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400634:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400638:	4770      	bx	lr

0040063a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40063a:	6401      	str	r1, [r0, #64]	; 0x40
  40063c:	4770      	bx	lr

0040063e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40063e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400640:	4770      	bx	lr

00400642 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400642:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400644:	4770      	bx	lr
	...

00400648 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40064c:	4604      	mov	r4, r0
  40064e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400650:	4b0e      	ldr	r3, [pc, #56]	; (40068c <pio_handler_process+0x44>)
  400652:	4798      	blx	r3
  400654:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400656:	4620      	mov	r0, r4
  400658:	4b0d      	ldr	r3, [pc, #52]	; (400690 <pio_handler_process+0x48>)
  40065a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40065c:	4005      	ands	r5, r0
  40065e:	d013      	beq.n	400688 <pio_handler_process+0x40>
  400660:	4c0c      	ldr	r4, [pc, #48]	; (400694 <pio_handler_process+0x4c>)
  400662:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400666:	e003      	b.n	400670 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400668:	42b4      	cmp	r4, r6
  40066a:	d00d      	beq.n	400688 <pio_handler_process+0x40>
  40066c:	3410      	adds	r4, #16
		while (status != 0) {
  40066e:	b15d      	cbz	r5, 400688 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400670:	6820      	ldr	r0, [r4, #0]
  400672:	4540      	cmp	r0, r8
  400674:	d1f8      	bne.n	400668 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400676:	6861      	ldr	r1, [r4, #4]
  400678:	4229      	tst	r1, r5
  40067a:	d0f5      	beq.n	400668 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40067c:	68e3      	ldr	r3, [r4, #12]
  40067e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400680:	6863      	ldr	r3, [r4, #4]
  400682:	ea25 0503 	bic.w	r5, r5, r3
  400686:	e7ef      	b.n	400668 <pio_handler_process+0x20>
  400688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40068c:	0040063f 	.word	0x0040063f
  400690:	00400643 	.word	0x00400643
  400694:	204009d4 	.word	0x204009d4

00400698 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40069a:	4c18      	ldr	r4, [pc, #96]	; (4006fc <pio_handler_set+0x64>)
  40069c:	6826      	ldr	r6, [r4, #0]
  40069e:	2e06      	cmp	r6, #6
  4006a0:	d82a      	bhi.n	4006f8 <pio_handler_set+0x60>
  4006a2:	f04f 0c00 	mov.w	ip, #0
  4006a6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006a8:	4f15      	ldr	r7, [pc, #84]	; (400700 <pio_handler_set+0x68>)
  4006aa:	e004      	b.n	4006b6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006ac:	3401      	adds	r4, #1
  4006ae:	b2e4      	uxtb	r4, r4
  4006b0:	46a4      	mov	ip, r4
  4006b2:	42a6      	cmp	r6, r4
  4006b4:	d309      	bcc.n	4006ca <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4006b6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b8:	0125      	lsls	r5, r4, #4
  4006ba:	597d      	ldr	r5, [r7, r5]
  4006bc:	428d      	cmp	r5, r1
  4006be:	d1f5      	bne.n	4006ac <pio_handler_set+0x14>
  4006c0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006c4:	686d      	ldr	r5, [r5, #4]
  4006c6:	4295      	cmp	r5, r2
  4006c8:	d1f0      	bne.n	4006ac <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006ca:	4d0d      	ldr	r5, [pc, #52]	; (400700 <pio_handler_set+0x68>)
  4006cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006d0:	eb05 040e 	add.w	r4, r5, lr
  4006d4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006d8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006da:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006dc:	9906      	ldr	r1, [sp, #24]
  4006de:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006e0:	3601      	adds	r6, #1
  4006e2:	4566      	cmp	r6, ip
  4006e4:	d005      	beq.n	4006f2 <pio_handler_set+0x5a>
  4006e6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006e8:	461a      	mov	r2, r3
  4006ea:	4b06      	ldr	r3, [pc, #24]	; (400704 <pio_handler_set+0x6c>)
  4006ec:	4798      	blx	r3

	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4006f2:	4902      	ldr	r1, [pc, #8]	; (4006fc <pio_handler_set+0x64>)
  4006f4:	600e      	str	r6, [r1, #0]
  4006f6:	e7f6      	b.n	4006e6 <pio_handler_set+0x4e>
		return 1;
  4006f8:	2001      	movs	r0, #1
}
  4006fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006fc:	20400a44 	.word	0x20400a44
  400700:	204009d4 	.word	0x204009d4
  400704:	00400609 	.word	0x00400609

00400708 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400708:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40070a:	210a      	movs	r1, #10
  40070c:	4801      	ldr	r0, [pc, #4]	; (400714 <PIOA_Handler+0xc>)
  40070e:	4b02      	ldr	r3, [pc, #8]	; (400718 <PIOA_Handler+0x10>)
  400710:	4798      	blx	r3
  400712:	bd08      	pop	{r3, pc}
  400714:	400e0e00 	.word	0x400e0e00
  400718:	00400649 	.word	0x00400649

0040071c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40071c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40071e:	210b      	movs	r1, #11
  400720:	4801      	ldr	r0, [pc, #4]	; (400728 <PIOB_Handler+0xc>)
  400722:	4b02      	ldr	r3, [pc, #8]	; (40072c <PIOB_Handler+0x10>)
  400724:	4798      	blx	r3
  400726:	bd08      	pop	{r3, pc}
  400728:	400e1000 	.word	0x400e1000
  40072c:	00400649 	.word	0x00400649

00400730 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400730:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400732:	210c      	movs	r1, #12
  400734:	4801      	ldr	r0, [pc, #4]	; (40073c <PIOC_Handler+0xc>)
  400736:	4b02      	ldr	r3, [pc, #8]	; (400740 <PIOC_Handler+0x10>)
  400738:	4798      	blx	r3
  40073a:	bd08      	pop	{r3, pc}
  40073c:	400e1200 	.word	0x400e1200
  400740:	00400649 	.word	0x00400649

00400744 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400744:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400746:	2110      	movs	r1, #16
  400748:	4801      	ldr	r0, [pc, #4]	; (400750 <PIOD_Handler+0xc>)
  40074a:	4b02      	ldr	r3, [pc, #8]	; (400754 <PIOD_Handler+0x10>)
  40074c:	4798      	blx	r3
  40074e:	bd08      	pop	{r3, pc}
  400750:	400e1400 	.word	0x400e1400
  400754:	00400649 	.word	0x00400649

00400758 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400758:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40075a:	2111      	movs	r1, #17
  40075c:	4801      	ldr	r0, [pc, #4]	; (400764 <PIOE_Handler+0xc>)
  40075e:	4b02      	ldr	r3, [pc, #8]	; (400768 <PIOE_Handler+0x10>)
  400760:	4798      	blx	r3
  400762:	bd08      	pop	{r3, pc}
  400764:	400e1600 	.word	0x400e1600
  400768:	00400649 	.word	0x00400649

0040076c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40076c:	2803      	cmp	r0, #3
  40076e:	d011      	beq.n	400794 <pmc_mck_set_division+0x28>
  400770:	2804      	cmp	r0, #4
  400772:	d012      	beq.n	40079a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400774:	2802      	cmp	r0, #2
  400776:	bf0c      	ite	eq
  400778:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40077c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40077e:	4a08      	ldr	r2, [pc, #32]	; (4007a0 <pmc_mck_set_division+0x34>)
  400780:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400786:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400788:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40078a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078c:	f013 0f08 	tst.w	r3, #8
  400790:	d0fb      	beq.n	40078a <pmc_mck_set_division+0x1e>
}
  400792:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400794:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400798:	e7f1      	b.n	40077e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40079a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40079e:	e7ee      	b.n	40077e <pmc_mck_set_division+0x12>
  4007a0:	400e0600 	.word	0x400e0600

004007a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007a4:	4a17      	ldr	r2, [pc, #92]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007ac:	4318      	orrs	r0, r3
  4007ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007b2:	f013 0f08 	tst.w	r3, #8
  4007b6:	d10a      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x2a>
  4007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007bc:	4911      	ldr	r1, [pc, #68]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007c0:	f012 0f08 	tst.w	r2, #8
  4007c4:	d103      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007c6:	3b01      	subs	r3, #1
  4007c8:	d1f9      	bne.n	4007be <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007ca:	2001      	movs	r0, #1
  4007cc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ce:	4a0d      	ldr	r2, [pc, #52]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007d2:	f023 0303 	bic.w	r3, r3, #3
  4007d6:	f043 0302 	orr.w	r3, r3, #2
  4007da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007de:	f013 0f08 	tst.w	r3, #8
  4007e2:	d10a      	bne.n	4007fa <pmc_switch_mck_to_pllack+0x56>
  4007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007e8:	4906      	ldr	r1, [pc, #24]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ec:	f012 0f08 	tst.w	r2, #8
  4007f0:	d105      	bne.n	4007fe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007f2:	3b01      	subs	r3, #1
  4007f4:	d1f9      	bne.n	4007ea <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007f6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007f8:	4770      	bx	lr
	return 0;
  4007fa:	2000      	movs	r0, #0
  4007fc:	4770      	bx	lr
  4007fe:	2000      	movs	r0, #0
  400800:	4770      	bx	lr
  400802:	bf00      	nop
  400804:	400e0600 	.word	0x400e0600

00400808 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400808:	b9a0      	cbnz	r0, 400834 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40080a:	480e      	ldr	r0, [pc, #56]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  40080c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40080e:	0209      	lsls	r1, r1, #8
  400810:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400812:	4a0d      	ldr	r2, [pc, #52]	; (400848 <pmc_switch_mainck_to_xtal+0x40>)
  400814:	401a      	ands	r2, r3
  400816:	4b0d      	ldr	r3, [pc, #52]	; (40084c <pmc_switch_mainck_to_xtal+0x44>)
  400818:	4313      	orrs	r3, r2
  40081a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40081c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40081e:	4602      	mov	r2, r0
  400820:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400822:	f013 0f01 	tst.w	r3, #1
  400826:	d0fb      	beq.n	400820 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400828:	4a06      	ldr	r2, [pc, #24]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  40082a:	6a11      	ldr	r1, [r2, #32]
  40082c:	4b08      	ldr	r3, [pc, #32]	; (400850 <pmc_switch_mainck_to_xtal+0x48>)
  40082e:	430b      	orrs	r3, r1
  400830:	6213      	str	r3, [r2, #32]
  400832:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400834:	4903      	ldr	r1, [pc, #12]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  400836:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400838:	4a06      	ldr	r2, [pc, #24]	; (400854 <pmc_switch_mainck_to_xtal+0x4c>)
  40083a:	401a      	ands	r2, r3
  40083c:	4b06      	ldr	r3, [pc, #24]	; (400858 <pmc_switch_mainck_to_xtal+0x50>)
  40083e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400840:	620b      	str	r3, [r1, #32]
  400842:	4770      	bx	lr
  400844:	400e0600 	.word	0x400e0600
  400848:	ffc8fffc 	.word	0xffc8fffc
  40084c:	00370001 	.word	0x00370001
  400850:	01370000 	.word	0x01370000
  400854:	fec8fffc 	.word	0xfec8fffc
  400858:	01370002 	.word	0x01370002

0040085c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40085c:	4b02      	ldr	r3, [pc, #8]	; (400868 <pmc_osc_is_ready_mainck+0xc>)
  40085e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400860:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0600 	.word	0x400e0600

0040086c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40086c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400870:	4b01      	ldr	r3, [pc, #4]	; (400878 <pmc_disable_pllack+0xc>)
  400872:	629a      	str	r2, [r3, #40]	; 0x28
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	400e0600 	.word	0x400e0600

0040087c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40087c:	4b02      	ldr	r3, [pc, #8]	; (400888 <pmc_is_locked_pllack+0xc>)
  40087e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400880:	f000 0002 	and.w	r0, r0, #2
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0600 	.word	0x400e0600

0040088c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40088c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400890:	4b05      	ldr	r3, [pc, #20]	; (4008a8 <pmc_enable_periph_clk+0x1c>)
  400892:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400896:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40089a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40089e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4008a2:	2000      	movs	r0, #0
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	400e0600 	.word	0x400e0600

004008ac <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4008ac:	4770      	bx	lr
	...

004008b0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4008b0:	4a10      	ldr	r2, [pc, #64]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4008bc:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4008be:	6a11      	ldr	r1, [r2, #32]
  4008c0:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <pmc_enable_waitmode+0x48>)
  4008c2:	430b      	orrs	r3, r1
  4008c4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008c8:	f013 0f08 	tst.w	r3, #8
  4008cc:	d0fb      	beq.n	4008c6 <pmc_enable_waitmode+0x16>
  4008ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
  4008d2:	bf00      	nop
	for (i = 0; i < 500; i++) {
  4008d4:	3b01      	subs	r3, #1
  4008d6:	d1fc      	bne.n	4008d2 <pmc_enable_waitmode+0x22>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4008d8:	4a06      	ldr	r2, [pc, #24]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008da:	6a13      	ldr	r3, [r2, #32]
  4008dc:	f013 0f08 	tst.w	r3, #8
  4008e0:	d0fb      	beq.n	4008da <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4008e2:	4a04      	ldr	r2, [pc, #16]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4008ee:	6713      	str	r3, [r2, #112]	; 0x70
  4008f0:	4770      	bx	lr
  4008f2:	bf00      	nop
  4008f4:	400e0600 	.word	0x400e0600
  4008f8:	00370004 	.word	0x00370004

004008fc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4008fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400900:	1e43      	subs	r3, r0, #1
  400902:	2b04      	cmp	r3, #4
  400904:	f200 8107 	bhi.w	400b16 <pmc_sleep+0x21a>
  400908:	e8df f013 	tbh	[pc, r3, lsl #1]
  40090c:	00050005 	.word	0x00050005
  400910:	00150015 	.word	0x00150015
  400914:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400916:	4a81      	ldr	r2, [pc, #516]	; (400b1c <pmc_sleep+0x220>)
  400918:	6913      	ldr	r3, [r2, #16]
  40091a:	f023 0304 	bic.w	r3, r3, #4
  40091e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400920:	2201      	movs	r2, #1
  400922:	4b7f      	ldr	r3, [pc, #508]	; (400b20 <pmc_sleep+0x224>)
  400924:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400926:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40092a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  40092c:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  400930:	bf30      	wfi
		break;
  400932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400936:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400938:	2803      	cmp	r0, #3
  40093a:	bf0c      	ite	eq
  40093c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40093e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400942:	4b78      	ldr	r3, [pc, #480]	; (400b24 <pmc_sleep+0x228>)
  400944:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400946:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400948:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40094c:	2200      	movs	r2, #0
  40094e:	4b74      	ldr	r3, [pc, #464]	; (400b20 <pmc_sleep+0x224>)
  400950:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400952:	2201      	movs	r2, #1
  400954:	4b74      	ldr	r3, [pc, #464]	; (400b28 <pmc_sleep+0x22c>)
  400956:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400958:	4b74      	ldr	r3, [pc, #464]	; (400b2c <pmc_sleep+0x230>)
  40095a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40095c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40095e:	4a74      	ldr	r2, [pc, #464]	; (400b30 <pmc_sleep+0x234>)
  400960:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400964:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400966:	4a73      	ldr	r2, [pc, #460]	; (400b34 <pmc_sleep+0x238>)
  400968:	433a      	orrs	r2, r7
  40096a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40096c:	f005 0903 	and.w	r9, r5, #3
  400970:	f1b9 0f01 	cmp.w	r9, #1
  400974:	f240 8089 	bls.w	400a8a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400978:	f025 0103 	bic.w	r1, r5, #3
  40097c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400980:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400982:	461a      	mov	r2, r3
  400984:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400986:	f013 0f08 	tst.w	r3, #8
  40098a:	d0fb      	beq.n	400984 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40098c:	f011 0f70 	tst.w	r1, #112	; 0x70
  400990:	d008      	beq.n	4009a4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400992:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400996:	4b65      	ldr	r3, [pc, #404]	; (400b2c <pmc_sleep+0x230>)
  400998:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40099a:	461a      	mov	r2, r3
  40099c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40099e:	f013 0f08 	tst.w	r3, #8
  4009a2:	d0fb      	beq.n	40099c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4009a4:	4b64      	ldr	r3, [pc, #400]	; (400b38 <pmc_sleep+0x23c>)
  4009a6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009a8:	4a60      	ldr	r2, [pc, #384]	; (400b2c <pmc_sleep+0x230>)
  4009aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4009b0:	d0fb      	beq.n	4009aa <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009b2:	4a5e      	ldr	r2, [pc, #376]	; (400b2c <pmc_sleep+0x230>)
  4009b4:	6a11      	ldr	r1, [r2, #32]
  4009b6:	4b61      	ldr	r3, [pc, #388]	; (400b3c <pmc_sleep+0x240>)
  4009b8:	400b      	ands	r3, r1
  4009ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4009c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009c6:	d0fb      	beq.n	4009c0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4009c8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4009cc:	4a58      	ldr	r2, [pc, #352]	; (400b30 <pmc_sleep+0x234>)
  4009ce:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4009d0:	2c04      	cmp	r4, #4
  4009d2:	d05c      	beq.n	400a8e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4009d4:	4c52      	ldr	r4, [pc, #328]	; (400b20 <pmc_sleep+0x224>)
  4009d6:	2301      	movs	r3, #1
  4009d8:	7023      	strb	r3, [r4, #0]
  4009da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009de:	b662      	cpsie	i

		pmc_enable_waitmode();
  4009e0:	4b57      	ldr	r3, [pc, #348]	; (400b40 <pmc_sleep+0x244>)
  4009e2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4009e4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4009e6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4009ea:	2300      	movs	r3, #0
  4009ec:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4009ee:	f017 0f02 	tst.w	r7, #2
  4009f2:	d055      	beq.n	400aa0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009f4:	4a4d      	ldr	r2, [pc, #308]	; (400b2c <pmc_sleep+0x230>)
  4009f6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009f8:	4952      	ldr	r1, [pc, #328]	; (400b44 <pmc_sleep+0x248>)
  4009fa:	4019      	ands	r1, r3
  4009fc:	4b52      	ldr	r3, [pc, #328]	; (400b48 <pmc_sleep+0x24c>)
  4009fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a00:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a02:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  400a04:	4b51      	ldr	r3, [pc, #324]	; (400b4c <pmc_sleep+0x250>)
  400a06:	400b      	ands	r3, r1
  400a08:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a0c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400a0e:	4b50      	ldr	r3, [pc, #320]	; (400b50 <pmc_sleep+0x254>)
  400a10:	4033      	ands	r3, r6
  400a12:	2b00      	cmp	r3, #0
  400a14:	d06e      	beq.n	400af4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400a16:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400a1a:	4b44      	ldr	r3, [pc, #272]	; (400b2c <pmc_sleep+0x230>)
  400a1c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400a1e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400a20:	f1b9 0f02 	cmp.w	r9, #2
  400a24:	d104      	bne.n	400a30 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400a26:	4a41      	ldr	r2, [pc, #260]	; (400b2c <pmc_sleep+0x230>)
  400a28:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a2a:	f013 0f02 	tst.w	r3, #2
  400a2e:	d0fb      	beq.n	400a28 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400a30:	4a3e      	ldr	r2, [pc, #248]	; (400b2c <pmc_sleep+0x230>)
  400a32:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400a38:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400a3c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a3e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a42:	f013 0f08 	tst.w	r3, #8
  400a46:	d0fb      	beq.n	400a40 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400a48:	4b39      	ldr	r3, [pc, #228]	; (400b30 <pmc_sleep+0x234>)
  400a4a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400a4e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400a52:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a54:	461a      	mov	r2, r3
  400a56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a58:	f013 0f08 	tst.w	r3, #8
  400a5c:	d0fb      	beq.n	400a56 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400a5e:	4a33      	ldr	r2, [pc, #204]	; (400b2c <pmc_sleep+0x230>)
  400a60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a62:	420b      	tst	r3, r1
  400a64:	d0fc      	beq.n	400a60 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400a66:	2200      	movs	r2, #0
  400a68:	4b2f      	ldr	r3, [pc, #188]	; (400b28 <pmc_sleep+0x22c>)
  400a6a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400a6c:	4b39      	ldr	r3, [pc, #228]	; (400b54 <pmc_sleep+0x258>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	b11b      	cbz	r3, 400a7a <pmc_sleep+0x17e>
			callback_clocks_restored();
  400a72:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400a74:	2200      	movs	r2, #0
  400a76:	4b37      	ldr	r3, [pc, #220]	; (400b54 <pmc_sleep+0x258>)
  400a78:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400a7a:	2201      	movs	r2, #1
  400a7c:	4b28      	ldr	r3, [pc, #160]	; (400b20 <pmc_sleep+0x224>)
  400a7e:	701a      	strb	r2, [r3, #0]
  400a80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a84:	b662      	cpsie	i
  400a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400a8a:	4629      	mov	r1, r5
  400a8c:	e77e      	b.n	40098c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a8e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400a92:	6a11      	ldr	r1, [r2, #32]
  400a94:	4b30      	ldr	r3, [pc, #192]	; (400b58 <pmc_sleep+0x25c>)
  400a96:	400b      	ands	r3, r1
  400a98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a9c:	6213      	str	r3, [r2, #32]
  400a9e:	e799      	b.n	4009d4 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400aa0:	f017 0f01 	tst.w	r7, #1
  400aa4:	d0b3      	beq.n	400a0e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400aa6:	4b21      	ldr	r3, [pc, #132]	; (400b2c <pmc_sleep+0x230>)
  400aa8:	6a1b      	ldr	r3, [r3, #32]
  400aaa:	f013 0f01 	tst.w	r3, #1
  400aae:	d10b      	bne.n	400ac8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ab0:	491e      	ldr	r1, [pc, #120]	; (400b2c <pmc_sleep+0x230>)
  400ab2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400ab4:	4a29      	ldr	r2, [pc, #164]	; (400b5c <pmc_sleep+0x260>)
  400ab6:	401a      	ands	r2, r3
  400ab8:	4b29      	ldr	r3, [pc, #164]	; (400b60 <pmc_sleep+0x264>)
  400aba:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400abc:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400abe:	460a      	mov	r2, r1
  400ac0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ac2:	f013 0f01 	tst.w	r3, #1
  400ac6:	d0fb      	beq.n	400ac0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400ac8:	4b18      	ldr	r3, [pc, #96]	; (400b2c <pmc_sleep+0x230>)
  400aca:	6a1b      	ldr	r3, [r3, #32]
  400acc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ad0:	d108      	bne.n	400ae4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ad2:	4a16      	ldr	r2, [pc, #88]	; (400b2c <pmc_sleep+0x230>)
  400ad4:	6a11      	ldr	r1, [r2, #32]
  400ad6:	4b23      	ldr	r3, [pc, #140]	; (400b64 <pmc_sleep+0x268>)
  400ad8:	430b      	orrs	r3, r1
  400ada:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400adc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ade:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400ae2:	d0fb      	beq.n	400adc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ae4:	4a11      	ldr	r2, [pc, #68]	; (400b2c <pmc_sleep+0x230>)
  400ae6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  400ae8:	4b18      	ldr	r3, [pc, #96]	; (400b4c <pmc_sleep+0x250>)
  400aea:	400b      	ands	r3, r1
  400aec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400af0:	6213      	str	r3, [r2, #32]
  400af2:	e78c      	b.n	400a0e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  400af4:	2100      	movs	r1, #0
  400af6:	e793      	b.n	400a20 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400af8:	4a08      	ldr	r2, [pc, #32]	; (400b1c <pmc_sleep+0x220>)
  400afa:	6913      	ldr	r3, [r2, #16]
  400afc:	f043 0304 	orr.w	r3, r3, #4
  400b00:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400b02:	4a19      	ldr	r2, [pc, #100]	; (400b68 <pmc_sleep+0x26c>)
  400b04:	4b19      	ldr	r3, [pc, #100]	; (400b6c <pmc_sleep+0x270>)
  400b06:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400b08:	2201      	movs	r2, #1
  400b0a:	4b05      	ldr	r3, [pc, #20]	; (400b20 <pmc_sleep+0x224>)
  400b0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400b0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b12:	b662      	cpsie	i
		__WFI() ;
  400b14:	bf30      	wfi
  400b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b1a:	bf00      	nop
  400b1c:	e000ed00 	.word	0xe000ed00
  400b20:	20400000 	.word	0x20400000
  400b24:	004008ad 	.word	0x004008ad
  400b28:	20400a48 	.word	0x20400a48
  400b2c:	400e0600 	.word	0x400e0600
  400b30:	400e0c00 	.word	0x400e0c00
  400b34:	00370008 	.word	0x00370008
  400b38:	0040086d 	.word	0x0040086d
  400b3c:	fec8ffff 	.word	0xfec8ffff
  400b40:	004008b1 	.word	0x004008b1
  400b44:	fec8fffc 	.word	0xfec8fffc
  400b48:	01370002 	.word	0x01370002
  400b4c:	ffc8ff87 	.word	0xffc8ff87
  400b50:	07ff0000 	.word	0x07ff0000
  400b54:	20400a4c 	.word	0x20400a4c
  400b58:	ffc8fffe 	.word	0xffc8fffe
  400b5c:	ffc8fffc 	.word	0xffc8fffc
  400b60:	00370001 	.word	0x00370001
  400b64:	01370000 	.word	0x01370000
  400b68:	a5000004 	.word	0xa5000004
  400b6c:	400e1810 	.word	0x400e1810

00400b70 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b70:	6943      	ldr	r3, [r0, #20]
  400b72:	f013 0f02 	tst.w	r3, #2
  400b76:	d002      	beq.n	400b7e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b78:	61c1      	str	r1, [r0, #28]
	return 0;
  400b7a:	2000      	movs	r0, #0
  400b7c:	4770      	bx	lr
		return 1;
  400b7e:	2001      	movs	r0, #1
}
  400b80:	4770      	bx	lr

00400b82 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b82:	6943      	ldr	r3, [r0, #20]
  400b84:	f013 0f01 	tst.w	r3, #1
  400b88:	d003      	beq.n	400b92 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b8a:	6983      	ldr	r3, [r0, #24]
  400b8c:	700b      	strb	r3, [r1, #0]
	return 0;
  400b8e:	2000      	movs	r0, #0
  400b90:	4770      	bx	lr
		return 1;
  400b92:	2001      	movs	r0, #1
}
  400b94:	4770      	bx	lr

00400b96 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400b96:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400b98:	010b      	lsls	r3, r1, #4
  400b9a:	4293      	cmp	r3, r2
  400b9c:	d914      	bls.n	400bc8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400b9e:	00c9      	lsls	r1, r1, #3
  400ba0:	084b      	lsrs	r3, r1, #1
  400ba2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ba6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400baa:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bac:	1e5c      	subs	r4, r3, #1
  400bae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bb2:	428c      	cmp	r4, r1
  400bb4:	d901      	bls.n	400bba <usart_set_async_baudrate+0x24>
		return 1;
  400bb6:	2001      	movs	r0, #1
  400bb8:	e017      	b.n	400bea <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400bba:	6841      	ldr	r1, [r0, #4]
  400bbc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400bc0:	6041      	str	r1, [r0, #4]
  400bc2:	e00c      	b.n	400bde <usart_set_async_baudrate+0x48>
		return 1;
  400bc4:	2001      	movs	r0, #1
  400bc6:	e010      	b.n	400bea <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400bc8:	0859      	lsrs	r1, r3, #1
  400bca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400bce:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400bd2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bd4:	1e5c      	subs	r4, r3, #1
  400bd6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bda:	428c      	cmp	r4, r1
  400bdc:	d8f2      	bhi.n	400bc4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400bde:	0412      	lsls	r2, r2, #16
  400be0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400be4:	431a      	orrs	r2, r3
  400be6:	6202      	str	r2, [r0, #32]

	return 0;
  400be8:	2000      	movs	r0, #0
}
  400bea:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bee:	4770      	bx	lr

00400bf0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <usart_reset+0x24>)
  400bf2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400bf6:	2300      	movs	r3, #0
  400bf8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400bfa:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400bfc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bfe:	2388      	movs	r3, #136	; 0x88
  400c00:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c02:	2324      	movs	r3, #36	; 0x24
  400c04:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400c06:	f44f 7380 	mov.w	r3, #256	; 0x100
  400c0a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400c0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400c10:	6003      	str	r3, [r0, #0]
  400c12:	4770      	bx	lr
  400c14:	55534100 	.word	0x55534100

00400c18 <usart_init_rs232>:
{
  400c18:	b570      	push	{r4, r5, r6, lr}
  400c1a:	4605      	mov	r5, r0
  400c1c:	460c      	mov	r4, r1
  400c1e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400c20:	4b0f      	ldr	r3, [pc, #60]	; (400c60 <usart_init_rs232+0x48>)
  400c22:	4798      	blx	r3
	ul_reg_val = 0;
  400c24:	2200      	movs	r2, #0
  400c26:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <usart_init_rs232+0x4c>)
  400c28:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c2a:	b1a4      	cbz	r4, 400c56 <usart_init_rs232+0x3e>
  400c2c:	4632      	mov	r2, r6
  400c2e:	6821      	ldr	r1, [r4, #0]
  400c30:	4628      	mov	r0, r5
  400c32:	4b0d      	ldr	r3, [pc, #52]	; (400c68 <usart_init_rs232+0x50>)
  400c34:	4798      	blx	r3
  400c36:	4602      	mov	r2, r0
  400c38:	b978      	cbnz	r0, 400c5a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c3a:	6863      	ldr	r3, [r4, #4]
  400c3c:	68a1      	ldr	r1, [r4, #8]
  400c3e:	430b      	orrs	r3, r1
  400c40:	6921      	ldr	r1, [r4, #16]
  400c42:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c44:	68e1      	ldr	r1, [r4, #12]
  400c46:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c48:	4906      	ldr	r1, [pc, #24]	; (400c64 <usart_init_rs232+0x4c>)
  400c4a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400c4c:	6869      	ldr	r1, [r5, #4]
  400c4e:	430b      	orrs	r3, r1
  400c50:	606b      	str	r3, [r5, #4]
}
  400c52:	4610      	mov	r0, r2
  400c54:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400c56:	2201      	movs	r2, #1
  400c58:	e7fb      	b.n	400c52 <usart_init_rs232+0x3a>
  400c5a:	2201      	movs	r2, #1
  400c5c:	e7f9      	b.n	400c52 <usart_init_rs232+0x3a>
  400c5e:	bf00      	nop
  400c60:	00400bf1 	.word	0x00400bf1
  400c64:	20400a50 	.word	0x20400a50
  400c68:	00400b97 	.word	0x00400b97

00400c6c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400c6c:	2340      	movs	r3, #64	; 0x40
  400c6e:	6003      	str	r3, [r0, #0]
  400c70:	4770      	bx	lr

00400c72 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400c72:	2310      	movs	r3, #16
  400c74:	6003      	str	r3, [r0, #0]
  400c76:	4770      	bx	lr

00400c78 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  400c78:	6081      	str	r1, [r0, #8]
  400c7a:	4770      	bx	lr

00400c7c <usart_get_status>:
	return p_usart->US_CSR;
  400c7c:	6940      	ldr	r0, [r0, #20]
}
  400c7e:	4770      	bx	lr

00400c80 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c80:	6943      	ldr	r3, [r0, #20]
  400c82:	f013 0f02 	tst.w	r3, #2
  400c86:	d004      	beq.n	400c92 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400c88:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400c8c:	61c1      	str	r1, [r0, #28]
	return 0;
  400c8e:	2000      	movs	r0, #0
  400c90:	4770      	bx	lr
		return 1;
  400c92:	2001      	movs	r0, #1
}
  400c94:	4770      	bx	lr

00400c96 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c96:	6943      	ldr	r3, [r0, #20]
  400c98:	f013 0f01 	tst.w	r3, #1
  400c9c:	d005      	beq.n	400caa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c9e:	6983      	ldr	r3, [r0, #24]
  400ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400ca4:	600b      	str	r3, [r1, #0]
	return 0;
  400ca6:	2000      	movs	r0, #0
  400ca8:	4770      	bx	lr
		return 1;
  400caa:	2001      	movs	r0, #1
}
  400cac:	4770      	bx	lr

00400cae <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400cae:	e7fe      	b.n	400cae <Dummy_Handler>

00400cb0 <Reset_Handler>:
{
  400cb0:	b500      	push	{lr}
  400cb2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400cb4:	4b25      	ldr	r3, [pc, #148]	; (400d4c <Reset_Handler+0x9c>)
  400cb6:	4a26      	ldr	r2, [pc, #152]	; (400d50 <Reset_Handler+0xa0>)
  400cb8:	429a      	cmp	r2, r3
  400cba:	d010      	beq.n	400cde <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400cbc:	4b25      	ldr	r3, [pc, #148]	; (400d54 <Reset_Handler+0xa4>)
  400cbe:	4a23      	ldr	r2, [pc, #140]	; (400d4c <Reset_Handler+0x9c>)
  400cc0:	429a      	cmp	r2, r3
  400cc2:	d20c      	bcs.n	400cde <Reset_Handler+0x2e>
  400cc4:	3b01      	subs	r3, #1
  400cc6:	1a9b      	subs	r3, r3, r2
  400cc8:	f023 0303 	bic.w	r3, r3, #3
  400ccc:	3304      	adds	r3, #4
  400cce:	4413      	add	r3, r2
  400cd0:	491f      	ldr	r1, [pc, #124]	; (400d50 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400cd2:	f851 0b04 	ldr.w	r0, [r1], #4
  400cd6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400cda:	429a      	cmp	r2, r3
  400cdc:	d1f9      	bne.n	400cd2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400cde:	4b1e      	ldr	r3, [pc, #120]	; (400d58 <Reset_Handler+0xa8>)
  400ce0:	4a1e      	ldr	r2, [pc, #120]	; (400d5c <Reset_Handler+0xac>)
  400ce2:	429a      	cmp	r2, r3
  400ce4:	d20a      	bcs.n	400cfc <Reset_Handler+0x4c>
  400ce6:	3b01      	subs	r3, #1
  400ce8:	1a9b      	subs	r3, r3, r2
  400cea:	f023 0303 	bic.w	r3, r3, #3
  400cee:	3304      	adds	r3, #4
  400cf0:	4413      	add	r3, r2
                *pDest++ = 0;
  400cf2:	2100      	movs	r1, #0
  400cf4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400cf8:	4293      	cmp	r3, r2
  400cfa:	d1fb      	bne.n	400cf4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400cfc:	4a18      	ldr	r2, [pc, #96]	; (400d60 <Reset_Handler+0xb0>)
  400cfe:	4b19      	ldr	r3, [pc, #100]	; (400d64 <Reset_Handler+0xb4>)
  400d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400d04:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d06:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d0a:	fab3 f383 	clz	r3, r3
  400d0e:	095b      	lsrs	r3, r3, #5
  400d10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d12:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d18:	2200      	movs	r2, #0
  400d1a:	4b13      	ldr	r3, [pc, #76]	; (400d68 <Reset_Handler+0xb8>)
  400d1c:	701a      	strb	r2, [r3, #0]
	return flags;
  400d1e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d20:	4a12      	ldr	r2, [pc, #72]	; (400d6c <Reset_Handler+0xbc>)
  400d22:	6813      	ldr	r3, [r2, #0]
  400d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d2e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d32:	b129      	cbz	r1, 400d40 <Reset_Handler+0x90>
		cpu_irq_enable();
  400d34:	2201      	movs	r2, #1
  400d36:	4b0c      	ldr	r3, [pc, #48]	; (400d68 <Reset_Handler+0xb8>)
  400d38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400d3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d3e:	b662      	cpsie	i
        __libc_init_array();
  400d40:	4b0b      	ldr	r3, [pc, #44]	; (400d70 <Reset_Handler+0xc0>)
  400d42:	4798      	blx	r3
        main();
  400d44:	4b0b      	ldr	r3, [pc, #44]	; (400d74 <Reset_Handler+0xc4>)
  400d46:	4798      	blx	r3
  400d48:	e7fe      	b.n	400d48 <Reset_Handler+0x98>
  400d4a:	bf00      	nop
  400d4c:	20400000 	.word	0x20400000
  400d50:	0040a7e4 	.word	0x0040a7e4
  400d54:	204009b8 	.word	0x204009b8
  400d58:	20400d54 	.word	0x20400d54
  400d5c:	204009b8 	.word	0x204009b8
  400d60:	e000ed00 	.word	0xe000ed00
  400d64:	00400000 	.word	0x00400000
  400d68:	20400000 	.word	0x20400000
  400d6c:	e000ed88 	.word	0xe000ed88
  400d70:	00403aad 	.word	0x00403aad
  400d74:	0040385d 	.word	0x0040385d

00400d78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400d78:	4b3b      	ldr	r3, [pc, #236]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d7c:	f003 0303 	and.w	r3, r3, #3
  400d80:	2b01      	cmp	r3, #1
  400d82:	d01d      	beq.n	400dc0 <SystemCoreClockUpdate+0x48>
  400d84:	b183      	cbz	r3, 400da8 <SystemCoreClockUpdate+0x30>
  400d86:	2b02      	cmp	r3, #2
  400d88:	d036      	beq.n	400df8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400d8a:	4b37      	ldr	r3, [pc, #220]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d92:	2b70      	cmp	r3, #112	; 0x70
  400d94:	d05f      	beq.n	400e56 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d96:	4b34      	ldr	r3, [pc, #208]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d9a:	4934      	ldr	r1, [pc, #208]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400d9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400da0:	680b      	ldr	r3, [r1, #0]
  400da2:	40d3      	lsrs	r3, r2
  400da4:	600b      	str	r3, [r1, #0]
  400da6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400da8:	4b31      	ldr	r3, [pc, #196]	; (400e70 <SystemCoreClockUpdate+0xf8>)
  400daa:	695b      	ldr	r3, [r3, #20]
  400dac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400db0:	bf14      	ite	ne
  400db2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400db6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400dba:	4b2c      	ldr	r3, [pc, #176]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dbc:	601a      	str	r2, [r3, #0]
  400dbe:	e7e4      	b.n	400d8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400dc0:	4b29      	ldr	r3, [pc, #164]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dc2:	6a1b      	ldr	r3, [r3, #32]
  400dc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400dc8:	d003      	beq.n	400dd2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400dca:	4a2a      	ldr	r2, [pc, #168]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400dcc:	4b27      	ldr	r3, [pc, #156]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dce:	601a      	str	r2, [r3, #0]
  400dd0:	e7db      	b.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dd2:	4a29      	ldr	r2, [pc, #164]	; (400e78 <SystemCoreClockUpdate+0x100>)
  400dd4:	4b25      	ldr	r3, [pc, #148]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dd6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400dd8:	4b23      	ldr	r3, [pc, #140]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dda:	6a1b      	ldr	r3, [r3, #32]
  400ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400de0:	2b10      	cmp	r3, #16
  400de2:	d005      	beq.n	400df0 <SystemCoreClockUpdate+0x78>
  400de4:	2b20      	cmp	r3, #32
  400de6:	d1d0      	bne.n	400d8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400de8:	4a22      	ldr	r2, [pc, #136]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400dea:	4b20      	ldr	r3, [pc, #128]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dec:	601a      	str	r2, [r3, #0]
          break;
  400dee:	e7cc      	b.n	400d8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400df0:	4a22      	ldr	r2, [pc, #136]	; (400e7c <SystemCoreClockUpdate+0x104>)
  400df2:	4b1e      	ldr	r3, [pc, #120]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400df4:	601a      	str	r2, [r3, #0]
          break;
  400df6:	e7c8      	b.n	400d8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400df8:	4b1b      	ldr	r3, [pc, #108]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dfa:	6a1b      	ldr	r3, [r3, #32]
  400dfc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e00:	d016      	beq.n	400e30 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400e02:	4a1c      	ldr	r2, [pc, #112]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400e04:	4b19      	ldr	r3, [pc, #100]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e06:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400e08:	4b17      	ldr	r3, [pc, #92]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e0c:	f003 0303 	and.w	r3, r3, #3
  400e10:	2b02      	cmp	r3, #2
  400e12:	d1ba      	bne.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e14:	4a14      	ldr	r2, [pc, #80]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e16:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400e1a:	4814      	ldr	r0, [pc, #80]	; (400e6c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e1c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e20:	6803      	ldr	r3, [r0, #0]
  400e22:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e26:	b2d2      	uxtb	r2, r2
  400e28:	fbb3 f3f2 	udiv	r3, r3, r2
  400e2c:	6003      	str	r3, [r0, #0]
  400e2e:	e7ac      	b.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e30:	4a11      	ldr	r2, [pc, #68]	; (400e78 <SystemCoreClockUpdate+0x100>)
  400e32:	4b0e      	ldr	r3, [pc, #56]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e34:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e36:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e38:	6a1b      	ldr	r3, [r3, #32]
  400e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e3e:	2b10      	cmp	r3, #16
  400e40:	d005      	beq.n	400e4e <SystemCoreClockUpdate+0xd6>
  400e42:	2b20      	cmp	r3, #32
  400e44:	d1e0      	bne.n	400e08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400e46:	4a0b      	ldr	r2, [pc, #44]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400e48:	4b08      	ldr	r3, [pc, #32]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e4a:	601a      	str	r2, [r3, #0]
          break;
  400e4c:	e7dc      	b.n	400e08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400e4e:	4a0b      	ldr	r2, [pc, #44]	; (400e7c <SystemCoreClockUpdate+0x104>)
  400e50:	4b06      	ldr	r3, [pc, #24]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e52:	601a      	str	r2, [r3, #0]
          break;
  400e54:	e7d8      	b.n	400e08 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400e56:	4a05      	ldr	r2, [pc, #20]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e58:	6813      	ldr	r3, [r2, #0]
  400e5a:	4909      	ldr	r1, [pc, #36]	; (400e80 <SystemCoreClockUpdate+0x108>)
  400e5c:	fba1 1303 	umull	r1, r3, r1, r3
  400e60:	085b      	lsrs	r3, r3, #1
  400e62:	6013      	str	r3, [r2, #0]
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	400e0600 	.word	0x400e0600
  400e6c:	20400004 	.word	0x20400004
  400e70:	400e1810 	.word	0x400e1810
  400e74:	00b71b00 	.word	0x00b71b00
  400e78:	003d0900 	.word	0x003d0900
  400e7c:	007a1200 	.word	0x007a1200
  400e80:	aaaaaaab 	.word	0xaaaaaaab

00400e84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400e84:	4b16      	ldr	r3, [pc, #88]	; (400ee0 <system_init_flash+0x5c>)
  400e86:	4298      	cmp	r0, r3
  400e88:	d913      	bls.n	400eb2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400e8a:	4b16      	ldr	r3, [pc, #88]	; (400ee4 <system_init_flash+0x60>)
  400e8c:	4298      	cmp	r0, r3
  400e8e:	d915      	bls.n	400ebc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e90:	4b15      	ldr	r3, [pc, #84]	; (400ee8 <system_init_flash+0x64>)
  400e92:	4298      	cmp	r0, r3
  400e94:	d916      	bls.n	400ec4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e96:	4b15      	ldr	r3, [pc, #84]	; (400eec <system_init_flash+0x68>)
  400e98:	4298      	cmp	r0, r3
  400e9a:	d917      	bls.n	400ecc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e9c:	4b14      	ldr	r3, [pc, #80]	; (400ef0 <system_init_flash+0x6c>)
  400e9e:	4298      	cmp	r0, r3
  400ea0:	d918      	bls.n	400ed4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400ea2:	4b14      	ldr	r3, [pc, #80]	; (400ef4 <system_init_flash+0x70>)
  400ea4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ea6:	bf94      	ite	ls
  400ea8:	4a13      	ldrls	r2, [pc, #76]	; (400ef8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400eaa:	4a14      	ldrhi	r2, [pc, #80]	; (400efc <system_init_flash+0x78>)
  400eac:	4b14      	ldr	r3, [pc, #80]	; (400f00 <system_init_flash+0x7c>)
  400eae:	601a      	str	r2, [r3, #0]
  400eb0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400eb6:	4b12      	ldr	r3, [pc, #72]	; (400f00 <system_init_flash+0x7c>)
  400eb8:	601a      	str	r2, [r3, #0]
  400eba:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ebc:	4a11      	ldr	r2, [pc, #68]	; (400f04 <system_init_flash+0x80>)
  400ebe:	4b10      	ldr	r3, [pc, #64]	; (400f00 <system_init_flash+0x7c>)
  400ec0:	601a      	str	r2, [r3, #0]
  400ec2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ec4:	4a10      	ldr	r2, [pc, #64]	; (400f08 <system_init_flash+0x84>)
  400ec6:	4b0e      	ldr	r3, [pc, #56]	; (400f00 <system_init_flash+0x7c>)
  400ec8:	601a      	str	r2, [r3, #0]
  400eca:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ecc:	4a0f      	ldr	r2, [pc, #60]	; (400f0c <system_init_flash+0x88>)
  400ece:	4b0c      	ldr	r3, [pc, #48]	; (400f00 <system_init_flash+0x7c>)
  400ed0:	601a      	str	r2, [r3, #0]
  400ed2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ed4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ed8:	4b09      	ldr	r3, [pc, #36]	; (400f00 <system_init_flash+0x7c>)
  400eda:	601a      	str	r2, [r3, #0]
  400edc:	4770      	bx	lr
  400ede:	bf00      	nop
  400ee0:	015ef3bf 	.word	0x015ef3bf
  400ee4:	02bde77f 	.word	0x02bde77f
  400ee8:	041cdb3f 	.word	0x041cdb3f
  400eec:	057bceff 	.word	0x057bceff
  400ef0:	06dac2bf 	.word	0x06dac2bf
  400ef4:	0839b67f 	.word	0x0839b67f
  400ef8:	04000500 	.word	0x04000500
  400efc:	04000600 	.word	0x04000600
  400f00:	400e0c00 	.word	0x400e0c00
  400f04:	04000100 	.word	0x04000100
  400f08:	04000200 	.word	0x04000200
  400f0c:	04000300 	.word	0x04000300

00400f10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f10:	4b0a      	ldr	r3, [pc, #40]	; (400f3c <_sbrk+0x2c>)
  400f12:	681b      	ldr	r3, [r3, #0]
  400f14:	b153      	cbz	r3, 400f2c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f16:	4b09      	ldr	r3, [pc, #36]	; (400f3c <_sbrk+0x2c>)
  400f18:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f1a:	181a      	adds	r2, r3, r0
  400f1c:	4908      	ldr	r1, [pc, #32]	; (400f40 <_sbrk+0x30>)
  400f1e:	4291      	cmp	r1, r2
  400f20:	db08      	blt.n	400f34 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f22:	4610      	mov	r0, r2
  400f24:	4a05      	ldr	r2, [pc, #20]	; (400f3c <_sbrk+0x2c>)
  400f26:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f28:	4618      	mov	r0, r3
  400f2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f2c:	4a05      	ldr	r2, [pc, #20]	; (400f44 <_sbrk+0x34>)
  400f2e:	4b03      	ldr	r3, [pc, #12]	; (400f3c <_sbrk+0x2c>)
  400f30:	601a      	str	r2, [r3, #0]
  400f32:	e7f0      	b.n	400f16 <_sbrk+0x6>
		return (caddr_t) -1;	
  400f34:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	20400a54 	.word	0x20400a54
  400f40:	2045fffc 	.word	0x2045fffc
  400f44:	20402f58 	.word	0x20402f58

00400f48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400f48:	f04f 30ff 	mov.w	r0, #4294967295
  400f4c:	4770      	bx	lr

00400f4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f52:	604b      	str	r3, [r1, #4]

	return 0;
}
  400f54:	2000      	movs	r0, #0
  400f56:	4770      	bx	lr

00400f58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400f58:	2001      	movs	r0, #1
  400f5a:	4770      	bx	lr

00400f5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f5c:	2000      	movs	r0, #0
  400f5e:	4770      	bx	lr

00400f60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f60:	f100 0308 	add.w	r3, r0, #8
  400f64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400f66:	f04f 32ff 	mov.w	r2, #4294967295
  400f6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400f70:	2300      	movs	r3, #0
  400f72:	6003      	str	r3, [r0, #0]
  400f74:	4770      	bx	lr

00400f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400f76:	2300      	movs	r3, #0
  400f78:	6103      	str	r3, [r0, #16]
  400f7a:	4770      	bx	lr

00400f7c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400f7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400f7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400f80:	689a      	ldr	r2, [r3, #8]
  400f82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400f84:	689a      	ldr	r2, [r3, #8]
  400f86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400f88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f8a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f8c:	6803      	ldr	r3, [r0, #0]
  400f8e:	3301      	adds	r3, #1
  400f90:	6003      	str	r3, [r0, #0]
  400f92:	4770      	bx	lr

00400f94 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400f94:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400f96:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400f98:	f1b5 3fff 	cmp.w	r5, #4294967295
  400f9c:	d002      	beq.n	400fa4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f9e:	f100 0208 	add.w	r2, r0, #8
  400fa2:	e002      	b.n	400faa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400fa4:	6902      	ldr	r2, [r0, #16]
  400fa6:	e004      	b.n	400fb2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fa8:	461a      	mov	r2, r3
  400faa:	6853      	ldr	r3, [r2, #4]
  400fac:	681c      	ldr	r4, [r3, #0]
  400fae:	42a5      	cmp	r5, r4
  400fb0:	d2fa      	bcs.n	400fa8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400fb2:	6853      	ldr	r3, [r2, #4]
  400fb4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400fb6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400fb8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400fba:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400fbc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400fbe:	6803      	ldr	r3, [r0, #0]
  400fc0:	3301      	adds	r3, #1
  400fc2:	6003      	str	r3, [r0, #0]
}
  400fc4:	bc30      	pop	{r4, r5}
  400fc6:	4770      	bx	lr

00400fc8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400fc8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400fca:	6842      	ldr	r2, [r0, #4]
  400fcc:	6881      	ldr	r1, [r0, #8]
  400fce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400fd0:	6882      	ldr	r2, [r0, #8]
  400fd2:	6841      	ldr	r1, [r0, #4]
  400fd4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400fd6:	685a      	ldr	r2, [r3, #4]
  400fd8:	4290      	cmp	r0, r2
  400fda:	d006      	beq.n	400fea <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400fdc:	2200      	movs	r2, #0
  400fde:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400fe0:	681a      	ldr	r2, [r3, #0]
  400fe2:	3a01      	subs	r2, #1
  400fe4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400fe6:	6818      	ldr	r0, [r3, #0]
}
  400fe8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400fea:	6882      	ldr	r2, [r0, #8]
  400fec:	605a      	str	r2, [r3, #4]
  400fee:	e7f5      	b.n	400fdc <uxListRemove+0x14>

00400ff0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400ff0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400ff2:	2300      	movs	r3, #0
  400ff4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400ff6:	4b0f      	ldr	r3, [pc, #60]	; (401034 <prvTaskExitError+0x44>)
  400ff8:	681b      	ldr	r3, [r3, #0]
  400ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ffe:	d00a      	beq.n	401016 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401000:	f04f 0380 	mov.w	r3, #128	; 0x80
  401004:	b672      	cpsid	i
  401006:	f383 8811 	msr	BASEPRI, r3
  40100a:	f3bf 8f6f 	isb	sy
  40100e:	f3bf 8f4f 	dsb	sy
  401012:	b662      	cpsie	i
  401014:	e7fe      	b.n	401014 <prvTaskExitError+0x24>
  401016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40101a:	b672      	cpsid	i
  40101c:	f383 8811 	msr	BASEPRI, r3
  401020:	f3bf 8f6f 	isb	sy
  401024:	f3bf 8f4f 	dsb	sy
  401028:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  40102a:	9b01      	ldr	r3, [sp, #4]
  40102c:	2b00      	cmp	r3, #0
  40102e:	d0fc      	beq.n	40102a <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  401030:	b002      	add	sp, #8
  401032:	4770      	bx	lr
  401034:	20400008 	.word	0x20400008

00401038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  401038:	4808      	ldr	r0, [pc, #32]	; (40105c <prvPortStartFirstTask+0x24>)
  40103a:	6800      	ldr	r0, [r0, #0]
  40103c:	6800      	ldr	r0, [r0, #0]
  40103e:	f380 8808 	msr	MSP, r0
  401042:	f04f 0000 	mov.w	r0, #0
  401046:	f380 8814 	msr	CONTROL, r0
  40104a:	b662      	cpsie	i
  40104c:	b661      	cpsie	f
  40104e:	f3bf 8f4f 	dsb	sy
  401052:	f3bf 8f6f 	isb	sy
  401056:	df00      	svc	0
  401058:	bf00      	nop
  40105a:	0000      	.short	0x0000
  40105c:	e000ed08 	.word	0xe000ed08

00401060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401070 <vPortEnableVFP+0x10>
  401064:	6801      	ldr	r1, [r0, #0]
  401066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40106a:	6001      	str	r1, [r0, #0]
  40106c:	4770      	bx	lr
  40106e:	0000      	.short	0x0000
  401070:	e000ed88 	.word	0xe000ed88

00401074 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401078:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40107c:	f021 0101 	bic.w	r1, r1, #1
  401080:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401084:	4b05      	ldr	r3, [pc, #20]	; (40109c <pxPortInitialiseStack+0x28>)
  401086:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40108a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40108e:	f06f 0302 	mvn.w	r3, #2
  401092:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401096:	3844      	subs	r0, #68	; 0x44
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	00400ff1 	.word	0x00400ff1

004010a0 <SVC_Handler>:
	__asm volatile (
  4010a0:	4b07      	ldr	r3, [pc, #28]	; (4010c0 <pxCurrentTCBConst2>)
  4010a2:	6819      	ldr	r1, [r3, #0]
  4010a4:	6808      	ldr	r0, [r1, #0]
  4010a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010aa:	f380 8809 	msr	PSP, r0
  4010ae:	f3bf 8f6f 	isb	sy
  4010b2:	f04f 0000 	mov.w	r0, #0
  4010b6:	f380 8811 	msr	BASEPRI, r0
  4010ba:	4770      	bx	lr
  4010bc:	f3af 8000 	nop.w

004010c0 <pxCurrentTCBConst2>:
  4010c0:	20400a60 	.word	0x20400a60

004010c4 <vPortEnterCritical>:
  4010c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010c8:	b672      	cpsid	i
  4010ca:	f383 8811 	msr	BASEPRI, r3
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	f3bf 8f4f 	dsb	sy
  4010d6:	b662      	cpsie	i
	uxCriticalNesting++;
  4010d8:	4a0b      	ldr	r2, [pc, #44]	; (401108 <vPortEnterCritical+0x44>)
  4010da:	6813      	ldr	r3, [r2, #0]
  4010dc:	3301      	adds	r3, #1
  4010de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4010e0:	2b01      	cmp	r3, #1
  4010e2:	d10f      	bne.n	401104 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4010e4:	4b09      	ldr	r3, [pc, #36]	; (40110c <vPortEnterCritical+0x48>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010ec:	d00a      	beq.n	401104 <vPortEnterCritical+0x40>
  4010ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f2:	b672      	cpsid	i
  4010f4:	f383 8811 	msr	BASEPRI, r3
  4010f8:	f3bf 8f6f 	isb	sy
  4010fc:	f3bf 8f4f 	dsb	sy
  401100:	b662      	cpsie	i
  401102:	e7fe      	b.n	401102 <vPortEnterCritical+0x3e>
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	20400008 	.word	0x20400008
  40110c:	e000ed04 	.word	0xe000ed04

00401110 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401110:	4b0a      	ldr	r3, [pc, #40]	; (40113c <vPortExitCritical+0x2c>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	b953      	cbnz	r3, 40112c <vPortExitCritical+0x1c>
  401116:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111a:	b672      	cpsid	i
  40111c:	f383 8811 	msr	BASEPRI, r3
  401120:	f3bf 8f6f 	isb	sy
  401124:	f3bf 8f4f 	dsb	sy
  401128:	b662      	cpsie	i
  40112a:	e7fe      	b.n	40112a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40112c:	3b01      	subs	r3, #1
  40112e:	4a03      	ldr	r2, [pc, #12]	; (40113c <vPortExitCritical+0x2c>)
  401130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401132:	b90b      	cbnz	r3, 401138 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401134:	f383 8811 	msr	BASEPRI, r3
  401138:	4770      	bx	lr
  40113a:	bf00      	nop
  40113c:	20400008 	.word	0x20400008

00401140 <PendSV_Handler>:
	__asm volatile
  401140:	f3ef 8009 	mrs	r0, PSP
  401144:	f3bf 8f6f 	isb	sy
  401148:	4b15      	ldr	r3, [pc, #84]	; (4011a0 <pxCurrentTCBConst>)
  40114a:	681a      	ldr	r2, [r3, #0]
  40114c:	f01e 0f10 	tst.w	lr, #16
  401150:	bf08      	it	eq
  401152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40115a:	6010      	str	r0, [r2, #0]
  40115c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401160:	f04f 0080 	mov.w	r0, #128	; 0x80
  401164:	b672      	cpsid	i
  401166:	f380 8811 	msr	BASEPRI, r0
  40116a:	f3bf 8f4f 	dsb	sy
  40116e:	f3bf 8f6f 	isb	sy
  401172:	b662      	cpsie	i
  401174:	f001 fa30 	bl	4025d8 <vTaskSwitchContext>
  401178:	f04f 0000 	mov.w	r0, #0
  40117c:	f380 8811 	msr	BASEPRI, r0
  401180:	bc09      	pop	{r0, r3}
  401182:	6819      	ldr	r1, [r3, #0]
  401184:	6808      	ldr	r0, [r1, #0]
  401186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40118a:	f01e 0f10 	tst.w	lr, #16
  40118e:	bf08      	it	eq
  401190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401194:	f380 8809 	msr	PSP, r0
  401198:	f3bf 8f6f 	isb	sy
  40119c:	4770      	bx	lr
  40119e:	bf00      	nop

004011a0 <pxCurrentTCBConst>:
  4011a0:	20400a60 	.word	0x20400a60

004011a4 <SysTick_Handler>:
{
  4011a4:	b508      	push	{r3, lr}
	__asm volatile
  4011a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011aa:	b672      	cpsid	i
  4011ac:	f383 8811 	msr	BASEPRI, r3
  4011b0:	f3bf 8f6f 	isb	sy
  4011b4:	f3bf 8f4f 	dsb	sy
  4011b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4011ba:	4b05      	ldr	r3, [pc, #20]	; (4011d0 <SysTick_Handler+0x2c>)
  4011bc:	4798      	blx	r3
  4011be:	b118      	cbz	r0, 4011c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4011c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011c4:	4b03      	ldr	r3, [pc, #12]	; (4011d4 <SysTick_Handler+0x30>)
  4011c6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4011c8:	2300      	movs	r3, #0
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	bd08      	pop	{r3, pc}
  4011d0:	0040231d 	.word	0x0040231d
  4011d4:	e000ed04 	.word	0xe000ed04

004011d8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4011d8:	4b05      	ldr	r3, [pc, #20]	; (4011f0 <vPortSetupTimerInterrupt+0x18>)
  4011da:	2200      	movs	r2, #0
  4011dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4011de:	4905      	ldr	r1, [pc, #20]	; (4011f4 <vPortSetupTimerInterrupt+0x1c>)
  4011e0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4011e2:	4905      	ldr	r1, [pc, #20]	; (4011f8 <vPortSetupTimerInterrupt+0x20>)
  4011e4:	4a05      	ldr	r2, [pc, #20]	; (4011fc <vPortSetupTimerInterrupt+0x24>)
  4011e6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4011e8:	2207      	movs	r2, #7
  4011ea:	601a      	str	r2, [r3, #0]
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	e000e010 	.word	0xe000e010
  4011f4:	e000e018 	.word	0xe000e018
  4011f8:	000927bf 	.word	0x000927bf
  4011fc:	e000e014 	.word	0xe000e014

00401200 <xPortStartScheduler>:
{
  401200:	b510      	push	{r4, lr}
  401202:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401204:	4b2e      	ldr	r3, [pc, #184]	; (4012c0 <xPortStartScheduler+0xc0>)
  401206:	781a      	ldrb	r2, [r3, #0]
  401208:	b2d2      	uxtb	r2, r2
  40120a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40120c:	22ff      	movs	r2, #255	; 0xff
  40120e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401210:	781b      	ldrb	r3, [r3, #0]
  401212:	b2db      	uxtb	r3, r3
  401214:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401218:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401220:	4a28      	ldr	r2, [pc, #160]	; (4012c4 <xPortStartScheduler+0xc4>)
  401222:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401224:	2207      	movs	r2, #7
  401226:	4b28      	ldr	r3, [pc, #160]	; (4012c8 <xPortStartScheduler+0xc8>)
  401228:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40122a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40122e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401232:	d012      	beq.n	40125a <xPortStartScheduler+0x5a>
  401234:	2306      	movs	r3, #6
  401236:	e000      	b.n	40123a <xPortStartScheduler+0x3a>
  401238:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40123a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40123e:	0052      	lsls	r2, r2, #1
  401240:	b2d2      	uxtb	r2, r2
  401242:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401246:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40124a:	1e59      	subs	r1, r3, #1
  40124c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401250:	d1f2      	bne.n	401238 <xPortStartScheduler+0x38>
  401252:	4a1d      	ldr	r2, [pc, #116]	; (4012c8 <xPortStartScheduler+0xc8>)
  401254:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401256:	2b04      	cmp	r3, #4
  401258:	d00a      	beq.n	401270 <xPortStartScheduler+0x70>
	__asm volatile
  40125a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40125e:	b672      	cpsid	i
  401260:	f383 8811 	msr	BASEPRI, r3
  401264:	f3bf 8f6f 	isb	sy
  401268:	f3bf 8f4f 	dsb	sy
  40126c:	b662      	cpsie	i
  40126e:	e7fe      	b.n	40126e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401270:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401272:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401276:	4a14      	ldr	r2, [pc, #80]	; (4012c8 <xPortStartScheduler+0xc8>)
  401278:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40127a:	9b01      	ldr	r3, [sp, #4]
  40127c:	b2db      	uxtb	r3, r3
  40127e:	4a10      	ldr	r2, [pc, #64]	; (4012c0 <xPortStartScheduler+0xc0>)
  401280:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401282:	4b12      	ldr	r3, [pc, #72]	; (4012cc <xPortStartScheduler+0xcc>)
  401284:	681a      	ldr	r2, [r3, #0]
  401286:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40128a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40128c:	681a      	ldr	r2, [r3, #0]
  40128e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401292:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401294:	4b0e      	ldr	r3, [pc, #56]	; (4012d0 <xPortStartScheduler+0xd0>)
  401296:	4798      	blx	r3
	uxCriticalNesting = 0;
  401298:	2400      	movs	r4, #0
  40129a:	4b0e      	ldr	r3, [pc, #56]	; (4012d4 <xPortStartScheduler+0xd4>)
  40129c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40129e:	4b0e      	ldr	r3, [pc, #56]	; (4012d8 <xPortStartScheduler+0xd8>)
  4012a0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4012a2:	4a0e      	ldr	r2, [pc, #56]	; (4012dc <xPortStartScheduler+0xdc>)
  4012a4:	6813      	ldr	r3, [r2, #0]
  4012a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4012aa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4012ac:	4b0c      	ldr	r3, [pc, #48]	; (4012e0 <xPortStartScheduler+0xe0>)
  4012ae:	4798      	blx	r3
	vTaskSwitchContext();
  4012b0:	4b0c      	ldr	r3, [pc, #48]	; (4012e4 <xPortStartScheduler+0xe4>)
  4012b2:	4798      	blx	r3
	prvTaskExitError();
  4012b4:	4b0c      	ldr	r3, [pc, #48]	; (4012e8 <xPortStartScheduler+0xe8>)
  4012b6:	4798      	blx	r3
}
  4012b8:	4620      	mov	r0, r4
  4012ba:	b002      	add	sp, #8
  4012bc:	bd10      	pop	{r4, pc}
  4012be:	bf00      	nop
  4012c0:	e000e400 	.word	0xe000e400
  4012c4:	20400a58 	.word	0x20400a58
  4012c8:	20400a5c 	.word	0x20400a5c
  4012cc:	e000ed20 	.word	0xe000ed20
  4012d0:	004011d9 	.word	0x004011d9
  4012d4:	20400008 	.word	0x20400008
  4012d8:	00401061 	.word	0x00401061
  4012dc:	e000ef34 	.word	0xe000ef34
  4012e0:	00401039 	.word	0x00401039
  4012e4:	004025d9 	.word	0x004025d9
  4012e8:	00400ff1 	.word	0x00400ff1

004012ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4012ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4012f0:	2b0f      	cmp	r3, #15
  4012f2:	d911      	bls.n	401318 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4012f4:	4a12      	ldr	r2, [pc, #72]	; (401340 <vPortValidateInterruptPriority+0x54>)
  4012f6:	5c9b      	ldrb	r3, [r3, r2]
  4012f8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4012fa:	4a12      	ldr	r2, [pc, #72]	; (401344 <vPortValidateInterruptPriority+0x58>)
  4012fc:	7812      	ldrb	r2, [r2, #0]
  4012fe:	429a      	cmp	r2, r3
  401300:	d90a      	bls.n	401318 <vPortValidateInterruptPriority+0x2c>
  401302:	f04f 0380 	mov.w	r3, #128	; 0x80
  401306:	b672      	cpsid	i
  401308:	f383 8811 	msr	BASEPRI, r3
  40130c:	f3bf 8f6f 	isb	sy
  401310:	f3bf 8f4f 	dsb	sy
  401314:	b662      	cpsie	i
  401316:	e7fe      	b.n	401316 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401318:	4b0b      	ldr	r3, [pc, #44]	; (401348 <vPortValidateInterruptPriority+0x5c>)
  40131a:	681b      	ldr	r3, [r3, #0]
  40131c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401320:	4a0a      	ldr	r2, [pc, #40]	; (40134c <vPortValidateInterruptPriority+0x60>)
  401322:	6812      	ldr	r2, [r2, #0]
  401324:	4293      	cmp	r3, r2
  401326:	d90a      	bls.n	40133e <vPortValidateInterruptPriority+0x52>
  401328:	f04f 0380 	mov.w	r3, #128	; 0x80
  40132c:	b672      	cpsid	i
  40132e:	f383 8811 	msr	BASEPRI, r3
  401332:	f3bf 8f6f 	isb	sy
  401336:	f3bf 8f4f 	dsb	sy
  40133a:	b662      	cpsie	i
  40133c:	e7fe      	b.n	40133c <vPortValidateInterruptPriority+0x50>
  40133e:	4770      	bx	lr
  401340:	e000e3f0 	.word	0xe000e3f0
  401344:	20400a58 	.word	0x20400a58
  401348:	e000ed0c 	.word	0xe000ed0c
  40134c:	20400a5c 	.word	0x20400a5c

00401350 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401350:	b510      	push	{r4, lr}
  401352:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401354:	4b06      	ldr	r3, [pc, #24]	; (401370 <pvPortMalloc+0x20>)
  401356:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401358:	4620      	mov	r0, r4
  40135a:	4b06      	ldr	r3, [pc, #24]	; (401374 <pvPortMalloc+0x24>)
  40135c:	4798      	blx	r3
  40135e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401360:	4b05      	ldr	r3, [pc, #20]	; (401378 <pvPortMalloc+0x28>)
  401362:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401364:	b10c      	cbz	r4, 40136a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401366:	4620      	mov	r0, r4
  401368:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40136a:	4b04      	ldr	r3, [pc, #16]	; (40137c <pvPortMalloc+0x2c>)
  40136c:	4798      	blx	r3
	return pvReturn;
  40136e:	e7fa      	b.n	401366 <pvPortMalloc+0x16>
  401370:	00402301 	.word	0x00402301
  401374:	00403b25 	.word	0x00403b25
  401378:	00402465 	.word	0x00402465
  40137c:	00403779 	.word	0x00403779

00401380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401380:	b148      	cbz	r0, 401396 <vPortFree+0x16>
{
  401382:	b510      	push	{r4, lr}
  401384:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401386:	4b04      	ldr	r3, [pc, #16]	; (401398 <vPortFree+0x18>)
  401388:	4798      	blx	r3
		{
			free( pv );
  40138a:	4620      	mov	r0, r4
  40138c:	4b03      	ldr	r3, [pc, #12]	; (40139c <vPortFree+0x1c>)
  40138e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401390:	4b03      	ldr	r3, [pc, #12]	; (4013a0 <vPortFree+0x20>)
  401392:	4798      	blx	r3
  401394:	bd10      	pop	{r4, pc}
  401396:	4770      	bx	lr
  401398:	00402301 	.word	0x00402301
  40139c:	00403b35 	.word	0x00403b35
  4013a0:	00402465 	.word	0x00402465

004013a4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  4013a4:	b510      	push	{r4, lr}
  4013a6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4013a8:	4b04      	ldr	r3, [pc, #16]	; (4013bc <prvIsQueueEmpty+0x18>)
  4013aa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4013ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4013ae:	4b04      	ldr	r3, [pc, #16]	; (4013c0 <prvIsQueueEmpty+0x1c>)
  4013b0:	4798      	blx	r3

	return xReturn;
}
  4013b2:	fab4 f084 	clz	r0, r4
  4013b6:	0940      	lsrs	r0, r0, #5
  4013b8:	bd10      	pop	{r4, pc}
  4013ba:	bf00      	nop
  4013bc:	004010c5 	.word	0x004010c5
  4013c0:	00401111 	.word	0x00401111

004013c4 <prvCopyDataToQueue>:
{
  4013c4:	b570      	push	{r4, r5, r6, lr}
  4013c6:	4604      	mov	r4, r0
  4013c8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4013ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013ce:	b952      	cbnz	r2, 4013e6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013d0:	6803      	ldr	r3, [r0, #0]
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d12a      	bne.n	40142c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013d6:	6840      	ldr	r0, [r0, #4]
  4013d8:	4b17      	ldr	r3, [pc, #92]	; (401438 <prvCopyDataToQueue+0x74>)
  4013da:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013dc:	2300      	movs	r3, #0
  4013de:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4013e0:	3501      	adds	r5, #1
  4013e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4013e4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4013e6:	b96e      	cbnz	r6, 401404 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4013e8:	6880      	ldr	r0, [r0, #8]
  4013ea:	4b14      	ldr	r3, [pc, #80]	; (40143c <prvCopyDataToQueue+0x78>)
  4013ec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4013ee:	68a3      	ldr	r3, [r4, #8]
  4013f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4013f2:	4413      	add	r3, r2
  4013f4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013f6:	6862      	ldr	r2, [r4, #4]
  4013f8:	4293      	cmp	r3, r2
  4013fa:	d319      	bcc.n	401430 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013fc:	6823      	ldr	r3, [r4, #0]
  4013fe:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401400:	2000      	movs	r0, #0
  401402:	e7ed      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401404:	68c0      	ldr	r0, [r0, #12]
  401406:	4b0d      	ldr	r3, [pc, #52]	; (40143c <prvCopyDataToQueue+0x78>)
  401408:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40140c:	425b      	negs	r3, r3
  40140e:	68e2      	ldr	r2, [r4, #12]
  401410:	441a      	add	r2, r3
  401412:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401414:	6821      	ldr	r1, [r4, #0]
  401416:	428a      	cmp	r2, r1
  401418:	d202      	bcs.n	401420 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40141a:	6862      	ldr	r2, [r4, #4]
  40141c:	4413      	add	r3, r2
  40141e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401420:	b145      	cbz	r5, 401434 <prvCopyDataToQueue+0x70>
  401422:	2e02      	cmp	r6, #2
  401424:	d106      	bne.n	401434 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401426:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401428:	2000      	movs	r0, #0
  40142a:	e7d9      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  40142c:	2000      	movs	r0, #0
  40142e:	e7d7      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401430:	2000      	movs	r0, #0
  401432:	e7d5      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401434:	2000      	movs	r0, #0
  401436:	e7d3      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401438:	00402b21 	.word	0x00402b21
  40143c:	004040a5 	.word	0x004040a5

00401440 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	b082      	sub	sp, #8
  401444:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401446:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401448:	b174      	cbz	r4, 401468 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40144a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40144c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40144e:	429a      	cmp	r2, r3
  401450:	d315      	bcc.n	40147e <prvNotifyQueueSetContainer+0x3e>
  401452:	f04f 0380 	mov.w	r3, #128	; 0x80
  401456:	b672      	cpsid	i
  401458:	f383 8811 	msr	BASEPRI, r3
  40145c:	f3bf 8f6f 	isb	sy
  401460:	f3bf 8f4f 	dsb	sy
  401464:	b662      	cpsie	i
  401466:	e7fe      	b.n	401466 <prvNotifyQueueSetContainer+0x26>
  401468:	f04f 0380 	mov.w	r3, #128	; 0x80
  40146c:	b672      	cpsid	i
  40146e:	f383 8811 	msr	BASEPRI, r3
  401472:	f3bf 8f6f 	isb	sy
  401476:	f3bf 8f4f 	dsb	sy
  40147a:	b662      	cpsie	i
  40147c:	e7fe      	b.n	40147c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401480:	4293      	cmp	r3, r2
  401482:	d803      	bhi.n	40148c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401484:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401486:	4630      	mov	r0, r6
  401488:	b002      	add	sp, #8
  40148a:	bd70      	pop	{r4, r5, r6, pc}
  40148c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40148e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401492:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401494:	a901      	add	r1, sp, #4
  401496:	4620      	mov	r0, r4
  401498:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <prvNotifyQueueSetContainer+0x84>)
  40149a:	4798      	blx	r3
  40149c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40149e:	f1b5 3fff 	cmp.w	r5, #4294967295
  4014a2:	d10a      	bne.n	4014ba <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a6:	2b00      	cmp	r3, #0
  4014a8:	d0ed      	beq.n	401486 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4014aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014ae:	4b06      	ldr	r3, [pc, #24]	; (4014c8 <prvNotifyQueueSetContainer+0x88>)
  4014b0:	4798      	blx	r3
  4014b2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014b4:	bf18      	it	ne
  4014b6:	2601      	movne	r6, #1
  4014b8:	e7e5      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4014ba:	1c6b      	adds	r3, r5, #1
  4014bc:	b25b      	sxtb	r3, r3
  4014be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4014c2:	e7e0      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
  4014c4:	004013c5 	.word	0x004013c5
  4014c8:	0040272d 	.word	0x0040272d

004014cc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014ce:	b172      	cbz	r2, 4014ee <prvCopyDataFromQueue+0x22>
{
  4014d0:	b510      	push	{r4, lr}
  4014d2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014d4:	68c4      	ldr	r4, [r0, #12]
  4014d6:	4414      	add	r4, r2
  4014d8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4014da:	6840      	ldr	r0, [r0, #4]
  4014dc:	4284      	cmp	r4, r0
  4014de:	d301      	bcc.n	4014e4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4014e0:	6818      	ldr	r0, [r3, #0]
  4014e2:	60d8      	str	r0, [r3, #12]
  4014e4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4014e6:	68d9      	ldr	r1, [r3, #12]
  4014e8:	4b01      	ldr	r3, [pc, #4]	; (4014f0 <prvCopyDataFromQueue+0x24>)
  4014ea:	4798      	blx	r3
  4014ec:	bd10      	pop	{r4, pc}
  4014ee:	4770      	bx	lr
  4014f0:	004040a5 	.word	0x004040a5

004014f4 <prvUnlockQueue>:
{
  4014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014f8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4014fa:	4b23      	ldr	r3, [pc, #140]	; (401588 <prvUnlockQueue+0x94>)
  4014fc:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4014fe:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401502:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401504:	2c00      	cmp	r4, #0
  401506:	dd19      	ble.n	40153c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401508:	4e20      	ldr	r6, [pc, #128]	; (40158c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  40150a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401598 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40150e:	4f20      	ldr	r7, [pc, #128]	; (401590 <prvUnlockQueue+0x9c>)
  401510:	e008      	b.n	401524 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401514:	b193      	cbz	r3, 40153c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401516:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40151a:	47b8      	blx	r7
  40151c:	b960      	cbnz	r0, 401538 <prvUnlockQueue+0x44>
  40151e:	3c01      	subs	r4, #1
  401520:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401522:	b15c      	cbz	r4, 40153c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401524:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401526:	2b00      	cmp	r3, #0
  401528:	d0f3      	beq.n	401512 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40152a:	2100      	movs	r1, #0
  40152c:	4628      	mov	r0, r5
  40152e:	47b0      	blx	r6
  401530:	2800      	cmp	r0, #0
  401532:	d0f4      	beq.n	40151e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401534:	47c0      	blx	r8
  401536:	e7f2      	b.n	40151e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401538:	47c0      	blx	r8
  40153a:	e7f0      	b.n	40151e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40153c:	23ff      	movs	r3, #255	; 0xff
  40153e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401542:	4b14      	ldr	r3, [pc, #80]	; (401594 <prvUnlockQueue+0xa0>)
  401544:	4798      	blx	r3
	taskENTER_CRITICAL();
  401546:	4b10      	ldr	r3, [pc, #64]	; (401588 <prvUnlockQueue+0x94>)
  401548:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40154a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40154e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401550:	2c00      	cmp	r4, #0
  401552:	dd12      	ble.n	40157a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401554:	692b      	ldr	r3, [r5, #16]
  401556:	b183      	cbz	r3, 40157a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401558:	f105 0710 	add.w	r7, r5, #16
  40155c:	4e0c      	ldr	r6, [pc, #48]	; (401590 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40155e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401598 <prvUnlockQueue+0xa4>
  401562:	e004      	b.n	40156e <prvUnlockQueue+0x7a>
  401564:	3c01      	subs	r4, #1
  401566:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401568:	b13c      	cbz	r4, 40157a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40156a:	692b      	ldr	r3, [r5, #16]
  40156c:	b12b      	cbz	r3, 40157a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40156e:	4638      	mov	r0, r7
  401570:	47b0      	blx	r6
  401572:	2800      	cmp	r0, #0
  401574:	d0f6      	beq.n	401564 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401576:	47c0      	blx	r8
  401578:	e7f4      	b.n	401564 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40157a:	23ff      	movs	r3, #255	; 0xff
  40157c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401580:	4b04      	ldr	r3, [pc, #16]	; (401594 <prvUnlockQueue+0xa0>)
  401582:	4798      	blx	r3
  401584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401588:	004010c5 	.word	0x004010c5
  40158c:	00401441 	.word	0x00401441
  401590:	0040272d 	.word	0x0040272d
  401594:	00401111 	.word	0x00401111
  401598:	00402871 	.word	0x00402871

0040159c <xQueueGenericReset>:
{
  40159c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40159e:	b330      	cbz	r0, 4015ee <xQueueGenericReset+0x52>
  4015a0:	4604      	mov	r4, r0
  4015a2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4015a4:	4b1d      	ldr	r3, [pc, #116]	; (40161c <xQueueGenericReset+0x80>)
  4015a6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4015a8:	6822      	ldr	r2, [r4, #0]
  4015aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4015ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015ae:	fb03 f301 	mul.w	r3, r3, r1
  4015b2:	18d0      	adds	r0, r2, r3
  4015b4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015b6:	2000      	movs	r0, #0
  4015b8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015ba:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015bc:	1a5b      	subs	r3, r3, r1
  4015be:	4413      	add	r3, r2
  4015c0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4015c2:	23ff      	movs	r3, #255	; 0xff
  4015c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4015c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4015cc:	b9d5      	cbnz	r5, 401604 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015ce:	6923      	ldr	r3, [r4, #16]
  4015d0:	b1fb      	cbz	r3, 401612 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015d2:	f104 0010 	add.w	r0, r4, #16
  4015d6:	4b12      	ldr	r3, [pc, #72]	; (401620 <xQueueGenericReset+0x84>)
  4015d8:	4798      	blx	r3
  4015da:	b1d0      	cbz	r0, 401612 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4015dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015e0:	4b10      	ldr	r3, [pc, #64]	; (401624 <xQueueGenericReset+0x88>)
  4015e2:	601a      	str	r2, [r3, #0]
  4015e4:	f3bf 8f4f 	dsb	sy
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	e011      	b.n	401612 <xQueueGenericReset+0x76>
  4015ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f2:	b672      	cpsid	i
  4015f4:	f383 8811 	msr	BASEPRI, r3
  4015f8:	f3bf 8f6f 	isb	sy
  4015fc:	f3bf 8f4f 	dsb	sy
  401600:	b662      	cpsie	i
  401602:	e7fe      	b.n	401602 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401604:	f104 0010 	add.w	r0, r4, #16
  401608:	4d07      	ldr	r5, [pc, #28]	; (401628 <xQueueGenericReset+0x8c>)
  40160a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40160c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401610:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401612:	4b06      	ldr	r3, [pc, #24]	; (40162c <xQueueGenericReset+0x90>)
  401614:	4798      	blx	r3
}
  401616:	2001      	movs	r0, #1
  401618:	bd38      	pop	{r3, r4, r5, pc}
  40161a:	bf00      	nop
  40161c:	004010c5 	.word	0x004010c5
  401620:	0040272d 	.word	0x0040272d
  401624:	e000ed04 	.word	0xe000ed04
  401628:	00400f61 	.word	0x00400f61
  40162c:	00401111 	.word	0x00401111

00401630 <xQueueGenericCreate>:
	{
  401630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401632:	b950      	cbnz	r0, 40164a <xQueueGenericCreate+0x1a>
  401634:	f04f 0380 	mov.w	r3, #128	; 0x80
  401638:	b672      	cpsid	i
  40163a:	f383 8811 	msr	BASEPRI, r3
  40163e:	f3bf 8f6f 	isb	sy
  401642:	f3bf 8f4f 	dsb	sy
  401646:	b662      	cpsie	i
  401648:	e7fe      	b.n	401648 <xQueueGenericCreate+0x18>
  40164a:	4606      	mov	r6, r0
  40164c:	4617      	mov	r7, r2
  40164e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401650:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401654:	3054      	adds	r0, #84	; 0x54
  401656:	4b0b      	ldr	r3, [pc, #44]	; (401684 <xQueueGenericCreate+0x54>)
  401658:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40165a:	4604      	mov	r4, r0
  40165c:	b178      	cbz	r0, 40167e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40165e:	b11d      	cbz	r5, 401668 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401660:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401664:	6003      	str	r3, [r0, #0]
  401666:	e000      	b.n	40166a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401668:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40166a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40166c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40166e:	2101      	movs	r1, #1
  401670:	4620      	mov	r0, r4
  401672:	4b05      	ldr	r3, [pc, #20]	; (401688 <xQueueGenericCreate+0x58>)
  401674:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401676:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40167a:	2300      	movs	r3, #0
  40167c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40167e:	4620      	mov	r0, r4
  401680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401682:	bf00      	nop
  401684:	00401351 	.word	0x00401351
  401688:	0040159d 	.word	0x0040159d

0040168c <xQueueGenericSend>:
{
  40168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401690:	b085      	sub	sp, #20
  401692:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401694:	b1b8      	cbz	r0, 4016c6 <xQueueGenericSend+0x3a>
  401696:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401698:	b301      	cbz	r1, 4016dc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40169a:	2b02      	cmp	r3, #2
  40169c:	d02c      	beq.n	4016f8 <xQueueGenericSend+0x6c>
  40169e:	461e      	mov	r6, r3
  4016a0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016a2:	4b69      	ldr	r3, [pc, #420]	; (401848 <xQueueGenericSend+0x1bc>)
  4016a4:	4798      	blx	r3
  4016a6:	2800      	cmp	r0, #0
  4016a8:	d134      	bne.n	401714 <xQueueGenericSend+0x88>
  4016aa:	9b01      	ldr	r3, [sp, #4]
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	d039      	beq.n	401724 <xQueueGenericSend+0x98>
  4016b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016b4:	b672      	cpsid	i
  4016b6:	f383 8811 	msr	BASEPRI, r3
  4016ba:	f3bf 8f6f 	isb	sy
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	b662      	cpsie	i
  4016c4:	e7fe      	b.n	4016c4 <xQueueGenericSend+0x38>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016de:	2a00      	cmp	r2, #0
  4016e0:	d0db      	beq.n	40169a <xQueueGenericSend+0xe>
  4016e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016e6:	b672      	cpsid	i
  4016e8:	f383 8811 	msr	BASEPRI, r3
  4016ec:	f3bf 8f6f 	isb	sy
  4016f0:	f3bf 8f4f 	dsb	sy
  4016f4:	b662      	cpsie	i
  4016f6:	e7fe      	b.n	4016f6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4016fa:	2a01      	cmp	r2, #1
  4016fc:	d0cf      	beq.n	40169e <xQueueGenericSend+0x12>
  4016fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401702:	b672      	cpsid	i
  401704:	f383 8811 	msr	BASEPRI, r3
  401708:	f3bf 8f6f 	isb	sy
  40170c:	f3bf 8f4f 	dsb	sy
  401710:	b662      	cpsie	i
  401712:	e7fe      	b.n	401712 <xQueueGenericSend+0x86>
  401714:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401716:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401874 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40171a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401878 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40171e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401854 <xQueueGenericSend+0x1c8>
  401722:	e041      	b.n	4017a8 <xQueueGenericSend+0x11c>
  401724:	2500      	movs	r5, #0
  401726:	e7f6      	b.n	401716 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401728:	4632      	mov	r2, r6
  40172a:	4639      	mov	r1, r7
  40172c:	4620      	mov	r0, r4
  40172e:	4b47      	ldr	r3, [pc, #284]	; (40184c <xQueueGenericSend+0x1c0>)
  401730:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401732:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401734:	b193      	cbz	r3, 40175c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401736:	4631      	mov	r1, r6
  401738:	4620      	mov	r0, r4
  40173a:	4b45      	ldr	r3, [pc, #276]	; (401850 <xQueueGenericSend+0x1c4>)
  40173c:	4798      	blx	r3
  40173e:	b138      	cbz	r0, 401750 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401744:	4b43      	ldr	r3, [pc, #268]	; (401854 <xQueueGenericSend+0x1c8>)
  401746:	601a      	str	r2, [r3, #0]
  401748:	f3bf 8f4f 	dsb	sy
  40174c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401750:	4b41      	ldr	r3, [pc, #260]	; (401858 <xQueueGenericSend+0x1cc>)
  401752:	4798      	blx	r3
				return pdPASS;
  401754:	2001      	movs	r0, #1
}
  401756:	b005      	add	sp, #20
  401758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40175c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40175e:	b173      	cbz	r3, 40177e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401760:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401764:	4b3d      	ldr	r3, [pc, #244]	; (40185c <xQueueGenericSend+0x1d0>)
  401766:	4798      	blx	r3
  401768:	2800      	cmp	r0, #0
  40176a:	d0f1      	beq.n	401750 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40176c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401770:	4b38      	ldr	r3, [pc, #224]	; (401854 <xQueueGenericSend+0x1c8>)
  401772:	601a      	str	r2, [r3, #0]
  401774:	f3bf 8f4f 	dsb	sy
  401778:	f3bf 8f6f 	isb	sy
  40177c:	e7e8      	b.n	401750 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40177e:	2800      	cmp	r0, #0
  401780:	d0e6      	beq.n	401750 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401786:	4b33      	ldr	r3, [pc, #204]	; (401854 <xQueueGenericSend+0x1c8>)
  401788:	601a      	str	r2, [r3, #0]
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	f3bf 8f6f 	isb	sy
  401792:	e7dd      	b.n	401750 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401794:	4b30      	ldr	r3, [pc, #192]	; (401858 <xQueueGenericSend+0x1cc>)
  401796:	4798      	blx	r3
					return errQUEUE_FULL;
  401798:	2000      	movs	r0, #0
  40179a:	e7dc      	b.n	401756 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40179c:	4620      	mov	r0, r4
  40179e:	4b30      	ldr	r3, [pc, #192]	; (401860 <xQueueGenericSend+0x1d4>)
  4017a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4017a2:	4b30      	ldr	r3, [pc, #192]	; (401864 <xQueueGenericSend+0x1d8>)
  4017a4:	4798      	blx	r3
  4017a6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  4017a8:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4017aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4017ae:	429a      	cmp	r2, r3
  4017b0:	d3ba      	bcc.n	401728 <xQueueGenericSend+0x9c>
  4017b2:	2e02      	cmp	r6, #2
  4017b4:	d0b8      	beq.n	401728 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017b6:	9b01      	ldr	r3, [sp, #4]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d0eb      	beq.n	401794 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4017bc:	b90d      	cbnz	r5, 4017c2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4017be:	a802      	add	r0, sp, #8
  4017c0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4017c2:	4b25      	ldr	r3, [pc, #148]	; (401858 <xQueueGenericSend+0x1cc>)
  4017c4:	4798      	blx	r3
		vTaskSuspendAll();
  4017c6:	4b28      	ldr	r3, [pc, #160]	; (401868 <xQueueGenericSend+0x1dc>)
  4017c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4017ca:	47c0      	blx	r8
  4017cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4017d0:	b25b      	sxtb	r3, r3
  4017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017d6:	d102      	bne.n	4017de <xQueueGenericSend+0x152>
  4017d8:	2300      	movs	r3, #0
  4017da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4017de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4017e2:	b25b      	sxtb	r3, r3
  4017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017e8:	d102      	bne.n	4017f0 <xQueueGenericSend+0x164>
  4017ea:	2300      	movs	r3, #0
  4017ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4017f0:	4b19      	ldr	r3, [pc, #100]	; (401858 <xQueueGenericSend+0x1cc>)
  4017f2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017f4:	a901      	add	r1, sp, #4
  4017f6:	a802      	add	r0, sp, #8
  4017f8:	4b1c      	ldr	r3, [pc, #112]	; (40186c <xQueueGenericSend+0x1e0>)
  4017fa:	4798      	blx	r3
  4017fc:	b9e0      	cbnz	r0, 401838 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4017fe:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401800:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401804:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401806:	4b14      	ldr	r3, [pc, #80]	; (401858 <xQueueGenericSend+0x1cc>)
  401808:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40180a:	45ab      	cmp	fp, r5
  40180c:	d1c6      	bne.n	40179c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40180e:	9901      	ldr	r1, [sp, #4]
  401810:	f104 0010 	add.w	r0, r4, #16
  401814:	4b16      	ldr	r3, [pc, #88]	; (401870 <xQueueGenericSend+0x1e4>)
  401816:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401818:	4620      	mov	r0, r4
  40181a:	4b11      	ldr	r3, [pc, #68]	; (401860 <xQueueGenericSend+0x1d4>)
  40181c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40181e:	4b11      	ldr	r3, [pc, #68]	; (401864 <xQueueGenericSend+0x1d8>)
  401820:	4798      	blx	r3
  401822:	2800      	cmp	r0, #0
  401824:	d1bf      	bne.n	4017a6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40182a:	f8c9 3000 	str.w	r3, [r9]
  40182e:	f3bf 8f4f 	dsb	sy
  401832:	f3bf 8f6f 	isb	sy
  401836:	e7b6      	b.n	4017a6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401838:	4620      	mov	r0, r4
  40183a:	4b09      	ldr	r3, [pc, #36]	; (401860 <xQueueGenericSend+0x1d4>)
  40183c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40183e:	4b09      	ldr	r3, [pc, #36]	; (401864 <xQueueGenericSend+0x1d8>)
  401840:	4798      	blx	r3
			return errQUEUE_FULL;
  401842:	2000      	movs	r0, #0
  401844:	e787      	b.n	401756 <xQueueGenericSend+0xca>
  401846:	bf00      	nop
  401848:	00402a41 	.word	0x00402a41
  40184c:	004013c5 	.word	0x004013c5
  401850:	00401441 	.word	0x00401441
  401854:	e000ed04 	.word	0xe000ed04
  401858:	00401111 	.word	0x00401111
  40185c:	0040272d 	.word	0x0040272d
  401860:	004014f5 	.word	0x004014f5
  401864:	00402465 	.word	0x00402465
  401868:	00402301 	.word	0x00402301
  40186c:	004027dd 	.word	0x004027dd
  401870:	004026a9 	.word	0x004026a9
  401874:	004010c5 	.word	0x004010c5
  401878:	004027c5 	.word	0x004027c5

0040187c <xQueueGenericSendFromISR>:
{
  40187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401880:	2800      	cmp	r0, #0
  401882:	d039      	beq.n	4018f8 <xQueueGenericSendFromISR+0x7c>
  401884:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401886:	2900      	cmp	r1, #0
  401888:	d041      	beq.n	40190e <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40188a:	2b02      	cmp	r3, #2
  40188c:	d04d      	beq.n	40192a <xQueueGenericSendFromISR+0xae>
  40188e:	461f      	mov	r7, r3
  401890:	4690      	mov	r8, r2
  401892:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401894:	4b3a      	ldr	r3, [pc, #232]	; (401980 <xQueueGenericSendFromISR+0x104>)
  401896:	4798      	blx	r3
	__asm volatile
  401898:	f3ef 8611 	mrs	r6, BASEPRI
  40189c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018a0:	b672      	cpsid	i
  4018a2:	f383 8811 	msr	BASEPRI, r3
  4018a6:	f3bf 8f6f 	isb	sy
  4018aa:	f3bf 8f4f 	dsb	sy
  4018ae:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018b4:	429a      	cmp	r2, r3
  4018b6:	d301      	bcc.n	4018bc <xQueueGenericSendFromISR+0x40>
  4018b8:	2f02      	cmp	r7, #2
  4018ba:	d158      	bne.n	40196e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4018bc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4018c0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018c2:	463a      	mov	r2, r7
  4018c4:	4649      	mov	r1, r9
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b2e      	ldr	r3, [pc, #184]	; (401984 <xQueueGenericSendFromISR+0x108>)
  4018ca:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4018cc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4018d0:	d147      	bne.n	401962 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4018d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d036      	beq.n	401946 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4018d8:	4639      	mov	r1, r7
  4018da:	4620      	mov	r0, r4
  4018dc:	4b2a      	ldr	r3, [pc, #168]	; (401988 <xQueueGenericSendFromISR+0x10c>)
  4018de:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4018e0:	f1b8 0f00 	cmp.w	r8, #0
  4018e4:	d045      	beq.n	401972 <xQueueGenericSendFromISR+0xf6>
  4018e6:	2800      	cmp	r0, #0
  4018e8:	d043      	beq.n	401972 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018ea:	2001      	movs	r0, #1
  4018ec:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4018f0:	f386 8811 	msr	BASEPRI, r6
}
  4018f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4018f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018fc:	b672      	cpsid	i
  4018fe:	f383 8811 	msr	BASEPRI, r3
  401902:	f3bf 8f6f 	isb	sy
  401906:	f3bf 8f4f 	dsb	sy
  40190a:	b662      	cpsie	i
  40190c:	e7fe      	b.n	40190c <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40190e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401910:	2800      	cmp	r0, #0
  401912:	d0ba      	beq.n	40188a <xQueueGenericSendFromISR+0xe>
  401914:	f04f 0380 	mov.w	r3, #128	; 0x80
  401918:	b672      	cpsid	i
  40191a:	f383 8811 	msr	BASEPRI, r3
  40191e:	f3bf 8f6f 	isb	sy
  401922:	f3bf 8f4f 	dsb	sy
  401926:	b662      	cpsie	i
  401928:	e7fe      	b.n	401928 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40192a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40192c:	2801      	cmp	r0, #1
  40192e:	d0ae      	beq.n	40188e <xQueueGenericSendFromISR+0x12>
  401930:	f04f 0380 	mov.w	r3, #128	; 0x80
  401934:	b672      	cpsid	i
  401936:	f383 8811 	msr	BASEPRI, r3
  40193a:	f3bf 8f6f 	isb	sy
  40193e:	f3bf 8f4f 	dsb	sy
  401942:	b662      	cpsie	i
  401944:	e7fe      	b.n	401944 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401946:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401948:	b1ab      	cbz	r3, 401976 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40194a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40194e:	4b0f      	ldr	r3, [pc, #60]	; (40198c <xQueueGenericSendFromISR+0x110>)
  401950:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401952:	f1b8 0f00 	cmp.w	r8, #0
  401956:	d010      	beq.n	40197a <xQueueGenericSendFromISR+0xfe>
  401958:	b178      	cbz	r0, 40197a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40195a:	2001      	movs	r0, #1
  40195c:	f8c8 0000 	str.w	r0, [r8]
  401960:	e7c6      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401962:	1c6b      	adds	r3, r5, #1
  401964:	b25b      	sxtb	r3, r3
  401966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40196a:	2001      	movs	r0, #1
  40196c:	e7c0      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40196e:	2000      	movs	r0, #0
  401970:	e7be      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401972:	2001      	movs	r0, #1
  401974:	e7bc      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  401976:	2001      	movs	r0, #1
  401978:	e7ba      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  40197a:	2001      	movs	r0, #1
  40197c:	e7b8      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  40197e:	bf00      	nop
  401980:	004012ed 	.word	0x004012ed
  401984:	004013c5 	.word	0x004013c5
  401988:	00401441 	.word	0x00401441
  40198c:	0040272d 	.word	0x0040272d

00401990 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401990:	b170      	cbz	r0, 4019b0 <xQueueGiveFromISR+0x20>
{
  401992:	b570      	push	{r4, r5, r6, lr}
  401994:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401996:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401998:	b1ab      	cbz	r3, 4019c6 <xQueueGiveFromISR+0x36>
  40199a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40199e:	b672      	cpsid	i
  4019a0:	f383 8811 	msr	BASEPRI, r3
  4019a4:	f3bf 8f6f 	isb	sy
  4019a8:	f3bf 8f4f 	dsb	sy
  4019ac:	b662      	cpsie	i
  4019ae:	e7fe      	b.n	4019ae <xQueueGiveFromISR+0x1e>
  4019b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b4:	b672      	cpsid	i
  4019b6:	f383 8811 	msr	BASEPRI, r3
  4019ba:	f3bf 8f6f 	isb	sy
  4019be:	f3bf 8f4f 	dsb	sy
  4019c2:	b662      	cpsie	i
  4019c4:	e7fe      	b.n	4019c4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019c6:	6803      	ldr	r3, [r0, #0]
  4019c8:	b33b      	cbz	r3, 401a1a <xQueueGiveFromISR+0x8a>
  4019ca:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019cc:	4b26      	ldr	r3, [pc, #152]	; (401a68 <xQueueGiveFromISR+0xd8>)
  4019ce:	4798      	blx	r3
	__asm volatile
  4019d0:	f3ef 8511 	mrs	r5, BASEPRI
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4019e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  4019ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019ec:	429a      	cmp	r2, r3
  4019ee:	d233      	bcs.n	401a58 <xQueueGiveFromISR+0xc8>
			const int8_t cTxLock = pxQueue->cTxLock;
  4019f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4019f4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4019f6:	3201      	adds	r2, #1
  4019f8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  4019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019fe:	d125      	bne.n	401a4c <xQueueGiveFromISR+0xbc>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a02:	b1c3      	cbz	r3, 401a36 <xQueueGiveFromISR+0xa6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401a04:	2100      	movs	r1, #0
  401a06:	4620      	mov	r0, r4
  401a08:	4b18      	ldr	r3, [pc, #96]	; (401a6c <xQueueGiveFromISR+0xdc>)
  401a0a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a0c:	b336      	cbz	r6, 401a5c <xQueueGiveFromISR+0xcc>
  401a0e:	b328      	cbz	r0, 401a5c <xQueueGiveFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a10:	2001      	movs	r0, #1
  401a12:	6030      	str	r0, [r6, #0]
	__asm volatile
  401a14:	f385 8811 	msr	BASEPRI, r5
}
  401a18:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a1a:	6843      	ldr	r3, [r0, #4]
  401a1c:	2b00      	cmp	r3, #0
  401a1e:	d0d4      	beq.n	4019ca <xQueueGiveFromISR+0x3a>
	__asm volatile
  401a20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a24:	b672      	cpsid	i
  401a26:	f383 8811 	msr	BASEPRI, r3
  401a2a:	f3bf 8f6f 	isb	sy
  401a2e:	f3bf 8f4f 	dsb	sy
  401a32:	b662      	cpsie	i
  401a34:	e7fe      	b.n	401a34 <xQueueGiveFromISR+0xa4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a38:	b193      	cbz	r3, 401a60 <xQueueGiveFromISR+0xd0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a3e:	4b0c      	ldr	r3, [pc, #48]	; (401a70 <xQueueGiveFromISR+0xe0>)
  401a40:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a42:	b17e      	cbz	r6, 401a64 <xQueueGiveFromISR+0xd4>
  401a44:	b170      	cbz	r0, 401a64 <xQueueGiveFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a46:	2001      	movs	r0, #1
  401a48:	6030      	str	r0, [r6, #0]
  401a4a:	e7e3      	b.n	401a14 <xQueueGiveFromISR+0x84>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401a4c:	3301      	adds	r3, #1
  401a4e:	b25b      	sxtb	r3, r3
  401a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  401a54:	2001      	movs	r0, #1
  401a56:	e7dd      	b.n	401a14 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
  401a58:	2000      	movs	r0, #0
  401a5a:	e7db      	b.n	401a14 <xQueueGiveFromISR+0x84>
			xReturn = pdPASS;
  401a5c:	2001      	movs	r0, #1
  401a5e:	e7d9      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a60:	2001      	movs	r0, #1
  401a62:	e7d7      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a64:	2001      	movs	r0, #1
  401a66:	e7d5      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a68:	004012ed 	.word	0x004012ed
  401a6c:	00401441 	.word	0x00401441
  401a70:	0040272d 	.word	0x0040272d

00401a74 <xQueueReceive>:
{
  401a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a78:	b084      	sub	sp, #16
  401a7a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401a7c:	b190      	cbz	r0, 401aa4 <xQueueReceive+0x30>
  401a7e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a80:	b1d9      	cbz	r1, 401aba <xQueueReceive+0x46>
  401a82:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a84:	4b54      	ldr	r3, [pc, #336]	; (401bd8 <xQueueReceive+0x164>)
  401a86:	4798      	blx	r3
  401a88:	bb28      	cbnz	r0, 401ad6 <xQueueReceive+0x62>
  401a8a:	9b01      	ldr	r3, [sp, #4]
  401a8c:	b35b      	cbz	r3, 401ae6 <xQueueReceive+0x72>
  401a8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a92:	b672      	cpsid	i
  401a94:	f383 8811 	msr	BASEPRI, r3
  401a98:	f3bf 8f6f 	isb	sy
  401a9c:	f3bf 8f4f 	dsb	sy
  401aa0:	b662      	cpsie	i
  401aa2:	e7fe      	b.n	401aa2 <xQueueReceive+0x2e>
  401aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa8:	b672      	cpsid	i
  401aaa:	f383 8811 	msr	BASEPRI, r3
  401aae:	f3bf 8f6f 	isb	sy
  401ab2:	f3bf 8f4f 	dsb	sy
  401ab6:	b662      	cpsie	i
  401ab8:	e7fe      	b.n	401ab8 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401aba:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401abc:	2b00      	cmp	r3, #0
  401abe:	d0e0      	beq.n	401a82 <xQueueReceive+0xe>
  401ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac4:	b672      	cpsid	i
  401ac6:	f383 8811 	msr	BASEPRI, r3
  401aca:	f3bf 8f6f 	isb	sy
  401ace:	f3bf 8f4f 	dsb	sy
  401ad2:	b662      	cpsie	i
  401ad4:	e7fe      	b.n	401ad4 <xQueueReceive+0x60>
  401ad6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401ad8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401c04 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401adc:	f8df a128 	ldr.w	sl, [pc, #296]	; 401c08 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  401ae0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401be4 <xQueueReceive+0x170>
  401ae4:	e031      	b.n	401b4a <xQueueReceive+0xd6>
  401ae6:	2700      	movs	r7, #0
  401ae8:	e7f6      	b.n	401ad8 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401aea:	4631      	mov	r1, r6
  401aec:	4620      	mov	r0, r4
  401aee:	4b3b      	ldr	r3, [pc, #236]	; (401bdc <xQueueReceive+0x168>)
  401af0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401af2:	3d01      	subs	r5, #1
  401af4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401af6:	6923      	ldr	r3, [r4, #16]
  401af8:	b163      	cbz	r3, 401b14 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401afa:	f104 0010 	add.w	r0, r4, #16
  401afe:	4b38      	ldr	r3, [pc, #224]	; (401be0 <xQueueReceive+0x16c>)
  401b00:	4798      	blx	r3
  401b02:	b138      	cbz	r0, 401b14 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b08:	4b36      	ldr	r3, [pc, #216]	; (401be4 <xQueueReceive+0x170>)
  401b0a:	601a      	str	r2, [r3, #0]
  401b0c:	f3bf 8f4f 	dsb	sy
  401b10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b14:	4b34      	ldr	r3, [pc, #208]	; (401be8 <xQueueReceive+0x174>)
  401b16:	4798      	blx	r3
				return pdPASS;
  401b18:	2001      	movs	r0, #1
}
  401b1a:	b004      	add	sp, #16
  401b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  401b20:	4b31      	ldr	r3, [pc, #196]	; (401be8 <xQueueReceive+0x174>)
  401b22:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b24:	2000      	movs	r0, #0
  401b26:	e7f8      	b.n	401b1a <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401b28:	a802      	add	r0, sp, #8
  401b2a:	47d0      	blx	sl
  401b2c:	e016      	b.n	401b5c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  401b2e:	2300      	movs	r3, #0
  401b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401b34:	e01d      	b.n	401b72 <xQueueReceive+0xfe>
  401b36:	2300      	movs	r3, #0
  401b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401b3c:	e01f      	b.n	401b7e <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  401b3e:	4620      	mov	r0, r4
  401b40:	4b2a      	ldr	r3, [pc, #168]	; (401bec <xQueueReceive+0x178>)
  401b42:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b44:	4b2a      	ldr	r3, [pc, #168]	; (401bf0 <xQueueReceive+0x17c>)
  401b46:	4798      	blx	r3
  401b48:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401b4a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401b4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b4e:	2d00      	cmp	r5, #0
  401b50:	d1cb      	bne.n	401aea <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b52:	9b01      	ldr	r3, [sp, #4]
  401b54:	2b00      	cmp	r3, #0
  401b56:	d0e3      	beq.n	401b20 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401b58:	2f00      	cmp	r7, #0
  401b5a:	d0e5      	beq.n	401b28 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401b5c:	4b22      	ldr	r3, [pc, #136]	; (401be8 <xQueueReceive+0x174>)
  401b5e:	4798      	blx	r3
		vTaskSuspendAll();
  401b60:	4b24      	ldr	r3, [pc, #144]	; (401bf4 <xQueueReceive+0x180>)
  401b62:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b64:	47c0      	blx	r8
  401b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401b6a:	b25b      	sxtb	r3, r3
  401b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b70:	d0dd      	beq.n	401b2e <xQueueReceive+0xba>
  401b72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401b76:	b25b      	sxtb	r3, r3
  401b78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b7c:	d0db      	beq.n	401b36 <xQueueReceive+0xc2>
  401b7e:	4b1a      	ldr	r3, [pc, #104]	; (401be8 <xQueueReceive+0x174>)
  401b80:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b82:	a901      	add	r1, sp, #4
  401b84:	a802      	add	r0, sp, #8
  401b86:	4b1c      	ldr	r3, [pc, #112]	; (401bf8 <xQueueReceive+0x184>)
  401b88:	4798      	blx	r3
  401b8a:	b9c8      	cbnz	r0, 401bc0 <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401b8c:	4620      	mov	r0, r4
  401b8e:	4b1b      	ldr	r3, [pc, #108]	; (401bfc <xQueueReceive+0x188>)
  401b90:	4798      	blx	r3
  401b92:	2800      	cmp	r0, #0
  401b94:	d0d3      	beq.n	401b3e <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401b96:	9901      	ldr	r1, [sp, #4]
  401b98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b9c:	4b18      	ldr	r3, [pc, #96]	; (401c00 <xQueueReceive+0x18c>)
  401b9e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401ba0:	4620      	mov	r0, r4
  401ba2:	4b12      	ldr	r3, [pc, #72]	; (401bec <xQueueReceive+0x178>)
  401ba4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ba6:	4b12      	ldr	r3, [pc, #72]	; (401bf0 <xQueueReceive+0x17c>)
  401ba8:	4798      	blx	r3
  401baa:	2800      	cmp	r0, #0
  401bac:	d1cc      	bne.n	401b48 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401bb2:	f8c9 3000 	str.w	r3, [r9]
  401bb6:	f3bf 8f4f 	dsb	sy
  401bba:	f3bf 8f6f 	isb	sy
  401bbe:	e7c3      	b.n	401b48 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401bc0:	4620      	mov	r0, r4
  401bc2:	4b0a      	ldr	r3, [pc, #40]	; (401bec <xQueueReceive+0x178>)
  401bc4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bc6:	4b0a      	ldr	r3, [pc, #40]	; (401bf0 <xQueueReceive+0x17c>)
  401bc8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401bca:	4620      	mov	r0, r4
  401bcc:	4b0b      	ldr	r3, [pc, #44]	; (401bfc <xQueueReceive+0x188>)
  401bce:	4798      	blx	r3
  401bd0:	2800      	cmp	r0, #0
  401bd2:	d0b9      	beq.n	401b48 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401bd4:	2000      	movs	r0, #0
  401bd6:	e7a0      	b.n	401b1a <xQueueReceive+0xa6>
  401bd8:	00402a41 	.word	0x00402a41
  401bdc:	004014cd 	.word	0x004014cd
  401be0:	0040272d 	.word	0x0040272d
  401be4:	e000ed04 	.word	0xe000ed04
  401be8:	00401111 	.word	0x00401111
  401bec:	004014f5 	.word	0x004014f5
  401bf0:	00402465 	.word	0x00402465
  401bf4:	00402301 	.word	0x00402301
  401bf8:	004027dd 	.word	0x004027dd
  401bfc:	004013a5 	.word	0x004013a5
  401c00:	004026a9 	.word	0x004026a9
  401c04:	004010c5 	.word	0x004010c5
  401c08:	004027c5 	.word	0x004027c5

00401c0c <xQueueSemaphoreTake>:
{
  401c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401c10:	b085      	sub	sp, #20
  401c12:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401c14:	b168      	cbz	r0, 401c32 <xQueueSemaphoreTake+0x26>
  401c16:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401c18:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c1a:	b1ab      	cbz	r3, 401c48 <xQueueSemaphoreTake+0x3c>
  401c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c20:	b672      	cpsid	i
  401c22:	f383 8811 	msr	BASEPRI, r3
  401c26:	f3bf 8f6f 	isb	sy
  401c2a:	f3bf 8f4f 	dsb	sy
  401c2e:	b662      	cpsie	i
  401c30:	e7fe      	b.n	401c30 <xQueueSemaphoreTake+0x24>
  401c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c36:	b672      	cpsid	i
  401c38:	f383 8811 	msr	BASEPRI, r3
  401c3c:	f3bf 8f6f 	isb	sy
  401c40:	f3bf 8f4f 	dsb	sy
  401c44:	b662      	cpsie	i
  401c46:	e7fe      	b.n	401c46 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401c48:	4b5e      	ldr	r3, [pc, #376]	; (401dc4 <xQueueSemaphoreTake+0x1b8>)
  401c4a:	4798      	blx	r3
  401c4c:	b960      	cbnz	r0, 401c68 <xQueueSemaphoreTake+0x5c>
  401c4e:	9b01      	ldr	r3, [sp, #4]
  401c50:	b193      	cbz	r3, 401c78 <xQueueSemaphoreTake+0x6c>
  401c52:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c56:	b672      	cpsid	i
  401c58:	f383 8811 	msr	BASEPRI, r3
  401c5c:	f3bf 8f6f 	isb	sy
  401c60:	f3bf 8f4f 	dsb	sy
  401c64:	b662      	cpsie	i
  401c66:	e7fe      	b.n	401c66 <xQueueSemaphoreTake+0x5a>
  401c68:	2500      	movs	r5, #0
  401c6a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401c6c:	4e56      	ldr	r6, [pc, #344]	; (401dc8 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401c6e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401dfc <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401c72:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401dd4 <xQueueSemaphoreTake+0x1c8>
  401c76:	e052      	b.n	401d1e <xQueueSemaphoreTake+0x112>
  401c78:	2500      	movs	r5, #0
  401c7a:	462f      	mov	r7, r5
  401c7c:	e7f6      	b.n	401c6c <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401c7e:	3b01      	subs	r3, #1
  401c80:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c82:	6823      	ldr	r3, [r4, #0]
  401c84:	b913      	cbnz	r3, 401c8c <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401c86:	4b51      	ldr	r3, [pc, #324]	; (401dcc <xQueueSemaphoreTake+0x1c0>)
  401c88:	4798      	blx	r3
  401c8a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c8c:	6923      	ldr	r3, [r4, #16]
  401c8e:	b163      	cbz	r3, 401caa <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c90:	f104 0010 	add.w	r0, r4, #16
  401c94:	4b4e      	ldr	r3, [pc, #312]	; (401dd0 <xQueueSemaphoreTake+0x1c4>)
  401c96:	4798      	blx	r3
  401c98:	b138      	cbz	r0, 401caa <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c9e:	4b4d      	ldr	r3, [pc, #308]	; (401dd4 <xQueueSemaphoreTake+0x1c8>)
  401ca0:	601a      	str	r2, [r3, #0]
  401ca2:	f3bf 8f4f 	dsb	sy
  401ca6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401caa:	4b4b      	ldr	r3, [pc, #300]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cac:	4798      	blx	r3
				return pdPASS;
  401cae:	2501      	movs	r5, #1
}
  401cb0:	4628      	mov	r0, r5
  401cb2:	b005      	add	sp, #20
  401cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401cb8:	b155      	cbz	r5, 401cd0 <xQueueSemaphoreTake+0xc4>
  401cba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cbe:	b672      	cpsid	i
  401cc0:	f383 8811 	msr	BASEPRI, r3
  401cc4:	f3bf 8f6f 	isb	sy
  401cc8:	f3bf 8f4f 	dsb	sy
  401ccc:	b662      	cpsie	i
  401cce:	e7fe      	b.n	401cce <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401cd0:	4b41      	ldr	r3, [pc, #260]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cd2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401cd4:	e7ec      	b.n	401cb0 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401cd6:	a802      	add	r0, sp, #8
  401cd8:	47c8      	blx	r9
  401cda:	e029      	b.n	401d30 <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401cdc:	2300      	movs	r3, #0
  401cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401ce2:	e030      	b.n	401d46 <xQueueSemaphoreTake+0x13a>
  401ce4:	2300      	movs	r3, #0
  401ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401cea:	e032      	b.n	401d52 <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401cec:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401cee:	6860      	ldr	r0, [r4, #4]
  401cf0:	4b3a      	ldr	r3, [pc, #232]	; (401ddc <xQueueSemaphoreTake+0x1d0>)
  401cf2:	4798      	blx	r3
  401cf4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401cf6:	4b38      	ldr	r3, [pc, #224]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cf8:	4798      	blx	r3
  401cfa:	e03a      	b.n	401d72 <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401cfc:	4620      	mov	r0, r4
  401cfe:	4b38      	ldr	r3, [pc, #224]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d00:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401d02:	4b38      	ldr	r3, [pc, #224]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d04:	4798      	blx	r3
  401d06:	e009      	b.n	401d1c <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401d08:	4620      	mov	r0, r4
  401d0a:	4b35      	ldr	r3, [pc, #212]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d0c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401d0e:	4b35      	ldr	r3, [pc, #212]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d10:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d12:	4620      	mov	r0, r4
  401d14:	4b34      	ldr	r3, [pc, #208]	; (401de8 <xQueueSemaphoreTake+0x1dc>)
  401d16:	4798      	blx	r3
  401d18:	2800      	cmp	r0, #0
  401d1a:	d13f      	bne.n	401d9c <xQueueSemaphoreTake+0x190>
  401d1c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401d1e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401d22:	2b00      	cmp	r3, #0
  401d24:	d1ab      	bne.n	401c7e <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401d26:	9b01      	ldr	r3, [sp, #4]
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d0c5      	beq.n	401cb8 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401d2c:	2f00      	cmp	r7, #0
  401d2e:	d0d2      	beq.n	401cd6 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401d30:	4b29      	ldr	r3, [pc, #164]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401d32:	4798      	blx	r3
		vTaskSuspendAll();
  401d34:	4b2d      	ldr	r3, [pc, #180]	; (401dec <xQueueSemaphoreTake+0x1e0>)
  401d36:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d38:	47b0      	blx	r6
  401d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401d3e:	b25b      	sxtb	r3, r3
  401d40:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d44:	d0ca      	beq.n	401cdc <xQueueSemaphoreTake+0xd0>
  401d46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401d4a:	b25b      	sxtb	r3, r3
  401d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d50:	d0c8      	beq.n	401ce4 <xQueueSemaphoreTake+0xd8>
  401d52:	4b21      	ldr	r3, [pc, #132]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401d54:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d56:	a901      	add	r1, sp, #4
  401d58:	a802      	add	r0, sp, #8
  401d5a:	4b25      	ldr	r3, [pc, #148]	; (401df0 <xQueueSemaphoreTake+0x1e4>)
  401d5c:	4798      	blx	r3
  401d5e:	2800      	cmp	r0, #0
  401d60:	d1d2      	bne.n	401d08 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d62:	4620      	mov	r0, r4
  401d64:	4b20      	ldr	r3, [pc, #128]	; (401de8 <xQueueSemaphoreTake+0x1dc>)
  401d66:	4798      	blx	r3
  401d68:	2800      	cmp	r0, #0
  401d6a:	d0c7      	beq.n	401cfc <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d6c:	6823      	ldr	r3, [r4, #0]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d0bc      	beq.n	401cec <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401d72:	9901      	ldr	r1, [sp, #4]
  401d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d78:	4b1e      	ldr	r3, [pc, #120]	; (401df4 <xQueueSemaphoreTake+0x1e8>)
  401d7a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401d7c:	4620      	mov	r0, r4
  401d7e:	4b18      	ldr	r3, [pc, #96]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d80:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401d82:	4b18      	ldr	r3, [pc, #96]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d84:	4798      	blx	r3
  401d86:	2800      	cmp	r0, #0
  401d88:	d1c8      	bne.n	401d1c <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401d8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d8e:	f8c8 3000 	str.w	r3, [r8]
  401d92:	f3bf 8f4f 	dsb	sy
  401d96:	f3bf 8f6f 	isb	sy
  401d9a:	e7bf      	b.n	401d1c <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401d9c:	2d00      	cmp	r5, #0
  401d9e:	d087      	beq.n	401cb0 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401da0:	4b09      	ldr	r3, [pc, #36]	; (401dc8 <xQueueSemaphoreTake+0x1bc>)
  401da2:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401da6:	b153      	cbz	r3, 401dbe <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401daa:	6819      	ldr	r1, [r3, #0]
  401dac:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401db0:	6860      	ldr	r0, [r4, #4]
  401db2:	4b11      	ldr	r3, [pc, #68]	; (401df8 <xQueueSemaphoreTake+0x1ec>)
  401db4:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401db6:	4b08      	ldr	r3, [pc, #32]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401db8:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401dba:	2500      	movs	r5, #0
  401dbc:	e778      	b.n	401cb0 <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401dbe:	2100      	movs	r1, #0
  401dc0:	e7f6      	b.n	401db0 <xQueueSemaphoreTake+0x1a4>
  401dc2:	bf00      	nop
  401dc4:	00402a41 	.word	0x00402a41
  401dc8:	004010c5 	.word	0x004010c5
  401dcc:	00402dd1 	.word	0x00402dd1
  401dd0:	0040272d 	.word	0x0040272d
  401dd4:	e000ed04 	.word	0xe000ed04
  401dd8:	00401111 	.word	0x00401111
  401ddc:	00402a61 	.word	0x00402a61
  401de0:	004014f5 	.word	0x004014f5
  401de4:	00402465 	.word	0x00402465
  401de8:	004013a5 	.word	0x004013a5
  401dec:	00402301 	.word	0x00402301
  401df0:	004027dd 	.word	0x004027dd
  401df4:	004026a9 	.word	0x004026a9
  401df8:	00402bdd 	.word	0x00402bdd
  401dfc:	004027c5 	.word	0x004027c5

00401e00 <vQueueAddToRegistry>:
	{
  401e00:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401e02:	4b0b      	ldr	r3, [pc, #44]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e04:	681b      	ldr	r3, [r3, #0]
  401e06:	b153      	cbz	r3, 401e1e <vQueueAddToRegistry+0x1e>
  401e08:	2301      	movs	r3, #1
  401e0a:	4c09      	ldr	r4, [pc, #36]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e0c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401e10:	b132      	cbz	r2, 401e20 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e12:	3301      	adds	r3, #1
  401e14:	2b08      	cmp	r3, #8
  401e16:	d1f9      	bne.n	401e0c <vQueueAddToRegistry+0xc>
	}
  401e18:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e1c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e1e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401e20:	4a03      	ldr	r2, [pc, #12]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e22:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401e26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401e2a:	6058      	str	r0, [r3, #4]
				break;
  401e2c:	e7f4      	b.n	401e18 <vQueueAddToRegistry+0x18>
  401e2e:	bf00      	nop
  401e30:	20400ce0 	.word	0x20400ce0

00401e34 <vQueueWaitForMessageRestricted>:
	{
  401e34:	b570      	push	{r4, r5, r6, lr}
  401e36:	4604      	mov	r4, r0
  401e38:	460d      	mov	r5, r1
  401e3a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401e3c:	4b12      	ldr	r3, [pc, #72]	; (401e88 <vQueueWaitForMessageRestricted+0x54>)
  401e3e:	4798      	blx	r3
  401e40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401e44:	b25b      	sxtb	r3, r3
  401e46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e4a:	d00d      	beq.n	401e68 <vQueueWaitForMessageRestricted+0x34>
  401e4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401e50:	b25b      	sxtb	r3, r3
  401e52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e56:	d00b      	beq.n	401e70 <vQueueWaitForMessageRestricted+0x3c>
  401e58:	4b0c      	ldr	r3, [pc, #48]	; (401e8c <vQueueWaitForMessageRestricted+0x58>)
  401e5a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e5e:	b15b      	cbz	r3, 401e78 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401e60:	4620      	mov	r0, r4
  401e62:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <vQueueWaitForMessageRestricted+0x5c>)
  401e64:	4798      	blx	r3
  401e66:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401e68:	2300      	movs	r3, #0
  401e6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401e6e:	e7ed      	b.n	401e4c <vQueueWaitForMessageRestricted+0x18>
  401e70:	2300      	movs	r3, #0
  401e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401e76:	e7ef      	b.n	401e58 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401e78:	4632      	mov	r2, r6
  401e7a:	4629      	mov	r1, r5
  401e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e80:	4b04      	ldr	r3, [pc, #16]	; (401e94 <vQueueWaitForMessageRestricted+0x60>)
  401e82:	4798      	blx	r3
  401e84:	e7ec      	b.n	401e60 <vQueueWaitForMessageRestricted+0x2c>
  401e86:	bf00      	nop
  401e88:	004010c5 	.word	0x004010c5
  401e8c:	00401111 	.word	0x00401111
  401e90:	004014f5 	.word	0x004014f5
  401e94:	004026e5 	.word	0x004026e5

00401e98 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e98:	4b08      	ldr	r3, [pc, #32]	; (401ebc <prvResetNextTaskUnblockTime+0x24>)
  401e9a:	681b      	ldr	r3, [r3, #0]
  401e9c:	681b      	ldr	r3, [r3, #0]
  401e9e:	b13b      	cbz	r3, 401eb0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ea0:	4b06      	ldr	r3, [pc, #24]	; (401ebc <prvResetNextTaskUnblockTime+0x24>)
  401ea2:	681b      	ldr	r3, [r3, #0]
  401ea4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401ea6:	68db      	ldr	r3, [r3, #12]
  401ea8:	685a      	ldr	r2, [r3, #4]
  401eaa:	4b05      	ldr	r3, [pc, #20]	; (401ec0 <prvResetNextTaskUnblockTime+0x28>)
  401eac:	601a      	str	r2, [r3, #0]
  401eae:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401eb0:	f04f 32ff 	mov.w	r2, #4294967295
  401eb4:	4b02      	ldr	r3, [pc, #8]	; (401ec0 <prvResetNextTaskUnblockTime+0x28>)
  401eb6:	601a      	str	r2, [r3, #0]
  401eb8:	4770      	bx	lr
  401eba:	bf00      	nop
  401ebc:	20400a64 	.word	0x20400a64
  401ec0:	20400b14 	.word	0x20400b14

00401ec4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401ec4:	b570      	push	{r4, r5, r6, lr}
  401ec6:	4604      	mov	r4, r0
  401ec8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401eca:	4b1c      	ldr	r3, [pc, #112]	; (401f3c <prvAddCurrentTaskToDelayedList+0x78>)
  401ecc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401ece:	4b1c      	ldr	r3, [pc, #112]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ed0:	6818      	ldr	r0, [r3, #0]
  401ed2:	3004      	adds	r0, #4
  401ed4:	4b1b      	ldr	r3, [pc, #108]	; (401f44 <prvAddCurrentTaskToDelayedList+0x80>)
  401ed6:	4798      	blx	r3
  401ed8:	b948      	cbnz	r0, 401eee <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401eda:	4b19      	ldr	r3, [pc, #100]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401edc:	681a      	ldr	r2, [r3, #0]
  401ede:	491a      	ldr	r1, [pc, #104]	; (401f48 <prvAddCurrentTaskToDelayedList+0x84>)
  401ee0:	680b      	ldr	r3, [r1, #0]
  401ee2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ee4:	2201      	movs	r2, #1
  401ee6:	4082      	lsls	r2, r0
  401ee8:	ea23 0302 	bic.w	r3, r3, r2
  401eec:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401eee:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ef2:	d100      	bne.n	401ef6 <prvAddCurrentTaskToDelayedList+0x32>
  401ef4:	b99e      	cbnz	r6, 401f1e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401ef6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401ef8:	4b11      	ldr	r3, [pc, #68]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401efe:	42a5      	cmp	r5, r4
  401f00:	d814      	bhi.n	401f2c <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f02:	4b12      	ldr	r3, [pc, #72]	; (401f4c <prvAddCurrentTaskToDelayedList+0x88>)
  401f04:	6818      	ldr	r0, [r3, #0]
  401f06:	4b0e      	ldr	r3, [pc, #56]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f08:	6819      	ldr	r1, [r3, #0]
  401f0a:	3104      	adds	r1, #4
  401f0c:	4b10      	ldr	r3, [pc, #64]	; (401f50 <prvAddCurrentTaskToDelayedList+0x8c>)
  401f0e:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401f10:	4b10      	ldr	r3, [pc, #64]	; (401f54 <prvAddCurrentTaskToDelayedList+0x90>)
  401f12:	681b      	ldr	r3, [r3, #0]
  401f14:	429c      	cmp	r4, r3
  401f16:	d201      	bcs.n	401f1c <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401f18:	4b0e      	ldr	r3, [pc, #56]	; (401f54 <prvAddCurrentTaskToDelayedList+0x90>)
  401f1a:	601c      	str	r4, [r3, #0]
  401f1c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f1e:	4b08      	ldr	r3, [pc, #32]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f20:	6819      	ldr	r1, [r3, #0]
  401f22:	3104      	adds	r1, #4
  401f24:	480c      	ldr	r0, [pc, #48]	; (401f58 <prvAddCurrentTaskToDelayedList+0x94>)
  401f26:	4b0d      	ldr	r3, [pc, #52]	; (401f5c <prvAddCurrentTaskToDelayedList+0x98>)
  401f28:	4798      	blx	r3
  401f2a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f2c:	4b0c      	ldr	r3, [pc, #48]	; (401f60 <prvAddCurrentTaskToDelayedList+0x9c>)
  401f2e:	6818      	ldr	r0, [r3, #0]
  401f30:	4b03      	ldr	r3, [pc, #12]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f32:	6819      	ldr	r1, [r3, #0]
  401f34:	3104      	adds	r1, #4
  401f36:	4b06      	ldr	r3, [pc, #24]	; (401f50 <prvAddCurrentTaskToDelayedList+0x8c>)
  401f38:	4798      	blx	r3
  401f3a:	bd70      	pop	{r4, r5, r6, pc}
  401f3c:	20400b5c 	.word	0x20400b5c
  401f40:	20400a60 	.word	0x20400a60
  401f44:	00400fc9 	.word	0x00400fc9
  401f48:	20400ae4 	.word	0x20400ae4
  401f4c:	20400a64 	.word	0x20400a64
  401f50:	00400f95 	.word	0x00400f95
  401f54:	20400b14 	.word	0x20400b14
  401f58:	20400b34 	.word	0x20400b34
  401f5c:	00400f7d 	.word	0x00400f7d
  401f60:	20400a68 	.word	0x20400a68

00401f64 <prvIdleTask>:
{
  401f64:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f66:	4d18      	ldr	r5, [pc, #96]	; (401fc8 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401f68:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401fe4 <prvIdleTask+0x80>
				taskYIELD();
  401f6c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401fe8 <prvIdleTask+0x84>
  401f70:	e001      	b.n	401f76 <prvIdleTask+0x12>
			vApplicationIdleHook();
  401f72:	4b16      	ldr	r3, [pc, #88]	; (401fcc <prvIdleTask+0x68>)
  401f74:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f76:	682b      	ldr	r3, [r5, #0]
  401f78:	b1c3      	cbz	r3, 401fac <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f7a:	4f15      	ldr	r7, [pc, #84]	; (401fd0 <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f7c:	4e15      	ldr	r6, [pc, #84]	; (401fd4 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401f7e:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f80:	68fb      	ldr	r3, [r7, #12]
  401f82:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f84:	1d20      	adds	r0, r4, #4
  401f86:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401f88:	4a13      	ldr	r2, [pc, #76]	; (401fd8 <prvIdleTask+0x74>)
  401f8a:	6813      	ldr	r3, [r2, #0]
  401f8c:	3b01      	subs	r3, #1
  401f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401f90:	682b      	ldr	r3, [r5, #0]
  401f92:	3b01      	subs	r3, #1
  401f94:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401f96:	4b11      	ldr	r3, [pc, #68]	; (401fdc <prvIdleTask+0x78>)
  401f98:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401f9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f9c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401fec <prvIdleTask+0x88>
  401fa0:	47d0      	blx	sl
			vPortFree( pxTCB );
  401fa2:	4620      	mov	r0, r4
  401fa4:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401fa6:	682b      	ldr	r3, [r5, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d1e8      	bne.n	401f7e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401fac:	4b0c      	ldr	r3, [pc, #48]	; (401fe0 <prvIdleTask+0x7c>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	2b01      	cmp	r3, #1
  401fb2:	d9de      	bls.n	401f72 <prvIdleTask+0xe>
				taskYIELD();
  401fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fb8:	f8c9 3000 	str.w	r3, [r9]
  401fbc:	f3bf 8f4f 	dsb	sy
  401fc0:	f3bf 8f6f 	isb	sy
  401fc4:	e7d5      	b.n	401f72 <prvIdleTask+0xe>
  401fc6:	bf00      	nop
  401fc8:	20400ad4 	.word	0x20400ad4
  401fcc:	00403525 	.word	0x00403525
  401fd0:	20400b48 	.word	0x20400b48
  401fd4:	00400fc9 	.word	0x00400fc9
  401fd8:	20400ad0 	.word	0x20400ad0
  401fdc:	00401111 	.word	0x00401111
  401fe0:	20400a6c 	.word	0x20400a6c
  401fe4:	004010c5 	.word	0x004010c5
  401fe8:	e000ed04 	.word	0xe000ed04
  401fec:	00401381 	.word	0x00401381

00401ff0 <xTaskCreate>:
	{
  401ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ff4:	b083      	sub	sp, #12
  401ff6:	4683      	mov	fp, r0
  401ff8:	460d      	mov	r5, r1
  401ffa:	9301      	str	r3, [sp, #4]
  401ffc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402000:	0096      	lsls	r6, r2, #2
  402002:	4630      	mov	r0, r6
  402004:	4b60      	ldr	r3, [pc, #384]	; (402188 <xTaskCreate+0x198>)
  402006:	4798      	blx	r3
			if( pxStack != NULL )
  402008:	2800      	cmp	r0, #0
  40200a:	f000 808d 	beq.w	402128 <xTaskCreate+0x138>
  40200e:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  402010:	2058      	movs	r0, #88	; 0x58
  402012:	4b5d      	ldr	r3, [pc, #372]	; (402188 <xTaskCreate+0x198>)
  402014:	4798      	blx	r3
				if( pxNewTCB != NULL )
  402016:	4604      	mov	r4, r0
  402018:	2800      	cmp	r0, #0
  40201a:	f000 8082 	beq.w	402122 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  40201e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  402020:	4632      	mov	r2, r6
  402022:	21a5      	movs	r1, #165	; 0xa5
  402024:	4638      	mov	r0, r7
  402026:	4b59      	ldr	r3, [pc, #356]	; (40218c <xTaskCreate+0x19c>)
  402028:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  40202a:	3e04      	subs	r6, #4
  40202c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40202e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402030:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402034:	782b      	ldrb	r3, [r5, #0]
  402036:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40203a:	782b      	ldrb	r3, [r5, #0]
  40203c:	b163      	cbz	r3, 402058 <xTaskCreate+0x68>
  40203e:	462b      	mov	r3, r5
  402040:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402044:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402048:	7858      	ldrb	r0, [r3, #1]
  40204a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40204e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  402052:	b108      	cbz	r0, 402058 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402054:	428b      	cmp	r3, r1
  402056:	d1f7      	bne.n	402048 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402058:	2700      	movs	r7, #0
  40205a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40205e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402060:	2d04      	cmp	r5, #4
  402062:	bf28      	it	cs
  402064:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  402066:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  402068:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40206a:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40206c:	f104 0804 	add.w	r8, r4, #4
  402070:	4640      	mov	r0, r8
  402072:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4021e0 <xTaskCreate+0x1f0>
  402076:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  402078:	f104 0018 	add.w	r0, r4, #24
  40207c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40207e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402080:	f1c5 0505 	rsb	r5, r5, #5
  402084:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  402086:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  402088:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40208a:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40208e:	9a01      	ldr	r2, [sp, #4]
  402090:	4659      	mov	r1, fp
  402092:	4630      	mov	r0, r6
  402094:	4b3e      	ldr	r3, [pc, #248]	; (402190 <xTaskCreate+0x1a0>)
  402096:	4798      	blx	r3
  402098:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  40209a:	f1ba 0f00 	cmp.w	sl, #0
  40209e:	d001      	beq.n	4020a4 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4020a0:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  4020a4:	4b3b      	ldr	r3, [pc, #236]	; (402194 <xTaskCreate+0x1a4>)
  4020a6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4020a8:	4a3b      	ldr	r2, [pc, #236]	; (402198 <xTaskCreate+0x1a8>)
  4020aa:	6813      	ldr	r3, [r2, #0]
  4020ac:	3301      	adds	r3, #1
  4020ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4020b0:	4b3a      	ldr	r3, [pc, #232]	; (40219c <xTaskCreate+0x1ac>)
  4020b2:	681b      	ldr	r3, [r3, #0]
  4020b4:	2b00      	cmp	r3, #0
  4020b6:	d03a      	beq.n	40212e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  4020b8:	4b39      	ldr	r3, [pc, #228]	; (4021a0 <xTaskCreate+0x1b0>)
  4020ba:	681b      	ldr	r3, [r3, #0]
  4020bc:	b93b      	cbnz	r3, 4020ce <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4020be:	4b37      	ldr	r3, [pc, #220]	; (40219c <xTaskCreate+0x1ac>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020c6:	429a      	cmp	r2, r3
  4020c8:	d801      	bhi.n	4020ce <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  4020ca:	4b34      	ldr	r3, [pc, #208]	; (40219c <xTaskCreate+0x1ac>)
  4020cc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  4020ce:	4a35      	ldr	r2, [pc, #212]	; (4021a4 <xTaskCreate+0x1b4>)
  4020d0:	6813      	ldr	r3, [r2, #0]
  4020d2:	3301      	adds	r3, #1
  4020d4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  4020d6:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  4020d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020da:	4a33      	ldr	r2, [pc, #204]	; (4021a8 <xTaskCreate+0x1b8>)
  4020dc:	6811      	ldr	r1, [r2, #0]
  4020de:	2301      	movs	r3, #1
  4020e0:	4083      	lsls	r3, r0
  4020e2:	430b      	orrs	r3, r1
  4020e4:	6013      	str	r3, [r2, #0]
  4020e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020ea:	4641      	mov	r1, r8
  4020ec:	4b2f      	ldr	r3, [pc, #188]	; (4021ac <xTaskCreate+0x1bc>)
  4020ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020f2:	4b2f      	ldr	r3, [pc, #188]	; (4021b0 <xTaskCreate+0x1c0>)
  4020f4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4020f6:	4b2f      	ldr	r3, [pc, #188]	; (4021b4 <xTaskCreate+0x1c4>)
  4020f8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4020fa:	4b29      	ldr	r3, [pc, #164]	; (4021a0 <xTaskCreate+0x1b0>)
  4020fc:	681b      	ldr	r3, [r3, #0]
  4020fe:	2b00      	cmp	r3, #0
  402100:	d03b      	beq.n	40217a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  402102:	4b26      	ldr	r3, [pc, #152]	; (40219c <xTaskCreate+0x1ac>)
  402104:	681b      	ldr	r3, [r3, #0]
  402106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40210a:	429a      	cmp	r2, r3
  40210c:	d239      	bcs.n	402182 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402112:	4b29      	ldr	r3, [pc, #164]	; (4021b8 <xTaskCreate+0x1c8>)
  402114:	601a      	str	r2, [r3, #0]
  402116:	f3bf 8f4f 	dsb	sy
  40211a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40211e:	2001      	movs	r0, #1
  402120:	e02c      	b.n	40217c <xTaskCreate+0x18c>
					vPortFree( pxStack );
  402122:	4638      	mov	r0, r7
  402124:	4b25      	ldr	r3, [pc, #148]	; (4021bc <xTaskCreate+0x1cc>)
  402126:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402128:	f04f 30ff 	mov.w	r0, #4294967295
  40212c:	e026      	b.n	40217c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  40212e:	4b1b      	ldr	r3, [pc, #108]	; (40219c <xTaskCreate+0x1ac>)
  402130:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402132:	6813      	ldr	r3, [r2, #0]
  402134:	2b01      	cmp	r3, #1
  402136:	d1ca      	bne.n	4020ce <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402138:	4e1c      	ldr	r6, [pc, #112]	; (4021ac <xTaskCreate+0x1bc>)
  40213a:	4630      	mov	r0, r6
  40213c:	4d20      	ldr	r5, [pc, #128]	; (4021c0 <xTaskCreate+0x1d0>)
  40213e:	47a8      	blx	r5
  402140:	f106 0014 	add.w	r0, r6, #20
  402144:	47a8      	blx	r5
  402146:	f106 0028 	add.w	r0, r6, #40	; 0x28
  40214a:	47a8      	blx	r5
  40214c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  402150:	47a8      	blx	r5
  402152:	f106 0050 	add.w	r0, r6, #80	; 0x50
  402156:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  402158:	4f1a      	ldr	r7, [pc, #104]	; (4021c4 <xTaskCreate+0x1d4>)
  40215a:	4638      	mov	r0, r7
  40215c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40215e:	4e1a      	ldr	r6, [pc, #104]	; (4021c8 <xTaskCreate+0x1d8>)
  402160:	4630      	mov	r0, r6
  402162:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402164:	4819      	ldr	r0, [pc, #100]	; (4021cc <xTaskCreate+0x1dc>)
  402166:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  402168:	4819      	ldr	r0, [pc, #100]	; (4021d0 <xTaskCreate+0x1e0>)
  40216a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40216c:	4819      	ldr	r0, [pc, #100]	; (4021d4 <xTaskCreate+0x1e4>)
  40216e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  402170:	4b19      	ldr	r3, [pc, #100]	; (4021d8 <xTaskCreate+0x1e8>)
  402172:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402174:	4b19      	ldr	r3, [pc, #100]	; (4021dc <xTaskCreate+0x1ec>)
  402176:	601e      	str	r6, [r3, #0]
  402178:	e7a9      	b.n	4020ce <xTaskCreate+0xde>
			xReturn = pdPASS;
  40217a:	2001      	movs	r0, #1
	}
  40217c:	b003      	add	sp, #12
  40217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  402182:	2001      	movs	r0, #1
		return xReturn;
  402184:	e7fa      	b.n	40217c <xTaskCreate+0x18c>
  402186:	bf00      	nop
  402188:	00401351 	.word	0x00401351
  40218c:	004041d9 	.word	0x004041d9
  402190:	00401075 	.word	0x00401075
  402194:	004010c5 	.word	0x004010c5
  402198:	20400ad0 	.word	0x20400ad0
  40219c:	20400a60 	.word	0x20400a60
  4021a0:	20400b30 	.word	0x20400b30
  4021a4:	20400ae0 	.word	0x20400ae0
  4021a8:	20400ae4 	.word	0x20400ae4
  4021ac:	20400a6c 	.word	0x20400a6c
  4021b0:	00400f7d 	.word	0x00400f7d
  4021b4:	00401111 	.word	0x00401111
  4021b8:	e000ed04 	.word	0xe000ed04
  4021bc:	00401381 	.word	0x00401381
  4021c0:	00400f61 	.word	0x00400f61
  4021c4:	20400ae8 	.word	0x20400ae8
  4021c8:	20400afc 	.word	0x20400afc
  4021cc:	20400b1c 	.word	0x20400b1c
  4021d0:	20400b48 	.word	0x20400b48
  4021d4:	20400b34 	.word	0x20400b34
  4021d8:	20400a64 	.word	0x20400a64
  4021dc:	20400a68 	.word	0x20400a68
  4021e0:	00400f77 	.word	0x00400f77

004021e4 <eTaskGetState>:
	{
  4021e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
  4021e6:	b1d0      	cbz	r0, 40221e <eTaskGetState+0x3a>
  4021e8:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
  4021ea:	4b19      	ldr	r3, [pc, #100]	; (402250 <eTaskGetState+0x6c>)
  4021ec:	681b      	ldr	r3, [r3, #0]
  4021ee:	4298      	cmp	r0, r3
  4021f0:	d026      	beq.n	402240 <eTaskGetState+0x5c>
			taskENTER_CRITICAL();
  4021f2:	4b18      	ldr	r3, [pc, #96]	; (402254 <eTaskGetState+0x70>)
  4021f4:	4798      	blx	r3
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
  4021f6:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
  4021f8:	4b17      	ldr	r3, [pc, #92]	; (402258 <eTaskGetState+0x74>)
  4021fa:	4798      	blx	r3
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
  4021fc:	4b17      	ldr	r3, [pc, #92]	; (40225c <eTaskGetState+0x78>)
  4021fe:	681b      	ldr	r3, [r3, #0]
  402200:	429c      	cmp	r4, r3
  402202:	d01f      	beq.n	402244 <eTaskGetState+0x60>
  402204:	4b16      	ldr	r3, [pc, #88]	; (402260 <eTaskGetState+0x7c>)
  402206:	681b      	ldr	r3, [r3, #0]
  402208:	429c      	cmp	r4, r3
  40220a:	d01d      	beq.n	402248 <eTaskGetState+0x64>
				else if( pxStateList == &xSuspendedTaskList )
  40220c:	4b15      	ldr	r3, [pc, #84]	; (402264 <eTaskGetState+0x80>)
  40220e:	429c      	cmp	r4, r3
  402210:	d010      	beq.n	402234 <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
  402212:	b1dc      	cbz	r4, 40224c <eTaskGetState+0x68>
  402214:	4b14      	ldr	r3, [pc, #80]	; (402268 <eTaskGetState+0x84>)
  402216:	429c      	cmp	r4, r3
  402218:	d018      	beq.n	40224c <eTaskGetState+0x68>
				eReturn = eReady;
  40221a:	2001      	movs	r0, #1
  40221c:	bd38      	pop	{r3, r4, r5, pc}
  40221e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402222:	b672      	cpsid	i
  402224:	f383 8811 	msr	BASEPRI, r3
  402228:	f3bf 8f6f 	isb	sy
  40222c:	f3bf 8f4f 	dsb	sy
  402230:	b662      	cpsie	i
  402232:	e7fe      	b.n	402232 <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
  402234:	6aab      	ldr	r3, [r5, #40]	; 0x28
						eReturn = eBlocked;
  402236:	2b00      	cmp	r3, #0
  402238:	bf0c      	ite	eq
  40223a:	2003      	moveq	r0, #3
  40223c:	2002      	movne	r0, #2
  40223e:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
  402240:	2000      	movs	r0, #0
  402242:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
  402244:	2002      	movs	r0, #2
  402246:	bd38      	pop	{r3, r4, r5, pc}
  402248:	2002      	movs	r0, #2
  40224a:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
  40224c:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  40224e:	bd38      	pop	{r3, r4, r5, pc}
  402250:	20400a60 	.word	0x20400a60
  402254:	004010c5 	.word	0x004010c5
  402258:	00401111 	.word	0x00401111
  40225c:	20400a64 	.word	0x20400a64
  402260:	20400a68 	.word	0x20400a68
  402264:	20400b34 	.word	0x20400b34
  402268:	20400b48 	.word	0x20400b48

0040226c <vTaskStartScheduler>:
{
  40226c:	b510      	push	{r4, lr}
  40226e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  402270:	4b1a      	ldr	r3, [pc, #104]	; (4022dc <vTaskStartScheduler+0x70>)
  402272:	9301      	str	r3, [sp, #4]
  402274:	2300      	movs	r3, #0
  402276:	9300      	str	r3, [sp, #0]
  402278:	2282      	movs	r2, #130	; 0x82
  40227a:	4919      	ldr	r1, [pc, #100]	; (4022e0 <vTaskStartScheduler+0x74>)
  40227c:	4819      	ldr	r0, [pc, #100]	; (4022e4 <vTaskStartScheduler+0x78>)
  40227e:	4c1a      	ldr	r4, [pc, #104]	; (4022e8 <vTaskStartScheduler+0x7c>)
  402280:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402282:	2801      	cmp	r0, #1
  402284:	d004      	beq.n	402290 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  402286:	f1b0 3fff 	cmp.w	r0, #4294967295
  40228a:	d01c      	beq.n	4022c6 <vTaskStartScheduler+0x5a>
}
  40228c:	b002      	add	sp, #8
  40228e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  402290:	4b16      	ldr	r3, [pc, #88]	; (4022ec <vTaskStartScheduler+0x80>)
  402292:	4798      	blx	r3
	if( xReturn == pdPASS )
  402294:	2801      	cmp	r0, #1
  402296:	d1f6      	bne.n	402286 <vTaskStartScheduler+0x1a>
  402298:	f04f 0380 	mov.w	r3, #128	; 0x80
  40229c:	b672      	cpsid	i
  40229e:	f383 8811 	msr	BASEPRI, r3
  4022a2:	f3bf 8f6f 	isb	sy
  4022a6:	f3bf 8f4f 	dsb	sy
  4022aa:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4022ac:	f04f 32ff 	mov.w	r2, #4294967295
  4022b0:	4b0f      	ldr	r3, [pc, #60]	; (4022f0 <vTaskStartScheduler+0x84>)
  4022b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4022b4:	2201      	movs	r2, #1
  4022b6:	4b0f      	ldr	r3, [pc, #60]	; (4022f4 <vTaskStartScheduler+0x88>)
  4022b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4022ba:	2200      	movs	r2, #0
  4022bc:	4b0e      	ldr	r3, [pc, #56]	; (4022f8 <vTaskStartScheduler+0x8c>)
  4022be:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4022c0:	4b0e      	ldr	r3, [pc, #56]	; (4022fc <vTaskStartScheduler+0x90>)
  4022c2:	4798      	blx	r3
  4022c4:	e7e2      	b.n	40228c <vTaskStartScheduler+0x20>
  4022c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ca:	b672      	cpsid	i
  4022cc:	f383 8811 	msr	BASEPRI, r3
  4022d0:	f3bf 8f6f 	isb	sy
  4022d4:	f3bf 8f4f 	dsb	sy
  4022d8:	b662      	cpsie	i
  4022da:	e7fe      	b.n	4022da <vTaskStartScheduler+0x6e>
  4022dc:	20400b10 	.word	0x20400b10
  4022e0:	0040a298 	.word	0x0040a298
  4022e4:	00401f65 	.word	0x00401f65
  4022e8:	00401ff1 	.word	0x00401ff1
  4022ec:	00402ea9 	.word	0x00402ea9
  4022f0:	20400b14 	.word	0x20400b14
  4022f4:	20400b30 	.word	0x20400b30
  4022f8:	20400b5c 	.word	0x20400b5c
  4022fc:	00401201 	.word	0x00401201

00402300 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402300:	4a02      	ldr	r2, [pc, #8]	; (40230c <vTaskSuspendAll+0xc>)
  402302:	6813      	ldr	r3, [r2, #0]
  402304:	3301      	adds	r3, #1
  402306:	6013      	str	r3, [r2, #0]
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	20400adc 	.word	0x20400adc

00402310 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402310:	4b01      	ldr	r3, [pc, #4]	; (402318 <xTaskGetTickCount+0x8>)
  402312:	6818      	ldr	r0, [r3, #0]
}
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	20400b5c 	.word	0x20400b5c

0040231c <xTaskIncrementTick>:
{
  40231c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402320:	4b41      	ldr	r3, [pc, #260]	; (402428 <xTaskIncrementTick+0x10c>)
  402322:	681b      	ldr	r3, [r3, #0]
  402324:	2b00      	cmp	r3, #0
  402326:	d177      	bne.n	402418 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  402328:	4b40      	ldr	r3, [pc, #256]	; (40242c <xTaskIncrementTick+0x110>)
  40232a:	681d      	ldr	r5, [r3, #0]
  40232c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  40232e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  402330:	b9d5      	cbnz	r5, 402368 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  402332:	4b3f      	ldr	r3, [pc, #252]	; (402430 <xTaskIncrementTick+0x114>)
  402334:	681b      	ldr	r3, [r3, #0]
  402336:	681b      	ldr	r3, [r3, #0]
  402338:	b153      	cbz	r3, 402350 <xTaskIncrementTick+0x34>
  40233a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40233e:	b672      	cpsid	i
  402340:	f383 8811 	msr	BASEPRI, r3
  402344:	f3bf 8f6f 	isb	sy
  402348:	f3bf 8f4f 	dsb	sy
  40234c:	b662      	cpsie	i
  40234e:	e7fe      	b.n	40234e <xTaskIncrementTick+0x32>
  402350:	4a37      	ldr	r2, [pc, #220]	; (402430 <xTaskIncrementTick+0x114>)
  402352:	6811      	ldr	r1, [r2, #0]
  402354:	4b37      	ldr	r3, [pc, #220]	; (402434 <xTaskIncrementTick+0x118>)
  402356:	6818      	ldr	r0, [r3, #0]
  402358:	6010      	str	r0, [r2, #0]
  40235a:	6019      	str	r1, [r3, #0]
  40235c:	4a36      	ldr	r2, [pc, #216]	; (402438 <xTaskIncrementTick+0x11c>)
  40235e:	6813      	ldr	r3, [r2, #0]
  402360:	3301      	adds	r3, #1
  402362:	6013      	str	r3, [r2, #0]
  402364:	4b35      	ldr	r3, [pc, #212]	; (40243c <xTaskIncrementTick+0x120>)
  402366:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  402368:	4b35      	ldr	r3, [pc, #212]	; (402440 <xTaskIncrementTick+0x124>)
  40236a:	681b      	ldr	r3, [r3, #0]
  40236c:	429d      	cmp	r5, r3
  40236e:	d218      	bcs.n	4023a2 <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  402370:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402372:	4b34      	ldr	r3, [pc, #208]	; (402444 <xTaskIncrementTick+0x128>)
  402374:	681b      	ldr	r3, [r3, #0]
  402376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402378:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40237c:	009b      	lsls	r3, r3, #2
  40237e:	4a32      	ldr	r2, [pc, #200]	; (402448 <xTaskIncrementTick+0x12c>)
  402380:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  402382:	2b02      	cmp	r3, #2
  402384:	bf28      	it	cs
  402386:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402388:	4b30      	ldr	r3, [pc, #192]	; (40244c <xTaskIncrementTick+0x130>)
  40238a:	681b      	ldr	r3, [r3, #0]
  40238c:	b90b      	cbnz	r3, 402392 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  40238e:	4b30      	ldr	r3, [pc, #192]	; (402450 <xTaskIncrementTick+0x134>)
  402390:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402392:	4b30      	ldr	r3, [pc, #192]	; (402454 <xTaskIncrementTick+0x138>)
  402394:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402396:	2b00      	cmp	r3, #0
}
  402398:	bf0c      	ite	eq
  40239a:	4620      	moveq	r0, r4
  40239c:	2001      	movne	r0, #1
  40239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023a2:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023a4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 402430 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4023a8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 402460 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  4023ac:	4f2a      	ldr	r7, [pc, #168]	; (402458 <xTaskIncrementTick+0x13c>)
  4023ae:	e01f      	b.n	4023f0 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023b0:	f04f 32ff 	mov.w	r2, #4294967295
  4023b4:	4b22      	ldr	r3, [pc, #136]	; (402440 <xTaskIncrementTick+0x124>)
  4023b6:	601a      	str	r2, [r3, #0]
					break;
  4023b8:	e7db      	b.n	402372 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  4023ba:	4a21      	ldr	r2, [pc, #132]	; (402440 <xTaskIncrementTick+0x124>)
  4023bc:	6013      	str	r3, [r2, #0]
						break;
  4023be:	e7d8      	b.n	402372 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4023c0:	f106 0018 	add.w	r0, r6, #24
  4023c4:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  4023c6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  4023c8:	683a      	ldr	r2, [r7, #0]
  4023ca:	2301      	movs	r3, #1
  4023cc:	4083      	lsls	r3, r0
  4023ce:	4313      	orrs	r3, r2
  4023d0:	603b      	str	r3, [r7, #0]
  4023d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023d6:	4651      	mov	r1, sl
  4023d8:	4b1b      	ldr	r3, [pc, #108]	; (402448 <xTaskIncrementTick+0x12c>)
  4023da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023de:	4b1f      	ldr	r3, [pc, #124]	; (40245c <xTaskIncrementTick+0x140>)
  4023e0:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4023e2:	4b18      	ldr	r3, [pc, #96]	; (402444 <xTaskIncrementTick+0x128>)
  4023e4:	681b      	ldr	r3, [r3, #0]
  4023e6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  4023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  4023ea:	429a      	cmp	r2, r3
  4023ec:	bf28      	it	cs
  4023ee:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023f0:	f8d9 3000 	ldr.w	r3, [r9]
  4023f4:	681b      	ldr	r3, [r3, #0]
  4023f6:	2b00      	cmp	r3, #0
  4023f8:	d0da      	beq.n	4023b0 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4023fa:	f8d9 3000 	ldr.w	r3, [r9]
  4023fe:	68db      	ldr	r3, [r3, #12]
  402400:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  402402:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  402404:	429d      	cmp	r5, r3
  402406:	d3d8      	bcc.n	4023ba <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402408:	f106 0a04 	add.w	sl, r6, #4
  40240c:	4650      	mov	r0, sl
  40240e:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402410:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  402412:	2b00      	cmp	r3, #0
  402414:	d1d4      	bne.n	4023c0 <xTaskIncrementTick+0xa4>
  402416:	e7d6      	b.n	4023c6 <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402418:	4a0c      	ldr	r2, [pc, #48]	; (40244c <xTaskIncrementTick+0x130>)
  40241a:	6813      	ldr	r3, [r2, #0]
  40241c:	3301      	adds	r3, #1
  40241e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402420:	4b0b      	ldr	r3, [pc, #44]	; (402450 <xTaskIncrementTick+0x134>)
  402422:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402424:	2400      	movs	r4, #0
  402426:	e7b4      	b.n	402392 <xTaskIncrementTick+0x76>
  402428:	20400adc 	.word	0x20400adc
  40242c:	20400b5c 	.word	0x20400b5c
  402430:	20400a64 	.word	0x20400a64
  402434:	20400a68 	.word	0x20400a68
  402438:	20400b18 	.word	0x20400b18
  40243c:	00401e99 	.word	0x00401e99
  402440:	20400b14 	.word	0x20400b14
  402444:	20400a60 	.word	0x20400a60
  402448:	20400a6c 	.word	0x20400a6c
  40244c:	20400ad8 	.word	0x20400ad8
  402450:	00403535 	.word	0x00403535
  402454:	20400b60 	.word	0x20400b60
  402458:	20400ae4 	.word	0x20400ae4
  40245c:	00400f7d 	.word	0x00400f7d
  402460:	00400fc9 	.word	0x00400fc9

00402464 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  402464:	4b36      	ldr	r3, [pc, #216]	; (402540 <xTaskResumeAll+0xdc>)
  402466:	681b      	ldr	r3, [r3, #0]
  402468:	b953      	cbnz	r3, 402480 <xTaskResumeAll+0x1c>
  40246a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40246e:	b672      	cpsid	i
  402470:	f383 8811 	msr	BASEPRI, r3
  402474:	f3bf 8f6f 	isb	sy
  402478:	f3bf 8f4f 	dsb	sy
  40247c:	b662      	cpsie	i
  40247e:	e7fe      	b.n	40247e <xTaskResumeAll+0x1a>
{
  402480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  402484:	4b2f      	ldr	r3, [pc, #188]	; (402544 <xTaskResumeAll+0xe0>)
  402486:	4798      	blx	r3
		--uxSchedulerSuspended;
  402488:	4b2d      	ldr	r3, [pc, #180]	; (402540 <xTaskResumeAll+0xdc>)
  40248a:	681a      	ldr	r2, [r3, #0]
  40248c:	3a01      	subs	r2, #1
  40248e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402490:	681b      	ldr	r3, [r3, #0]
  402492:	2b00      	cmp	r3, #0
  402494:	d150      	bne.n	402538 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402496:	4b2c      	ldr	r3, [pc, #176]	; (402548 <xTaskResumeAll+0xe4>)
  402498:	681b      	ldr	r3, [r3, #0]
  40249a:	b92b      	cbnz	r3, 4024a8 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  40249c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40249e:	4b2b      	ldr	r3, [pc, #172]	; (40254c <xTaskResumeAll+0xe8>)
  4024a0:	4798      	blx	r3
}
  4024a2:	4620      	mov	r0, r4
  4024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024a8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4024aa:	4f29      	ldr	r7, [pc, #164]	; (402550 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4024ac:	4e29      	ldr	r6, [pc, #164]	; (402554 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  4024ae:	4d2a      	ldr	r5, [pc, #168]	; (402558 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4024b0:	683b      	ldr	r3, [r7, #0]
  4024b2:	b303      	cbz	r3, 4024f6 <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4024b4:	68fb      	ldr	r3, [r7, #12]
  4024b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4024b8:	f104 0018 	add.w	r0, r4, #24
  4024bc:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4024be:	f104 0804 	add.w	r8, r4, #4
  4024c2:	4640      	mov	r0, r8
  4024c4:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4024c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024c8:	682a      	ldr	r2, [r5, #0]
  4024ca:	2301      	movs	r3, #1
  4024cc:	4083      	lsls	r3, r0
  4024ce:	4313      	orrs	r3, r2
  4024d0:	602b      	str	r3, [r5, #0]
  4024d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4024d6:	4641      	mov	r1, r8
  4024d8:	4b20      	ldr	r3, [pc, #128]	; (40255c <xTaskResumeAll+0xf8>)
  4024da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4024de:	4b20      	ldr	r3, [pc, #128]	; (402560 <xTaskResumeAll+0xfc>)
  4024e0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4024e2:	4b20      	ldr	r3, [pc, #128]	; (402564 <xTaskResumeAll+0x100>)
  4024e4:	681b      	ldr	r3, [r3, #0]
  4024e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024ea:	429a      	cmp	r2, r3
  4024ec:	d3e0      	bcc.n	4024b0 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  4024ee:	2201      	movs	r2, #1
  4024f0:	4b1d      	ldr	r3, [pc, #116]	; (402568 <xTaskResumeAll+0x104>)
  4024f2:	601a      	str	r2, [r3, #0]
  4024f4:	e7dc      	b.n	4024b0 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  4024f6:	b10c      	cbz	r4, 4024fc <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  4024f8:	4b1c      	ldr	r3, [pc, #112]	; (40256c <xTaskResumeAll+0x108>)
  4024fa:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  4024fc:	4b1c      	ldr	r3, [pc, #112]	; (402570 <xTaskResumeAll+0x10c>)
  4024fe:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  402500:	b16c      	cbz	r4, 40251e <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  402502:	4f1c      	ldr	r7, [pc, #112]	; (402574 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  402504:	4e18      	ldr	r6, [pc, #96]	; (402568 <xTaskResumeAll+0x104>)
  402506:	2501      	movs	r5, #1
  402508:	e001      	b.n	40250e <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  40250a:	3c01      	subs	r4, #1
  40250c:	d004      	beq.n	402518 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  40250e:	47b8      	blx	r7
  402510:	2800      	cmp	r0, #0
  402512:	d0fa      	beq.n	40250a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  402514:	6035      	str	r5, [r6, #0]
  402516:	e7f8      	b.n	40250a <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402518:	2200      	movs	r2, #0
  40251a:	4b15      	ldr	r3, [pc, #84]	; (402570 <xTaskResumeAll+0x10c>)
  40251c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  40251e:	4b12      	ldr	r3, [pc, #72]	; (402568 <xTaskResumeAll+0x104>)
  402520:	681b      	ldr	r3, [r3, #0]
  402522:	b15b      	cbz	r3, 40253c <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  402524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402528:	4b13      	ldr	r3, [pc, #76]	; (402578 <xTaskResumeAll+0x114>)
  40252a:	601a      	str	r2, [r3, #0]
  40252c:	f3bf 8f4f 	dsb	sy
  402530:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402534:	2401      	movs	r4, #1
  402536:	e7b2      	b.n	40249e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  402538:	2400      	movs	r4, #0
  40253a:	e7b0      	b.n	40249e <xTaskResumeAll+0x3a>
  40253c:	2400      	movs	r4, #0
  40253e:	e7ae      	b.n	40249e <xTaskResumeAll+0x3a>
  402540:	20400adc 	.word	0x20400adc
  402544:	004010c5 	.word	0x004010c5
  402548:	20400ad0 	.word	0x20400ad0
  40254c:	00401111 	.word	0x00401111
  402550:	20400b1c 	.word	0x20400b1c
  402554:	00400fc9 	.word	0x00400fc9
  402558:	20400ae4 	.word	0x20400ae4
  40255c:	20400a6c 	.word	0x20400a6c
  402560:	00400f7d 	.word	0x00400f7d
  402564:	20400a60 	.word	0x20400a60
  402568:	20400b60 	.word	0x20400b60
  40256c:	00401e99 	.word	0x00401e99
  402570:	20400ad8 	.word	0x20400ad8
  402574:	0040231d 	.word	0x0040231d
  402578:	e000ed04 	.word	0xe000ed04

0040257c <vTaskDelay>:
	{
  40257c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40257e:	b1b8      	cbz	r0, 4025b0 <vTaskDelay+0x34>
  402580:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402582:	4b10      	ldr	r3, [pc, #64]	; (4025c4 <vTaskDelay+0x48>)
  402584:	681b      	ldr	r3, [r3, #0]
  402586:	b153      	cbz	r3, 40259e <vTaskDelay+0x22>
  402588:	f04f 0380 	mov.w	r3, #128	; 0x80
  40258c:	b672      	cpsid	i
  40258e:	f383 8811 	msr	BASEPRI, r3
  402592:	f3bf 8f6f 	isb	sy
  402596:	f3bf 8f4f 	dsb	sy
  40259a:	b662      	cpsie	i
  40259c:	e7fe      	b.n	40259c <vTaskDelay+0x20>
			vTaskSuspendAll();
  40259e:	4b0a      	ldr	r3, [pc, #40]	; (4025c8 <vTaskDelay+0x4c>)
  4025a0:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  4025a2:	2100      	movs	r1, #0
  4025a4:	4620      	mov	r0, r4
  4025a6:	4b09      	ldr	r3, [pc, #36]	; (4025cc <vTaskDelay+0x50>)
  4025a8:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4025aa:	4b09      	ldr	r3, [pc, #36]	; (4025d0 <vTaskDelay+0x54>)
  4025ac:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4025ae:	b938      	cbnz	r0, 4025c0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  4025b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025b4:	4b07      	ldr	r3, [pc, #28]	; (4025d4 <vTaskDelay+0x58>)
  4025b6:	601a      	str	r2, [r3, #0]
  4025b8:	f3bf 8f4f 	dsb	sy
  4025bc:	f3bf 8f6f 	isb	sy
  4025c0:	bd10      	pop	{r4, pc}
  4025c2:	bf00      	nop
  4025c4:	20400adc 	.word	0x20400adc
  4025c8:	00402301 	.word	0x00402301
  4025cc:	00401ec5 	.word	0x00401ec5
  4025d0:	00402465 	.word	0x00402465
  4025d4:	e000ed04 	.word	0xe000ed04

004025d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4025d8:	4b2d      	ldr	r3, [pc, #180]	; (402690 <vTaskSwitchContext+0xb8>)
  4025da:	681b      	ldr	r3, [r3, #0]
  4025dc:	2b00      	cmp	r3, #0
  4025de:	d12c      	bne.n	40263a <vTaskSwitchContext+0x62>
{
  4025e0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4025e2:	2200      	movs	r2, #0
  4025e4:	4b2b      	ldr	r3, [pc, #172]	; (402694 <vTaskSwitchContext+0xbc>)
  4025e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4025e8:	4b2b      	ldr	r3, [pc, #172]	; (402698 <vTaskSwitchContext+0xc0>)
  4025ea:	681b      	ldr	r3, [r3, #0]
  4025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025ee:	681a      	ldr	r2, [r3, #0]
  4025f0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4025f4:	d103      	bne.n	4025fe <vTaskSwitchContext+0x26>
  4025f6:	685a      	ldr	r2, [r3, #4]
  4025f8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4025fc:	d021      	beq.n	402642 <vTaskSwitchContext+0x6a>
  4025fe:	4b26      	ldr	r3, [pc, #152]	; (402698 <vTaskSwitchContext+0xc0>)
  402600:	6818      	ldr	r0, [r3, #0]
  402602:	6819      	ldr	r1, [r3, #0]
  402604:	3134      	adds	r1, #52	; 0x34
  402606:	4b25      	ldr	r3, [pc, #148]	; (40269c <vTaskSwitchContext+0xc4>)
  402608:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40260a:	4b25      	ldr	r3, [pc, #148]	; (4026a0 <vTaskSwitchContext+0xc8>)
  40260c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40260e:	fab3 f383 	clz	r3, r3
  402612:	b2db      	uxtb	r3, r3
  402614:	f1c3 031f 	rsb	r3, r3, #31
  402618:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40261c:	0092      	lsls	r2, r2, #2
  40261e:	4921      	ldr	r1, [pc, #132]	; (4026a4 <vTaskSwitchContext+0xcc>)
  402620:	588a      	ldr	r2, [r1, r2]
  402622:	b9ba      	cbnz	r2, 402654 <vTaskSwitchContext+0x7c>
	__asm volatile
  402624:	f04f 0380 	mov.w	r3, #128	; 0x80
  402628:	b672      	cpsid	i
  40262a:	f383 8811 	msr	BASEPRI, r3
  40262e:	f3bf 8f6f 	isb	sy
  402632:	f3bf 8f4f 	dsb	sy
  402636:	b662      	cpsie	i
  402638:	e7fe      	b.n	402638 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40263a:	2201      	movs	r2, #1
  40263c:	4b15      	ldr	r3, [pc, #84]	; (402694 <vTaskSwitchContext+0xbc>)
  40263e:	601a      	str	r2, [r3, #0]
  402640:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402642:	689a      	ldr	r2, [r3, #8]
  402644:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402648:	d1d9      	bne.n	4025fe <vTaskSwitchContext+0x26>
  40264a:	68db      	ldr	r3, [r3, #12]
  40264c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402650:	d1d5      	bne.n	4025fe <vTaskSwitchContext+0x26>
  402652:	e7da      	b.n	40260a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402654:	4a13      	ldr	r2, [pc, #76]	; (4026a4 <vTaskSwitchContext+0xcc>)
  402656:	0099      	lsls	r1, r3, #2
  402658:	18c8      	adds	r0, r1, r3
  40265a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40265e:	6844      	ldr	r4, [r0, #4]
  402660:	6864      	ldr	r4, [r4, #4]
  402662:	6044      	str	r4, [r0, #4]
  402664:	4419      	add	r1, r3
  402666:	4602      	mov	r2, r0
  402668:	3208      	adds	r2, #8
  40266a:	4294      	cmp	r4, r2
  40266c:	d009      	beq.n	402682 <vTaskSwitchContext+0xaa>
  40266e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402672:	4a0c      	ldr	r2, [pc, #48]	; (4026a4 <vTaskSwitchContext+0xcc>)
  402674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402678:	685b      	ldr	r3, [r3, #4]
  40267a:	68da      	ldr	r2, [r3, #12]
  40267c:	4b06      	ldr	r3, [pc, #24]	; (402698 <vTaskSwitchContext+0xc0>)
  40267e:	601a      	str	r2, [r3, #0]
  402680:	bd10      	pop	{r4, pc}
  402682:	6860      	ldr	r0, [r4, #4]
  402684:	4a07      	ldr	r2, [pc, #28]	; (4026a4 <vTaskSwitchContext+0xcc>)
  402686:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40268a:	6050      	str	r0, [r2, #4]
  40268c:	e7ef      	b.n	40266e <vTaskSwitchContext+0x96>
  40268e:	bf00      	nop
  402690:	20400adc 	.word	0x20400adc
  402694:	20400b60 	.word	0x20400b60
  402698:	20400a60 	.word	0x20400a60
  40269c:	0040350d 	.word	0x0040350d
  4026a0:	20400ae4 	.word	0x20400ae4
  4026a4:	20400a6c 	.word	0x20400a6c

004026a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  4026a8:	b950      	cbnz	r0, 4026c0 <vTaskPlaceOnEventList+0x18>
  4026aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ae:	b672      	cpsid	i
  4026b0:	f383 8811 	msr	BASEPRI, r3
  4026b4:	f3bf 8f6f 	isb	sy
  4026b8:	f3bf 8f4f 	dsb	sy
  4026bc:	b662      	cpsie	i
  4026be:	e7fe      	b.n	4026be <vTaskPlaceOnEventList+0x16>
{
  4026c0:	b510      	push	{r4, lr}
  4026c2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4026c4:	4b04      	ldr	r3, [pc, #16]	; (4026d8 <vTaskPlaceOnEventList+0x30>)
  4026c6:	6819      	ldr	r1, [r3, #0]
  4026c8:	3118      	adds	r1, #24
  4026ca:	4b04      	ldr	r3, [pc, #16]	; (4026dc <vTaskPlaceOnEventList+0x34>)
  4026cc:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4026ce:	2101      	movs	r1, #1
  4026d0:	4620      	mov	r0, r4
  4026d2:	4b03      	ldr	r3, [pc, #12]	; (4026e0 <vTaskPlaceOnEventList+0x38>)
  4026d4:	4798      	blx	r3
  4026d6:	bd10      	pop	{r4, pc}
  4026d8:	20400a60 	.word	0x20400a60
  4026dc:	00400f95 	.word	0x00400f95
  4026e0:	00401ec5 	.word	0x00401ec5

004026e4 <vTaskPlaceOnEventListRestricted>:
	{
  4026e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  4026e6:	b178      	cbz	r0, 402708 <vTaskPlaceOnEventListRestricted+0x24>
  4026e8:	4614      	mov	r4, r2
  4026ea:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4026ec:	4b0c      	ldr	r3, [pc, #48]	; (402720 <vTaskPlaceOnEventListRestricted+0x3c>)
  4026ee:	6819      	ldr	r1, [r3, #0]
  4026f0:	3118      	adds	r1, #24
  4026f2:	4b0c      	ldr	r3, [pc, #48]	; (402724 <vTaskPlaceOnEventListRestricted+0x40>)
  4026f4:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  4026f6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  4026f8:	4621      	mov	r1, r4
  4026fa:	bf0c      	ite	eq
  4026fc:	4628      	moveq	r0, r5
  4026fe:	f04f 30ff 	movne.w	r0, #4294967295
  402702:	4b09      	ldr	r3, [pc, #36]	; (402728 <vTaskPlaceOnEventListRestricted+0x44>)
  402704:	4798      	blx	r3
  402706:	bd38      	pop	{r3, r4, r5, pc}
  402708:	f04f 0380 	mov.w	r3, #128	; 0x80
  40270c:	b672      	cpsid	i
  40270e:	f383 8811 	msr	BASEPRI, r3
  402712:	f3bf 8f6f 	isb	sy
  402716:	f3bf 8f4f 	dsb	sy
  40271a:	b662      	cpsie	i
  40271c:	e7fe      	b.n	40271c <vTaskPlaceOnEventListRestricted+0x38>
  40271e:	bf00      	nop
  402720:	20400a60 	.word	0x20400a60
  402724:	00400f7d 	.word	0x00400f7d
  402728:	00401ec5 	.word	0x00401ec5

0040272c <xTaskRemoveFromEventList>:
{
  40272c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40272e:	68c3      	ldr	r3, [r0, #12]
  402730:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402732:	b324      	cbz	r4, 40277e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402734:	f104 0518 	add.w	r5, r4, #24
  402738:	4628      	mov	r0, r5
  40273a:	4b1a      	ldr	r3, [pc, #104]	; (4027a4 <xTaskRemoveFromEventList+0x78>)
  40273c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40273e:	4b1a      	ldr	r3, [pc, #104]	; (4027a8 <xTaskRemoveFromEventList+0x7c>)
  402740:	681b      	ldr	r3, [r3, #0]
  402742:	bb3b      	cbnz	r3, 402794 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  402744:	1d25      	adds	r5, r4, #4
  402746:	4628      	mov	r0, r5
  402748:	4b16      	ldr	r3, [pc, #88]	; (4027a4 <xTaskRemoveFromEventList+0x78>)
  40274a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40274c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40274e:	4a17      	ldr	r2, [pc, #92]	; (4027ac <xTaskRemoveFromEventList+0x80>)
  402750:	6811      	ldr	r1, [r2, #0]
  402752:	2301      	movs	r3, #1
  402754:	4083      	lsls	r3, r0
  402756:	430b      	orrs	r3, r1
  402758:	6013      	str	r3, [r2, #0]
  40275a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40275e:	4629      	mov	r1, r5
  402760:	4b13      	ldr	r3, [pc, #76]	; (4027b0 <xTaskRemoveFromEventList+0x84>)
  402762:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402766:	4b13      	ldr	r3, [pc, #76]	; (4027b4 <xTaskRemoveFromEventList+0x88>)
  402768:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40276a:	4b13      	ldr	r3, [pc, #76]	; (4027b8 <xTaskRemoveFromEventList+0x8c>)
  40276c:	681b      	ldr	r3, [r3, #0]
  40276e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402772:	429a      	cmp	r2, r3
  402774:	d913      	bls.n	40279e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402776:	2001      	movs	r0, #1
  402778:	4b10      	ldr	r3, [pc, #64]	; (4027bc <xTaskRemoveFromEventList+0x90>)
  40277a:	6018      	str	r0, [r3, #0]
  40277c:	bd38      	pop	{r3, r4, r5, pc}
  40277e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402782:	b672      	cpsid	i
  402784:	f383 8811 	msr	BASEPRI, r3
  402788:	f3bf 8f6f 	isb	sy
  40278c:	f3bf 8f4f 	dsb	sy
  402790:	b662      	cpsie	i
  402792:	e7fe      	b.n	402792 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402794:	4629      	mov	r1, r5
  402796:	480a      	ldr	r0, [pc, #40]	; (4027c0 <xTaskRemoveFromEventList+0x94>)
  402798:	4b06      	ldr	r3, [pc, #24]	; (4027b4 <xTaskRemoveFromEventList+0x88>)
  40279a:	4798      	blx	r3
  40279c:	e7e5      	b.n	40276a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40279e:	2000      	movs	r0, #0
}
  4027a0:	bd38      	pop	{r3, r4, r5, pc}
  4027a2:	bf00      	nop
  4027a4:	00400fc9 	.word	0x00400fc9
  4027a8:	20400adc 	.word	0x20400adc
  4027ac:	20400ae4 	.word	0x20400ae4
  4027b0:	20400a6c 	.word	0x20400a6c
  4027b4:	00400f7d 	.word	0x00400f7d
  4027b8:	20400a60 	.word	0x20400a60
  4027bc:	20400b60 	.word	0x20400b60
  4027c0:	20400b1c 	.word	0x20400b1c

004027c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4027c4:	4b03      	ldr	r3, [pc, #12]	; (4027d4 <vTaskInternalSetTimeOutState+0x10>)
  4027c6:	681b      	ldr	r3, [r3, #0]
  4027c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4027ca:	4b03      	ldr	r3, [pc, #12]	; (4027d8 <vTaskInternalSetTimeOutState+0x14>)
  4027cc:	681b      	ldr	r3, [r3, #0]
  4027ce:	6043      	str	r3, [r0, #4]
  4027d0:	4770      	bx	lr
  4027d2:	bf00      	nop
  4027d4:	20400b18 	.word	0x20400b18
  4027d8:	20400b5c 	.word	0x20400b5c

004027dc <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  4027dc:	b1a8      	cbz	r0, 40280a <xTaskCheckForTimeOut+0x2e>
{
  4027de:	b570      	push	{r4, r5, r6, lr}
  4027e0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  4027e2:	b1e9      	cbz	r1, 402820 <xTaskCheckForTimeOut+0x44>
  4027e4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  4027e6:	4b1d      	ldr	r3, [pc, #116]	; (40285c <xTaskCheckForTimeOut+0x80>)
  4027e8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4027ea:	4b1d      	ldr	r3, [pc, #116]	; (402860 <xTaskCheckForTimeOut+0x84>)
  4027ec:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4027ee:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  4027f0:	6823      	ldr	r3, [r4, #0]
  4027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027f6:	d02f      	beq.n	402858 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4027f8:	481a      	ldr	r0, [pc, #104]	; (402864 <xTaskCheckForTimeOut+0x88>)
  4027fa:	6800      	ldr	r0, [r0, #0]
  4027fc:	682e      	ldr	r6, [r5, #0]
  4027fe:	4286      	cmp	r6, r0
  402800:	d019      	beq.n	402836 <xTaskCheckForTimeOut+0x5a>
  402802:	428a      	cmp	r2, r1
  402804:	d317      	bcc.n	402836 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  402806:	2401      	movs	r4, #1
  402808:	e01b      	b.n	402842 <xTaskCheckForTimeOut+0x66>
  40280a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40280e:	b672      	cpsid	i
  402810:	f383 8811 	msr	BASEPRI, r3
  402814:	f3bf 8f6f 	isb	sy
  402818:	f3bf 8f4f 	dsb	sy
  40281c:	b662      	cpsie	i
  40281e:	e7fe      	b.n	40281e <xTaskCheckForTimeOut+0x42>
  402820:	f04f 0380 	mov.w	r3, #128	; 0x80
  402824:	b672      	cpsid	i
  402826:	f383 8811 	msr	BASEPRI, r3
  40282a:	f3bf 8f6f 	isb	sy
  40282e:	f3bf 8f4f 	dsb	sy
  402832:	b662      	cpsie	i
  402834:	e7fe      	b.n	402834 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402836:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  402838:	429a      	cmp	r2, r3
  40283a:	d306      	bcc.n	40284a <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  40283c:	2300      	movs	r3, #0
  40283e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  402840:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  402842:	4b09      	ldr	r3, [pc, #36]	; (402868 <xTaskCheckForTimeOut+0x8c>)
  402844:	4798      	blx	r3
}
  402846:	4620      	mov	r0, r4
  402848:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  40284a:	1a9b      	subs	r3, r3, r2
  40284c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  40284e:	4628      	mov	r0, r5
  402850:	4b06      	ldr	r3, [pc, #24]	; (40286c <xTaskCheckForTimeOut+0x90>)
  402852:	4798      	blx	r3
			xReturn = pdFALSE;
  402854:	2400      	movs	r4, #0
  402856:	e7f4      	b.n	402842 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  402858:	2400      	movs	r4, #0
  40285a:	e7f2      	b.n	402842 <xTaskCheckForTimeOut+0x66>
  40285c:	004010c5 	.word	0x004010c5
  402860:	20400b5c 	.word	0x20400b5c
  402864:	20400b18 	.word	0x20400b18
  402868:	00401111 	.word	0x00401111
  40286c:	004027c5 	.word	0x004027c5

00402870 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402870:	2201      	movs	r2, #1
  402872:	4b01      	ldr	r3, [pc, #4]	; (402878 <vTaskMissedYield+0x8>)
  402874:	601a      	str	r2, [r3, #0]
  402876:	4770      	bx	lr
  402878:	20400b60 	.word	0x20400b60

0040287c <vTaskGetInfo>:
	{
  40287c:	b570      	push	{r4, r5, r6, lr}
  40287e:	460d      	mov	r5, r1
  402880:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
  402882:	4604      	mov	r4, r0
  402884:	b1d0      	cbz	r0, 4028bc <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
  402886:	602c      	str	r4, [r5, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
  402888:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40288c:	606a      	str	r2, [r5, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
  40288e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402890:	612a      	str	r2, [r5, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
  402892:	6b22      	ldr	r2, [r4, #48]	; 0x30
  402894:	61ea      	str	r2, [r5, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
  402896:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402898:	60aa      	str	r2, [r5, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
  40289a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  40289c:	616a      	str	r2, [r5, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
  40289e:	2200      	movs	r2, #0
  4028a0:	61aa      	str	r2, [r5, #24]
		if( eState != eInvalid )
  4028a2:	2b05      	cmp	r3, #5
  4028a4:	d019      	beq.n	4028da <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
  4028a6:	4a17      	ldr	r2, [pc, #92]	; (402904 <vTaskGetInfo+0x88>)
  4028a8:	6812      	ldr	r2, [r2, #0]
  4028aa:	4294      	cmp	r4, r2
  4028ac:	d009      	beq.n	4028c2 <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
  4028ae:	732b      	strb	r3, [r5, #12]
					if( eState == eSuspended )
  4028b0:	2b03      	cmp	r3, #3
  4028b2:	d009      	beq.n	4028c8 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
  4028b4:	b9b6      	cbnz	r6, 4028e4 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
  4028b6:	2300      	movs	r3, #0
  4028b8:	842b      	strh	r3, [r5, #32]
  4028ba:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
  4028bc:	4a11      	ldr	r2, [pc, #68]	; (402904 <vTaskGetInfo+0x88>)
  4028be:	6814      	ldr	r4, [r2, #0]
  4028c0:	e7e1      	b.n	402886 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
  4028c2:	2300      	movs	r3, #0
  4028c4:	732b      	strb	r3, [r5, #12]
  4028c6:	e7f5      	b.n	4028b4 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
  4028c8:	4b0f      	ldr	r3, [pc, #60]	; (402908 <vTaskGetInfo+0x8c>)
  4028ca:	4798      	blx	r3
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4028cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4028ce:	b10b      	cbz	r3, 4028d4 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
  4028d0:	2302      	movs	r3, #2
  4028d2:	732b      	strb	r3, [r5, #12]
						( void ) xTaskResumeAll();
  4028d4:	4b0d      	ldr	r3, [pc, #52]	; (40290c <vTaskGetInfo+0x90>)
  4028d6:	4798      	blx	r3
  4028d8:	e7ec      	b.n	4028b4 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
  4028da:	4620      	mov	r0, r4
  4028dc:	4b0c      	ldr	r3, [pc, #48]	; (402910 <vTaskGetInfo+0x94>)
  4028de:	4798      	blx	r3
  4028e0:	7328      	strb	r0, [r5, #12]
  4028e2:	e7e7      	b.n	4028b4 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
  4028e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  4028e6:	7803      	ldrb	r3, [r0, #0]
  4028e8:	2ba5      	cmp	r3, #165	; 0xa5
  4028ea:	d108      	bne.n	4028fe <vTaskGetInfo+0x82>
  4028ec:	1c43      	adds	r3, r0, #1
  4028ee:	1a19      	subs	r1, r3, r0
  4028f0:	f813 2b01 	ldrb.w	r2, [r3], #1
  4028f4:	2aa5      	cmp	r2, #165	; 0xa5
  4028f6:	d0fa      	beq.n	4028ee <vTaskGetInfo+0x72>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  4028f8:	0889      	lsrs	r1, r1, #2
		return ( uint16_t ) ulCount;
  4028fa:	8429      	strh	r1, [r5, #32]
  4028fc:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t ulCount = 0U;
  4028fe:	2100      	movs	r1, #0
  402900:	e7fa      	b.n	4028f8 <vTaskGetInfo+0x7c>
  402902:	bf00      	nop
  402904:	20400a60 	.word	0x20400a60
  402908:	00402301 	.word	0x00402301
  40290c:	00402465 	.word	0x00402465
  402910:	004021e5 	.word	0x004021e5

00402914 <prvListTasksWithinSingleList>:
	{
  402914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402918:	b083      	sub	sp, #12
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  40291a:	680b      	ldr	r3, [r1, #0]
  40291c:	b343      	cbz	r3, 402970 <prvListTasksWithinSingleList+0x5c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  40291e:	684b      	ldr	r3, [r1, #4]
  402920:	685b      	ldr	r3, [r3, #4]
  402922:	604b      	str	r3, [r1, #4]
  402924:	f101 0808 	add.w	r8, r1, #8
  402928:	4543      	cmp	r3, r8
  40292a:	d00b      	beq.n	402944 <prvListTasksWithinSingleList+0x30>
  40292c:	9201      	str	r2, [sp, #4]
  40292e:	460c      	mov	r4, r1
  402930:	684b      	ldr	r3, [r1, #4]
  402932:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  402936:	4605      	mov	r5, r0
	UBaseType_t uxTask = 0;
  402938:	2700      	movs	r7, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  40293a:	f04f 0a01 	mov.w	sl, #1
  40293e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 40297c <prvListTasksWithinSingleList+0x68>
  402942:	e00d      	b.n	402960 <prvListTasksWithinSingleList+0x4c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  402944:	68cb      	ldr	r3, [r1, #12]
  402946:	604b      	str	r3, [r1, #4]
  402948:	e7f0      	b.n	40292c <prvListTasksWithinSingleList+0x18>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  40294a:	6863      	ldr	r3, [r4, #4]
  40294c:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  40294e:	9b01      	ldr	r3, [sp, #4]
  402950:	4652      	mov	r2, sl
  402952:	4629      	mov	r1, r5
  402954:	4630      	mov	r0, r6
  402956:	47c8      	blx	r9
				uxTask++;
  402958:	3701      	adds	r7, #1
  40295a:	3524      	adds	r5, #36	; 0x24
			} while( pxNextTCB != pxFirstTCB );
  40295c:	45b3      	cmp	fp, r6
  40295e:	d008      	beq.n	402972 <prvListTasksWithinSingleList+0x5e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  402960:	6863      	ldr	r3, [r4, #4]
  402962:	685b      	ldr	r3, [r3, #4]
  402964:	6063      	str	r3, [r4, #4]
  402966:	4598      	cmp	r8, r3
  402968:	d1ef      	bne.n	40294a <prvListTasksWithinSingleList+0x36>
  40296a:	68e3      	ldr	r3, [r4, #12]
  40296c:	6063      	str	r3, [r4, #4]
  40296e:	e7ec      	b.n	40294a <prvListTasksWithinSingleList+0x36>
	UBaseType_t uxTask = 0;
  402970:	2700      	movs	r7, #0
	}
  402972:	4638      	mov	r0, r7
  402974:	b003      	add	sp, #12
  402976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40297a:	bf00      	nop
  40297c:	0040287d 	.word	0x0040287d

00402980 <uxTaskGetSystemState>:
	{
  402980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402984:	4606      	mov	r6, r0
  402986:	460c      	mov	r4, r1
  402988:	4617      	mov	r7, r2
		vTaskSuspendAll();
  40298a:	4b24      	ldr	r3, [pc, #144]	; (402a1c <uxTaskGetSystemState+0x9c>)
  40298c:	4798      	blx	r3
			if( uxArraySize >= uxCurrentNumberOfTasks )
  40298e:	4b24      	ldr	r3, [pc, #144]	; (402a20 <uxTaskGetSystemState+0xa0>)
  402990:	681b      	ldr	r3, [r3, #0]
  402992:	42a3      	cmp	r3, r4
  402994:	d83f      	bhi.n	402a16 <uxTaskGetSystemState+0x96>
  402996:	4b23      	ldr	r3, [pc, #140]	; (402a24 <uxTaskGetSystemState+0xa4>)
  402998:	f103 0550 	add.w	r5, r3, #80	; 0x50
  40299c:	f1a3 0814 	sub.w	r8, r3, #20
  4029a0:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  4029a2:	f04f 0a01 	mov.w	sl, #1
  4029a6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402a2c <uxTaskGetSystemState+0xac>
  4029aa:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029ae:	4652      	mov	r2, sl
  4029b0:	4629      	mov	r1, r5
  4029b2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029b6:	47c8      	blx	r9
  4029b8:	4404      	add	r4, r0
  4029ba:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029bc:	4545      	cmp	r5, r8
  4029be:	d1f4      	bne.n	4029aa <uxTaskGetSystemState+0x2a>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  4029c0:	4b19      	ldr	r3, [pc, #100]	; (402a28 <uxTaskGetSystemState+0xa8>)
  4029c2:	6819      	ldr	r1, [r3, #0]
  4029c4:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029c8:	2202      	movs	r2, #2
  4029ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029ce:	4d17      	ldr	r5, [pc, #92]	; (402a2c <uxTaskGetSystemState+0xac>)
  4029d0:	47a8      	blx	r5
  4029d2:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  4029d4:	4b16      	ldr	r3, [pc, #88]	; (402a30 <uxTaskGetSystemState+0xb0>)
  4029d6:	6819      	ldr	r1, [r3, #0]
  4029d8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029dc:	2202      	movs	r2, #2
  4029de:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029e2:	47a8      	blx	r5
  4029e4:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  4029e6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029ea:	2204      	movs	r2, #4
  4029ec:	4911      	ldr	r1, [pc, #68]	; (402a34 <uxTaskGetSystemState+0xb4>)
  4029ee:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029f2:	47a8      	blx	r5
  4029f4:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  4029f6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029fa:	2203      	movs	r2, #3
  4029fc:	490e      	ldr	r1, [pc, #56]	; (402a38 <uxTaskGetSystemState+0xb8>)
  4029fe:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  402a02:	47a8      	blx	r5
  402a04:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
  402a06:	b10f      	cbz	r7, 402a0c <uxTaskGetSystemState+0x8c>
						*pulTotalRunTime = 0;
  402a08:	2300      	movs	r3, #0
  402a0a:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
  402a0c:	4b0b      	ldr	r3, [pc, #44]	; (402a3c <uxTaskGetSystemState+0xbc>)
  402a0e:	4798      	blx	r3
	}
  402a10:	4620      	mov	r0, r4
  402a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  402a16:	2400      	movs	r4, #0
  402a18:	e7f8      	b.n	402a0c <uxTaskGetSystemState+0x8c>
  402a1a:	bf00      	nop
  402a1c:	00402301 	.word	0x00402301
  402a20:	20400ad0 	.word	0x20400ad0
  402a24:	20400a6c 	.word	0x20400a6c
  402a28:	20400a64 	.word	0x20400a64
  402a2c:	00402915 	.word	0x00402915
  402a30:	20400a68 	.word	0x20400a68
  402a34:	20400b48 	.word	0x20400b48
  402a38:	20400b34 	.word	0x20400b34
  402a3c:	00402465 	.word	0x00402465

00402a40 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402a40:	4b05      	ldr	r3, [pc, #20]	; (402a58 <xTaskGetSchedulerState+0x18>)
  402a42:	681b      	ldr	r3, [r3, #0]
  402a44:	b133      	cbz	r3, 402a54 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a46:	4b05      	ldr	r3, [pc, #20]	; (402a5c <xTaskGetSchedulerState+0x1c>)
  402a48:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  402a4a:	2b00      	cmp	r3, #0
  402a4c:	bf0c      	ite	eq
  402a4e:	2002      	moveq	r0, #2
  402a50:	2000      	movne	r0, #0
  402a52:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402a54:	2001      	movs	r0, #1
	}
  402a56:	4770      	bx	lr
  402a58:	20400b30 	.word	0x20400b30
  402a5c:	20400adc 	.word	0x20400adc

00402a60 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402a60:	2800      	cmp	r0, #0
  402a62:	d050      	beq.n	402b06 <xTaskPriorityInherit+0xa6>
	{
  402a64:	b538      	push	{r3, r4, r5, lr}
  402a66:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  402a68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a6a:	4928      	ldr	r1, [pc, #160]	; (402b0c <xTaskPriorityInherit+0xac>)
  402a6c:	6809      	ldr	r1, [r1, #0]
  402a6e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a70:	428a      	cmp	r2, r1
  402a72:	d23f      	bcs.n	402af4 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402a74:	6981      	ldr	r1, [r0, #24]
  402a76:	2900      	cmp	r1, #0
  402a78:	db05      	blt.n	402a86 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a7a:	4924      	ldr	r1, [pc, #144]	; (402b0c <xTaskPriorityInherit+0xac>)
  402a7c:	6809      	ldr	r1, [r1, #0]
  402a7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a80:	f1c1 0105 	rsb	r1, r1, #5
  402a84:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  402a86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402a8a:	4921      	ldr	r1, [pc, #132]	; (402b10 <xTaskPriorityInherit+0xb0>)
  402a8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402a90:	6961      	ldr	r1, [r4, #20]
  402a92:	4291      	cmp	r1, r2
  402a94:	d005      	beq.n	402aa2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402a96:	4a1d      	ldr	r2, [pc, #116]	; (402b0c <xTaskPriorityInherit+0xac>)
  402a98:	6812      	ldr	r2, [r2, #0]
  402a9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402a9c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402a9e:	2001      	movs	r0, #1
  402aa0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402aa2:	1d25      	adds	r5, r4, #4
  402aa4:	4628      	mov	r0, r5
  402aa6:	4b1b      	ldr	r3, [pc, #108]	; (402b14 <xTaskPriorityInherit+0xb4>)
  402aa8:	4798      	blx	r3
  402aaa:	b970      	cbnz	r0, 402aca <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402aac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402aae:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402ab2:	009b      	lsls	r3, r3, #2
  402ab4:	4916      	ldr	r1, [pc, #88]	; (402b10 <xTaskPriorityInherit+0xb0>)
  402ab6:	58cb      	ldr	r3, [r1, r3]
  402ab8:	b93b      	cbnz	r3, 402aca <xTaskPriorityInherit+0x6a>
  402aba:	4817      	ldr	r0, [pc, #92]	; (402b18 <xTaskPriorityInherit+0xb8>)
  402abc:	6803      	ldr	r3, [r0, #0]
  402abe:	2101      	movs	r1, #1
  402ac0:	fa01 f202 	lsl.w	r2, r1, r2
  402ac4:	ea23 0202 	bic.w	r2, r3, r2
  402ac8:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402aca:	4b10      	ldr	r3, [pc, #64]	; (402b0c <xTaskPriorityInherit+0xac>)
  402acc:	681b      	ldr	r3, [r3, #0]
  402ace:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402ad0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  402ad2:	4a11      	ldr	r2, [pc, #68]	; (402b18 <xTaskPriorityInherit+0xb8>)
  402ad4:	6811      	ldr	r1, [r2, #0]
  402ad6:	2401      	movs	r4, #1
  402ad8:	fa04 f300 	lsl.w	r3, r4, r0
  402adc:	430b      	orrs	r3, r1
  402ade:	6013      	str	r3, [r2, #0]
  402ae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ae4:	4629      	mov	r1, r5
  402ae6:	4b0a      	ldr	r3, [pc, #40]	; (402b10 <xTaskPriorityInherit+0xb0>)
  402ae8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402aec:	4b0b      	ldr	r3, [pc, #44]	; (402b1c <xTaskPriorityInherit+0xbc>)
  402aee:	4798      	blx	r3
				xReturn = pdTRUE;
  402af0:	4620      	mov	r0, r4
  402af2:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  402af4:	4a05      	ldr	r2, [pc, #20]	; (402b0c <xTaskPriorityInherit+0xac>)
  402af6:	6812      	ldr	r2, [r2, #0]
  402af8:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402afa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402afc:	4298      	cmp	r0, r3
  402afe:	bf2c      	ite	cs
  402b00:	2000      	movcs	r0, #0
  402b02:	2001      	movcc	r0, #1
  402b04:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402b06:	2000      	movs	r0, #0
		return xReturn;
  402b08:	4770      	bx	lr
  402b0a:	bf00      	nop
  402b0c:	20400a60 	.word	0x20400a60
  402b10:	20400a6c 	.word	0x20400a6c
  402b14:	00400fc9 	.word	0x00400fc9
  402b18:	20400ae4 	.word	0x20400ae4
  402b1c:	00400f7d 	.word	0x00400f7d

00402b20 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402b20:	2800      	cmp	r0, #0
  402b22:	d04d      	beq.n	402bc0 <xTaskPriorityDisinherit+0xa0>
	{
  402b24:	b538      	push	{r3, r4, r5, lr}
  402b26:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402b28:	4a27      	ldr	r2, [pc, #156]	; (402bc8 <xTaskPriorityDisinherit+0xa8>)
  402b2a:	6812      	ldr	r2, [r2, #0]
  402b2c:	4290      	cmp	r0, r2
  402b2e:	d00a      	beq.n	402b46 <xTaskPriorityDisinherit+0x26>
  402b30:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b34:	b672      	cpsid	i
  402b36:	f383 8811 	msr	BASEPRI, r3
  402b3a:	f3bf 8f6f 	isb	sy
  402b3e:	f3bf 8f4f 	dsb	sy
  402b42:	b662      	cpsie	i
  402b44:	e7fe      	b.n	402b44 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402b46:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402b48:	b952      	cbnz	r2, 402b60 <xTaskPriorityDisinherit+0x40>
  402b4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4e:	b672      	cpsid	i
  402b50:	f383 8811 	msr	BASEPRI, r3
  402b54:	f3bf 8f6f 	isb	sy
  402b58:	f3bf 8f4f 	dsb	sy
  402b5c:	b662      	cpsie	i
  402b5e:	e7fe      	b.n	402b5e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402b60:	3a01      	subs	r2, #1
  402b62:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402b66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402b68:	4288      	cmp	r0, r1
  402b6a:	d02b      	beq.n	402bc4 <xTaskPriorityDisinherit+0xa4>
  402b6c:	bb52      	cbnz	r2, 402bc4 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402b6e:	1d25      	adds	r5, r4, #4
  402b70:	4628      	mov	r0, r5
  402b72:	4b16      	ldr	r3, [pc, #88]	; (402bcc <xTaskPriorityDisinherit+0xac>)
  402b74:	4798      	blx	r3
  402b76:	b968      	cbnz	r0, 402b94 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b7a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402b7e:	009b      	lsls	r3, r3, #2
  402b80:	4a13      	ldr	r2, [pc, #76]	; (402bd0 <xTaskPriorityDisinherit+0xb0>)
  402b82:	58d3      	ldr	r3, [r2, r3]
  402b84:	b933      	cbnz	r3, 402b94 <xTaskPriorityDisinherit+0x74>
  402b86:	4813      	ldr	r0, [pc, #76]	; (402bd4 <xTaskPriorityDisinherit+0xb4>)
  402b88:	6803      	ldr	r3, [r0, #0]
  402b8a:	2201      	movs	r2, #1
  402b8c:	408a      	lsls	r2, r1
  402b8e:	ea23 0302 	bic.w	r3, r3, r2
  402b92:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402b96:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b98:	f1c0 0305 	rsb	r3, r0, #5
  402b9c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402b9e:	4a0d      	ldr	r2, [pc, #52]	; (402bd4 <xTaskPriorityDisinherit+0xb4>)
  402ba0:	6811      	ldr	r1, [r2, #0]
  402ba2:	2401      	movs	r4, #1
  402ba4:	fa04 f300 	lsl.w	r3, r4, r0
  402ba8:	430b      	orrs	r3, r1
  402baa:	6013      	str	r3, [r2, #0]
  402bac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bb0:	4629      	mov	r1, r5
  402bb2:	4b07      	ldr	r3, [pc, #28]	; (402bd0 <xTaskPriorityDisinherit+0xb0>)
  402bb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402bb8:	4b07      	ldr	r3, [pc, #28]	; (402bd8 <xTaskPriorityDisinherit+0xb8>)
  402bba:	4798      	blx	r3
					xReturn = pdTRUE;
  402bbc:	4620      	mov	r0, r4
  402bbe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402bc0:	2000      	movs	r0, #0
  402bc2:	4770      	bx	lr
  402bc4:	2000      	movs	r0, #0
	}
  402bc6:	bd38      	pop	{r3, r4, r5, pc}
  402bc8:	20400a60 	.word	0x20400a60
  402bcc:	00400fc9 	.word	0x00400fc9
  402bd0:	20400a6c 	.word	0x20400a6c
  402bd4:	20400ae4 	.word	0x20400ae4
  402bd8:	00400f7d 	.word	0x00400f7d

00402bdc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402bdc:	2800      	cmp	r0, #0
  402bde:	d058      	beq.n	402c92 <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402be0:	b538      	push	{r3, r4, r5, lr}
  402be2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402be4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402be6:	b950      	cbnz	r0, 402bfe <vTaskPriorityDisinheritAfterTimeout+0x22>
  402be8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bec:	b672      	cpsid	i
  402bee:	f383 8811 	msr	BASEPRI, r3
  402bf2:	f3bf 8f6f 	isb	sy
  402bf6:	f3bf 8f4f 	dsb	sy
  402bfa:	b662      	cpsie	i
  402bfc:	e7fe      	b.n	402bfc <vTaskPriorityDisinheritAfterTimeout+0x20>
  402bfe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  402c00:	428a      	cmp	r2, r1
  402c02:	bf38      	it	cc
  402c04:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  402c06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  402c08:	2801      	cmp	r0, #1
  402c0a:	d141      	bne.n	402c90 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  402c0c:	4291      	cmp	r1, r2
  402c0e:	d03f      	beq.n	402c90 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  402c10:	4820      	ldr	r0, [pc, #128]	; (402c94 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  402c12:	6800      	ldr	r0, [r0, #0]
  402c14:	4284      	cmp	r4, r0
  402c16:	d10a      	bne.n	402c2e <vTaskPriorityDisinheritAfterTimeout+0x52>
  402c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c1c:	b672      	cpsid	i
  402c1e:	f383 8811 	msr	BASEPRI, r3
  402c22:	f3bf 8f6f 	isb	sy
  402c26:	f3bf 8f4f 	dsb	sy
  402c2a:	b662      	cpsie	i
  402c2c:	e7fe      	b.n	402c2c <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  402c2e:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402c30:	69a0      	ldr	r0, [r4, #24]
  402c32:	2800      	cmp	r0, #0
  402c34:	db02      	blt.n	402c3c <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c36:	f1c2 0205 	rsb	r2, r2, #5
  402c3a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  402c3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402c40:	4a15      	ldr	r2, [pc, #84]	; (402c98 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c42:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  402c46:	6962      	ldr	r2, [r4, #20]
  402c48:	428a      	cmp	r2, r1
  402c4a:	d121      	bne.n	402c90 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402c4c:	1d25      	adds	r5, r4, #4
  402c4e:	4628      	mov	r0, r5
  402c50:	4b12      	ldr	r3, [pc, #72]	; (402c9c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  402c52:	4798      	blx	r3
  402c54:	b968      	cbnz	r0, 402c72 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402c58:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402c5c:	009b      	lsls	r3, r3, #2
  402c5e:	4a0e      	ldr	r2, [pc, #56]	; (402c98 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c60:	58d3      	ldr	r3, [r2, r3]
  402c62:	b933      	cbnz	r3, 402c72 <vTaskPriorityDisinheritAfterTimeout+0x96>
  402c64:	480e      	ldr	r0, [pc, #56]	; (402ca0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402c66:	6803      	ldr	r3, [r0, #0]
  402c68:	2201      	movs	r2, #1
  402c6a:	408a      	lsls	r2, r1
  402c6c:	ea23 0302 	bic.w	r3, r3, r2
  402c70:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  402c72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c74:	4a0a      	ldr	r2, [pc, #40]	; (402ca0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402c76:	6811      	ldr	r1, [r2, #0]
  402c78:	2301      	movs	r3, #1
  402c7a:	4083      	lsls	r3, r0
  402c7c:	430b      	orrs	r3, r1
  402c7e:	6013      	str	r3, [r2, #0]
  402c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c84:	4629      	mov	r1, r5
  402c86:	4b04      	ldr	r3, [pc, #16]	; (402c98 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c8c:	4b05      	ldr	r3, [pc, #20]	; (402ca4 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402c8e:	4798      	blx	r3
  402c90:	bd38      	pop	{r3, r4, r5, pc}
  402c92:	4770      	bx	lr
  402c94:	20400a60 	.word	0x20400a60
  402c98:	20400a6c 	.word	0x20400a6c
  402c9c:	00400fc9 	.word	0x00400fc9
  402ca0:	20400ae4 	.word	0x20400ae4
  402ca4:	00400f7d 	.word	0x00400f7d

00402ca8 <vTaskList>:
	{
  402ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cac:	b084      	sub	sp, #16
  402cae:	4604      	mov	r4, r0
		*pcWriteBuffer = 0x00;
  402cb0:	2300      	movs	r3, #0
  402cb2:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
  402cb4:	4b3e      	ldr	r3, [pc, #248]	; (402db0 <vTaskList+0x108>)
  402cb6:	681a      	ldr	r2, [r3, #0]
  402cb8:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  402cba:	6818      	ldr	r0, [r3, #0]
  402cbc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402cc0:	0080      	lsls	r0, r0, #2
  402cc2:	4b3c      	ldr	r3, [pc, #240]	; (402db4 <vTaskList+0x10c>)
  402cc4:	4798      	blx	r3
		if( pxTaskStatusArray != NULL )
  402cc6:	2800      	cmp	r0, #0
  402cc8:	d06f      	beq.n	402daa <vTaskList+0x102>
  402cca:	4605      	mov	r5, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402ccc:	9903      	ldr	r1, [sp, #12]
  402cce:	2200      	movs	r2, #0
  402cd0:	4b39      	ldr	r3, [pc, #228]	; (402db8 <vTaskList+0x110>)
  402cd2:	4798      	blx	r3
  402cd4:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
  402cd6:	2300      	movs	r3, #0
  402cd8:	9302      	str	r3, [sp, #8]
  402cda:	9a02      	ldr	r2, [sp, #8]
  402cdc:	9b03      	ldr	r3, [sp, #12]
  402cde:	429a      	cmp	r2, r3
  402ce0:	d260      	bcs.n	402da4 <vTaskList+0xfc>
										cStatus = 0x00;
  402ce2:	f04f 0800 	mov.w	r8, #0
		strcpy( pcBuffer, pcTaskName );
  402ce6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 402dcc <vTaskList+0x124>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402cea:	4e34      	ldr	r6, [pc, #208]	; (402dbc <vTaskList+0x114>)
  402cec:	e045      	b.n	402d7a <vTaskList+0xd2>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  402cee:	2742      	movs	r7, #66	; 0x42
  402cf0:	e006      	b.n	402d00 <vTaskList+0x58>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  402cf2:	2753      	movs	r7, #83	; 0x53
										break;
  402cf4:	e004      	b.n	402d00 <vTaskList+0x58>
					case eDeleted:		cStatus = tskDELETED_CHAR;
  402cf6:	2744      	movs	r7, #68	; 0x44
										break;
  402cf8:	e002      	b.n	402d00 <vTaskList+0x58>
										cStatus = 0x00;
  402cfa:	4647      	mov	r7, r8
										break;
  402cfc:	e000      	b.n	402d00 <vTaskList+0x58>
					case eReady:		cStatus = tskREADY_CHAR;
  402cfe:	2752      	movs	r7, #82	; 0x52
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  402d00:	9b02      	ldr	r3, [sp, #8]
  402d02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		strcpy( pcBuffer, pcTaskName );
  402d0a:	6859      	ldr	r1, [r3, #4]
  402d0c:	4620      	mov	r0, r4
  402d0e:	47c8      	blx	r9
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402d10:	4620      	mov	r0, r4
  402d12:	47b0      	blx	r6
  402d14:	2808      	cmp	r0, #8
  402d16:	d808      	bhi.n	402d2a <vTaskList+0x82>
  402d18:	4420      	add	r0, r4
  402d1a:	f104 0209 	add.w	r2, r4, #9
			pcBuffer[ x ] = ' ';
  402d1e:	2320      	movs	r3, #32
  402d20:	f800 3b01 	strb.w	r3, [r0], #1
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402d24:	4282      	cmp	r2, r0
  402d26:	d1fb      	bne.n	402d20 <vTaskList+0x78>
  402d28:	2009      	movs	r0, #9
		pcBuffer[ x ] = 0x00;
  402d2a:	eb04 0a00 	add.w	sl, r4, r0
  402d2e:	f804 8000 	strb.w	r8, [r4, r0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  402d32:	9b02      	ldr	r3, [sp, #8]
  402d34:	9a02      	ldr	r2, [sp, #8]
  402d36:	9902      	ldr	r1, [sp, #8]
  402d38:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402d40:	691b      	ldr	r3, [r3, #16]
  402d42:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  402d46:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  402d4a:	6889      	ldr	r1, [r1, #8]
  402d4c:	9101      	str	r1, [sp, #4]
  402d4e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  402d52:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  402d56:	8c12      	ldrh	r2, [r2, #32]
  402d58:	9200      	str	r2, [sp, #0]
  402d5a:	463a      	mov	r2, r7
  402d5c:	4918      	ldr	r1, [pc, #96]	; (402dc0 <vTaskList+0x118>)
  402d5e:	4650      	mov	r0, sl
  402d60:	4c18      	ldr	r4, [pc, #96]	; (402dc4 <vTaskList+0x11c>)
  402d62:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  402d64:	4650      	mov	r0, sl
  402d66:	47b0      	blx	r6
  402d68:	eb0a 0400 	add.w	r4, sl, r0
			for( x = 0; x < uxArraySize; x++ )
  402d6c:	9b02      	ldr	r3, [sp, #8]
  402d6e:	3301      	adds	r3, #1
  402d70:	9302      	str	r3, [sp, #8]
  402d72:	9a02      	ldr	r2, [sp, #8]
  402d74:	9b03      	ldr	r3, [sp, #12]
  402d76:	429a      	cmp	r2, r3
  402d78:	d214      	bcs.n	402da4 <vTaskList+0xfc>
				switch( pxTaskStatusArray[ x ].eCurrentState )
  402d7a:	9b02      	ldr	r3, [sp, #8]
  402d7c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402d84:	7b1b      	ldrb	r3, [r3, #12]
  402d86:	3b01      	subs	r3, #1
  402d88:	2b03      	cmp	r3, #3
  402d8a:	d8b6      	bhi.n	402cfa <vTaskList+0x52>
  402d8c:	a201      	add	r2, pc, #4	; (adr r2, 402d94 <vTaskList+0xec>)
  402d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d92:	bf00      	nop
  402d94:	00402cff 	.word	0x00402cff
  402d98:	00402cef 	.word	0x00402cef
  402d9c:	00402cf3 	.word	0x00402cf3
  402da0:	00402cf7 	.word	0x00402cf7
			vPortFree( pxTaskStatusArray );
  402da4:	4628      	mov	r0, r5
  402da6:	4b08      	ldr	r3, [pc, #32]	; (402dc8 <vTaskList+0x120>)
  402da8:	4798      	blx	r3
	}
  402daa:	b004      	add	sp, #16
  402dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402db0:	20400ad0 	.word	0x20400ad0
  402db4:	00401351 	.word	0x00401351
  402db8:	00402981 	.word	0x00402981
  402dbc:	00404841 	.word	0x00404841
  402dc0:	0040a288 	.word	0x0040a288
  402dc4:	00404451 	.word	0x00404451
  402dc8:	00401381 	.word	0x00401381
  402dcc:	0040477d 	.word	0x0040477d

00402dd0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  402dd0:	4b05      	ldr	r3, [pc, #20]	; (402de8 <pvTaskIncrementMutexHeldCount+0x18>)
  402dd2:	681b      	ldr	r3, [r3, #0]
  402dd4:	b123      	cbz	r3, 402de0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402dd6:	4b04      	ldr	r3, [pc, #16]	; (402de8 <pvTaskIncrementMutexHeldCount+0x18>)
  402dd8:	681a      	ldr	r2, [r3, #0]
  402dda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402ddc:	3301      	adds	r3, #1
  402dde:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  402de0:	4b01      	ldr	r3, [pc, #4]	; (402de8 <pvTaskIncrementMutexHeldCount+0x18>)
  402de2:	6818      	ldr	r0, [r3, #0]
	}
  402de4:	4770      	bx	lr
  402de6:	bf00      	nop
  402de8:	20400a60 	.word	0x20400a60

00402dec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402dec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402dee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402df0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402df2:	4291      	cmp	r1, r2
  402df4:	d80c      	bhi.n	402e10 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402df6:	1ad2      	subs	r2, r2, r3
  402df8:	6983      	ldr	r3, [r0, #24]
  402dfa:	429a      	cmp	r2, r3
  402dfc:	d301      	bcc.n	402e02 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402dfe:	2001      	movs	r0, #1
  402e00:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402e02:	1d01      	adds	r1, r0, #4
  402e04:	4b09      	ldr	r3, [pc, #36]	; (402e2c <prvInsertTimerInActiveList+0x40>)
  402e06:	6818      	ldr	r0, [r3, #0]
  402e08:	4b09      	ldr	r3, [pc, #36]	; (402e30 <prvInsertTimerInActiveList+0x44>)
  402e0a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402e0c:	2000      	movs	r0, #0
  402e0e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402e10:	429a      	cmp	r2, r3
  402e12:	d203      	bcs.n	402e1c <prvInsertTimerInActiveList+0x30>
  402e14:	4299      	cmp	r1, r3
  402e16:	d301      	bcc.n	402e1c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402e18:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402e1a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402e1c:	1d01      	adds	r1, r0, #4
  402e1e:	4b05      	ldr	r3, [pc, #20]	; (402e34 <prvInsertTimerInActiveList+0x48>)
  402e20:	6818      	ldr	r0, [r3, #0]
  402e22:	4b03      	ldr	r3, [pc, #12]	; (402e30 <prvInsertTimerInActiveList+0x44>)
  402e24:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402e26:	2000      	movs	r0, #0
  402e28:	bd08      	pop	{r3, pc}
  402e2a:	bf00      	nop
  402e2c:	20400b68 	.word	0x20400b68
  402e30:	00400f95 	.word	0x00400f95
  402e34:	20400b64 	.word	0x20400b64

00402e38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402e38:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402e3a:	4b10      	ldr	r3, [pc, #64]	; (402e7c <prvCheckForValidListAndQueue+0x44>)
  402e3c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402e3e:	4b10      	ldr	r3, [pc, #64]	; (402e80 <prvCheckForValidListAndQueue+0x48>)
  402e40:	681b      	ldr	r3, [r3, #0]
  402e42:	b113      	cbz	r3, 402e4a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402e44:	4b0f      	ldr	r3, [pc, #60]	; (402e84 <prvCheckForValidListAndQueue+0x4c>)
  402e46:	4798      	blx	r3
  402e48:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402e4a:	4d0f      	ldr	r5, [pc, #60]	; (402e88 <prvCheckForValidListAndQueue+0x50>)
  402e4c:	4628      	mov	r0, r5
  402e4e:	4e0f      	ldr	r6, [pc, #60]	; (402e8c <prvCheckForValidListAndQueue+0x54>)
  402e50:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402e52:	4c0f      	ldr	r4, [pc, #60]	; (402e90 <prvCheckForValidListAndQueue+0x58>)
  402e54:	4620      	mov	r0, r4
  402e56:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402e58:	4b0e      	ldr	r3, [pc, #56]	; (402e94 <prvCheckForValidListAndQueue+0x5c>)
  402e5a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402e5c:	4b0e      	ldr	r3, [pc, #56]	; (402e98 <prvCheckForValidListAndQueue+0x60>)
  402e5e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402e60:	2200      	movs	r2, #0
  402e62:	2110      	movs	r1, #16
  402e64:	2005      	movs	r0, #5
  402e66:	4b0d      	ldr	r3, [pc, #52]	; (402e9c <prvCheckForValidListAndQueue+0x64>)
  402e68:	4798      	blx	r3
  402e6a:	4b05      	ldr	r3, [pc, #20]	; (402e80 <prvCheckForValidListAndQueue+0x48>)
  402e6c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402e6e:	2800      	cmp	r0, #0
  402e70:	d0e8      	beq.n	402e44 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402e72:	490b      	ldr	r1, [pc, #44]	; (402ea0 <prvCheckForValidListAndQueue+0x68>)
  402e74:	4b0b      	ldr	r3, [pc, #44]	; (402ea4 <prvCheckForValidListAndQueue+0x6c>)
  402e76:	4798      	blx	r3
  402e78:	e7e4      	b.n	402e44 <prvCheckForValidListAndQueue+0xc>
  402e7a:	bf00      	nop
  402e7c:	004010c5 	.word	0x004010c5
  402e80:	20400b98 	.word	0x20400b98
  402e84:	00401111 	.word	0x00401111
  402e88:	20400b6c 	.word	0x20400b6c
  402e8c:	00400f61 	.word	0x00400f61
  402e90:	20400b80 	.word	0x20400b80
  402e94:	20400b64 	.word	0x20400b64
  402e98:	20400b68 	.word	0x20400b68
  402e9c:	00401631 	.word	0x00401631
  402ea0:	0040a2a0 	.word	0x0040a2a0
  402ea4:	00401e01 	.word	0x00401e01

00402ea8 <xTimerCreateTimerTask>:
{
  402ea8:	b510      	push	{r4, lr}
  402eaa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402eac:	4b0e      	ldr	r3, [pc, #56]	; (402ee8 <xTimerCreateTimerTask+0x40>)
  402eae:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402eb0:	4b0e      	ldr	r3, [pc, #56]	; (402eec <xTimerCreateTimerTask+0x44>)
  402eb2:	681b      	ldr	r3, [r3, #0]
  402eb4:	b16b      	cbz	r3, 402ed2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402eb6:	4b0e      	ldr	r3, [pc, #56]	; (402ef0 <xTimerCreateTimerTask+0x48>)
  402eb8:	9301      	str	r3, [sp, #4]
  402eba:	2304      	movs	r3, #4
  402ebc:	9300      	str	r3, [sp, #0]
  402ebe:	2300      	movs	r3, #0
  402ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
  402ec4:	490b      	ldr	r1, [pc, #44]	; (402ef4 <xTimerCreateTimerTask+0x4c>)
  402ec6:	480c      	ldr	r0, [pc, #48]	; (402ef8 <xTimerCreateTimerTask+0x50>)
  402ec8:	4c0c      	ldr	r4, [pc, #48]	; (402efc <xTimerCreateTimerTask+0x54>)
  402eca:	47a0      	blx	r4
	configASSERT( xReturn );
  402ecc:	b108      	cbz	r0, 402ed2 <xTimerCreateTimerTask+0x2a>
}
  402ece:	b002      	add	sp, #8
  402ed0:	bd10      	pop	{r4, pc}
  402ed2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed6:	b672      	cpsid	i
  402ed8:	f383 8811 	msr	BASEPRI, r3
  402edc:	f3bf 8f6f 	isb	sy
  402ee0:	f3bf 8f4f 	dsb	sy
  402ee4:	b662      	cpsie	i
  402ee6:	e7fe      	b.n	402ee6 <xTimerCreateTimerTask+0x3e>
  402ee8:	00402e39 	.word	0x00402e39
  402eec:	20400b98 	.word	0x20400b98
  402ef0:	20400b9c 	.word	0x20400b9c
  402ef4:	0040a2a8 	.word	0x0040a2a8
  402ef8:	00403029 	.word	0x00403029
  402efc:	00401ff1 	.word	0x00401ff1

00402f00 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402f00:	b1d8      	cbz	r0, 402f3a <xTimerGenericCommand+0x3a>
{
  402f02:	b530      	push	{r4, r5, lr}
  402f04:	b085      	sub	sp, #20
  402f06:	4615      	mov	r5, r2
  402f08:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402f0a:	4a15      	ldr	r2, [pc, #84]	; (402f60 <xTimerGenericCommand+0x60>)
  402f0c:	6810      	ldr	r0, [r2, #0]
  402f0e:	b320      	cbz	r0, 402f5a <xTimerGenericCommand+0x5a>
  402f10:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402f12:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402f14:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402f16:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402f18:	2905      	cmp	r1, #5
  402f1a:	dc19      	bgt.n	402f50 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402f1c:	4b11      	ldr	r3, [pc, #68]	; (402f64 <xTimerGenericCommand+0x64>)
  402f1e:	4798      	blx	r3
  402f20:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402f22:	f04f 0300 	mov.w	r3, #0
  402f26:	bf0c      	ite	eq
  402f28:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402f2a:	461a      	movne	r2, r3
  402f2c:	4669      	mov	r1, sp
  402f2e:	480c      	ldr	r0, [pc, #48]	; (402f60 <xTimerGenericCommand+0x60>)
  402f30:	6800      	ldr	r0, [r0, #0]
  402f32:	4c0d      	ldr	r4, [pc, #52]	; (402f68 <xTimerGenericCommand+0x68>)
  402f34:	47a0      	blx	r4
}
  402f36:	b005      	add	sp, #20
  402f38:	bd30      	pop	{r4, r5, pc}
  402f3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3e:	b672      	cpsid	i
  402f40:	f383 8811 	msr	BASEPRI, r3
  402f44:	f3bf 8f6f 	isb	sy
  402f48:	f3bf 8f4f 	dsb	sy
  402f4c:	b662      	cpsie	i
  402f4e:	e7fe      	b.n	402f4e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402f50:	2300      	movs	r3, #0
  402f52:	4669      	mov	r1, sp
  402f54:	4c05      	ldr	r4, [pc, #20]	; (402f6c <xTimerGenericCommand+0x6c>)
  402f56:	47a0      	blx	r4
  402f58:	e7ed      	b.n	402f36 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402f5a:	2000      	movs	r0, #0
	return xReturn;
  402f5c:	e7eb      	b.n	402f36 <xTimerGenericCommand+0x36>
  402f5e:	bf00      	nop
  402f60:	20400b98 	.word	0x20400b98
  402f64:	00402a41 	.word	0x00402a41
  402f68:	0040168d 	.word	0x0040168d
  402f6c:	0040187d 	.word	0x0040187d

00402f70 <prvSampleTimeNow>:
{
  402f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f74:	b082      	sub	sp, #8
  402f76:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402f78:	4b24      	ldr	r3, [pc, #144]	; (40300c <prvSampleTimeNow+0x9c>)
  402f7a:	4798      	blx	r3
  402f7c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402f7e:	4b24      	ldr	r3, [pc, #144]	; (403010 <prvSampleTimeNow+0xa0>)
  402f80:	681b      	ldr	r3, [r3, #0]
  402f82:	4298      	cmp	r0, r3
  402f84:	d31b      	bcc.n	402fbe <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402f86:	2300      	movs	r3, #0
  402f88:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402f8c:	4b20      	ldr	r3, [pc, #128]	; (403010 <prvSampleTimeNow+0xa0>)
  402f8e:	601f      	str	r7, [r3, #0]
}
  402f90:	4638      	mov	r0, r7
  402f92:	b002      	add	sp, #8
  402f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402f98:	2100      	movs	r1, #0
  402f9a:	9100      	str	r1, [sp, #0]
  402f9c:	460b      	mov	r3, r1
  402f9e:	4652      	mov	r2, sl
  402fa0:	4620      	mov	r0, r4
  402fa2:	4c1c      	ldr	r4, [pc, #112]	; (403014 <prvSampleTimeNow+0xa4>)
  402fa4:	47a0      	blx	r4
				configASSERT( xResult );
  402fa6:	b960      	cbnz	r0, 402fc2 <prvSampleTimeNow+0x52>
  402fa8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fac:	b672      	cpsid	i
  402fae:	f383 8811 	msr	BASEPRI, r3
  402fb2:	f3bf 8f6f 	isb	sy
  402fb6:	f3bf 8f4f 	dsb	sy
  402fba:	b662      	cpsie	i
  402fbc:	e7fe      	b.n	402fbc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402fbe:	4d16      	ldr	r5, [pc, #88]	; (403018 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fc0:	4e16      	ldr	r6, [pc, #88]	; (40301c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402fc2:	682b      	ldr	r3, [r5, #0]
  402fc4:	681a      	ldr	r2, [r3, #0]
  402fc6:	b1c2      	cbz	r2, 402ffa <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fc8:	68db      	ldr	r3, [r3, #12]
  402fca:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fce:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fd0:	f104 0904 	add.w	r9, r4, #4
  402fd4:	4648      	mov	r0, r9
  402fd6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402fda:	4620      	mov	r0, r4
  402fdc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fde:	69e3      	ldr	r3, [r4, #28]
  402fe0:	2b01      	cmp	r3, #1
  402fe2:	d1ee      	bne.n	402fc2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402fe4:	69a3      	ldr	r3, [r4, #24]
  402fe6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402fe8:	459a      	cmp	sl, r3
  402fea:	d2d5      	bcs.n	402f98 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402fec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402fee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402ff0:	4649      	mov	r1, r9
  402ff2:	6828      	ldr	r0, [r5, #0]
  402ff4:	4b0a      	ldr	r3, [pc, #40]	; (403020 <prvSampleTimeNow+0xb0>)
  402ff6:	4798      	blx	r3
  402ff8:	e7e3      	b.n	402fc2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ffa:	4a0a      	ldr	r2, [pc, #40]	; (403024 <prvSampleTimeNow+0xb4>)
  402ffc:	6810      	ldr	r0, [r2, #0]
  402ffe:	4906      	ldr	r1, [pc, #24]	; (403018 <prvSampleTimeNow+0xa8>)
  403000:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403002:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403004:	2301      	movs	r3, #1
  403006:	f8c8 3000 	str.w	r3, [r8]
  40300a:	e7bf      	b.n	402f8c <prvSampleTimeNow+0x1c>
  40300c:	00402311 	.word	0x00402311
  403010:	20400b94 	.word	0x20400b94
  403014:	00402f01 	.word	0x00402f01
  403018:	20400b64 	.word	0x20400b64
  40301c:	00400fc9 	.word	0x00400fc9
  403020:	00400f95 	.word	0x00400f95
  403024:	20400b68 	.word	0x20400b68

00403028 <prvTimerTask>:
{
  403028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40302c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40302e:	4e75      	ldr	r6, [pc, #468]	; (403204 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403030:	4f75      	ldr	r7, [pc, #468]	; (403208 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403032:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403230 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403036:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403234 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40303a:	6833      	ldr	r3, [r6, #0]
  40303c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40303e:	2a00      	cmp	r2, #0
  403040:	f000 80ce 	beq.w	4031e0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403044:	68db      	ldr	r3, [r3, #12]
  403046:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403048:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40304a:	a804      	add	r0, sp, #16
  40304c:	4b6f      	ldr	r3, [pc, #444]	; (40320c <prvTimerTask+0x1e4>)
  40304e:	4798      	blx	r3
  403050:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403052:	9b04      	ldr	r3, [sp, #16]
  403054:	2b00      	cmp	r3, #0
  403056:	d144      	bne.n	4030e2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403058:	42a0      	cmp	r0, r4
  40305a:	d212      	bcs.n	403082 <prvTimerTask+0x5a>
  40305c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40305e:	1b61      	subs	r1, r4, r5
  403060:	4b6b      	ldr	r3, [pc, #428]	; (403210 <prvTimerTask+0x1e8>)
  403062:	6818      	ldr	r0, [r3, #0]
  403064:	4b6b      	ldr	r3, [pc, #428]	; (403214 <prvTimerTask+0x1ec>)
  403066:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403068:	4b6b      	ldr	r3, [pc, #428]	; (403218 <prvTimerTask+0x1f0>)
  40306a:	4798      	blx	r3
  40306c:	2800      	cmp	r0, #0
  40306e:	d13a      	bne.n	4030e6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403074:	f8c9 3000 	str.w	r3, [r9]
  403078:	f3bf 8f4f 	dsb	sy
  40307c:	f3bf 8f6f 	isb	sy
  403080:	e031      	b.n	4030e6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403082:	4b65      	ldr	r3, [pc, #404]	; (403218 <prvTimerTask+0x1f0>)
  403084:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403086:	6833      	ldr	r3, [r6, #0]
  403088:	68db      	ldr	r3, [r3, #12]
  40308a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40308e:	f10a 0004 	add.w	r0, sl, #4
  403092:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403094:	f8da 301c 	ldr.w	r3, [sl, #28]
  403098:	2b01      	cmp	r3, #1
  40309a:	d004      	beq.n	4030a6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40309c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4030a0:	4650      	mov	r0, sl
  4030a2:	4798      	blx	r3
  4030a4:	e01f      	b.n	4030e6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  4030a6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4030aa:	4623      	mov	r3, r4
  4030ac:	462a      	mov	r2, r5
  4030ae:	4421      	add	r1, r4
  4030b0:	4650      	mov	r0, sl
  4030b2:	4d5a      	ldr	r5, [pc, #360]	; (40321c <prvTimerTask+0x1f4>)
  4030b4:	47a8      	blx	r5
  4030b6:	2800      	cmp	r0, #0
  4030b8:	d0f0      	beq.n	40309c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4030ba:	2100      	movs	r1, #0
  4030bc:	9100      	str	r1, [sp, #0]
  4030be:	460b      	mov	r3, r1
  4030c0:	4622      	mov	r2, r4
  4030c2:	4650      	mov	r0, sl
  4030c4:	4c56      	ldr	r4, [pc, #344]	; (403220 <prvTimerTask+0x1f8>)
  4030c6:	47a0      	blx	r4
			configASSERT( xResult );
  4030c8:	2800      	cmp	r0, #0
  4030ca:	d1e7      	bne.n	40309c <prvTimerTask+0x74>
  4030cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030d0:	b672      	cpsid	i
  4030d2:	f383 8811 	msr	BASEPRI, r3
  4030d6:	f3bf 8f6f 	isb	sy
  4030da:	f3bf 8f4f 	dsb	sy
  4030de:	b662      	cpsie	i
  4030e0:	e7fe      	b.n	4030e0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4030e2:	4b4d      	ldr	r3, [pc, #308]	; (403218 <prvTimerTask+0x1f0>)
  4030e4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030e6:	4d4a      	ldr	r5, [pc, #296]	; (403210 <prvTimerTask+0x1e8>)
  4030e8:	4c4e      	ldr	r4, [pc, #312]	; (403224 <prvTimerTask+0x1fc>)
  4030ea:	e006      	b.n	4030fa <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4030ec:	9907      	ldr	r1, [sp, #28]
  4030ee:	9806      	ldr	r0, [sp, #24]
  4030f0:	9b05      	ldr	r3, [sp, #20]
  4030f2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4030f4:	9b04      	ldr	r3, [sp, #16]
  4030f6:	2b00      	cmp	r3, #0
  4030f8:	da08      	bge.n	40310c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030fa:	2200      	movs	r2, #0
  4030fc:	a904      	add	r1, sp, #16
  4030fe:	6828      	ldr	r0, [r5, #0]
  403100:	47a0      	blx	r4
  403102:	2800      	cmp	r0, #0
  403104:	d099      	beq.n	40303a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403106:	9b04      	ldr	r3, [sp, #16]
  403108:	2b00      	cmp	r3, #0
  40310a:	dbef      	blt.n	4030ec <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40310c:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  403110:	f8da 3014 	ldr.w	r3, [sl, #20]
  403114:	b113      	cbz	r3, 40311c <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403116:	f10a 0004 	add.w	r0, sl, #4
  40311a:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40311c:	a803      	add	r0, sp, #12
  40311e:	4b3b      	ldr	r3, [pc, #236]	; (40320c <prvTimerTask+0x1e4>)
  403120:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403122:	9b04      	ldr	r3, [sp, #16]
  403124:	2b09      	cmp	r3, #9
  403126:	d8e8      	bhi.n	4030fa <prvTimerTask+0xd2>
  403128:	a201      	add	r2, pc, #4	; (adr r2, 403130 <prvTimerTask+0x108>)
  40312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40312e:	bf00      	nop
  403130:	00403159 	.word	0x00403159
  403134:	00403159 	.word	0x00403159
  403138:	00403159 	.word	0x00403159
  40313c:	004030fb 	.word	0x004030fb
  403140:	004031ad 	.word	0x004031ad
  403144:	004031d9 	.word	0x004031d9
  403148:	00403159 	.word	0x00403159
  40314c:	00403159 	.word	0x00403159
  403150:	004030fb 	.word	0x004030fb
  403154:	004031ad 	.word	0x004031ad
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  403158:	9c05      	ldr	r4, [sp, #20]
  40315a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40315e:	4623      	mov	r3, r4
  403160:	4602      	mov	r2, r0
  403162:	4421      	add	r1, r4
  403164:	4650      	mov	r0, sl
  403166:	4c2d      	ldr	r4, [pc, #180]	; (40321c <prvTimerTask+0x1f4>)
  403168:	47a0      	blx	r4
  40316a:	2800      	cmp	r0, #0
  40316c:	d0bc      	beq.n	4030e8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40316e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403172:	4650      	mov	r0, sl
  403174:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403176:	f8da 301c 	ldr.w	r3, [sl, #28]
  40317a:	2b01      	cmp	r3, #1
  40317c:	d1b4      	bne.n	4030e8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40317e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403182:	2100      	movs	r1, #0
  403184:	9100      	str	r1, [sp, #0]
  403186:	460b      	mov	r3, r1
  403188:	9805      	ldr	r0, [sp, #20]
  40318a:	4402      	add	r2, r0
  40318c:	4650      	mov	r0, sl
  40318e:	4c24      	ldr	r4, [pc, #144]	; (403220 <prvTimerTask+0x1f8>)
  403190:	47a0      	blx	r4
							configASSERT( xResult );
  403192:	2800      	cmp	r0, #0
  403194:	d1a8      	bne.n	4030e8 <prvTimerTask+0xc0>
  403196:	f04f 0380 	mov.w	r3, #128	; 0x80
  40319a:	b672      	cpsid	i
  40319c:	f383 8811 	msr	BASEPRI, r3
  4031a0:	f3bf 8f6f 	isb	sy
  4031a4:	f3bf 8f4f 	dsb	sy
  4031a8:	b662      	cpsie	i
  4031aa:	e7fe      	b.n	4031aa <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4031ac:	9905      	ldr	r1, [sp, #20]
  4031ae:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4031b2:	b131      	cbz	r1, 4031c2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4031b4:	4603      	mov	r3, r0
  4031b6:	4602      	mov	r2, r0
  4031b8:	4401      	add	r1, r0
  4031ba:	4650      	mov	r0, sl
  4031bc:	4c17      	ldr	r4, [pc, #92]	; (40321c <prvTimerTask+0x1f4>)
  4031be:	47a0      	blx	r4
  4031c0:	e792      	b.n	4030e8 <prvTimerTask+0xc0>
  4031c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031c6:	b672      	cpsid	i
  4031c8:	f383 8811 	msr	BASEPRI, r3
  4031cc:	f3bf 8f6f 	isb	sy
  4031d0:	f3bf 8f4f 	dsb	sy
  4031d4:	b662      	cpsie	i
  4031d6:	e7fe      	b.n	4031d6 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  4031d8:	4650      	mov	r0, sl
  4031da:	4b13      	ldr	r3, [pc, #76]	; (403228 <prvTimerTask+0x200>)
  4031dc:	4798      	blx	r3
  4031de:	e783      	b.n	4030e8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4031e0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4031e2:	a804      	add	r0, sp, #16
  4031e4:	4b09      	ldr	r3, [pc, #36]	; (40320c <prvTimerTask+0x1e4>)
  4031e6:	4798      	blx	r3
  4031e8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4031ea:	9b04      	ldr	r3, [sp, #16]
  4031ec:	2b00      	cmp	r3, #0
  4031ee:	f47f af78 	bne.w	4030e2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4031f2:	4b0e      	ldr	r3, [pc, #56]	; (40322c <prvTimerTask+0x204>)
  4031f4:	681b      	ldr	r3, [r3, #0]
  4031f6:	681a      	ldr	r2, [r3, #0]
  4031f8:	fab2 f282 	clz	r2, r2
  4031fc:	0952      	lsrs	r2, r2, #5
  4031fe:	2400      	movs	r4, #0
  403200:	e72d      	b.n	40305e <prvTimerTask+0x36>
  403202:	bf00      	nop
  403204:	20400b64 	.word	0x20400b64
  403208:	00402301 	.word	0x00402301
  40320c:	00402f71 	.word	0x00402f71
  403210:	20400b98 	.word	0x20400b98
  403214:	00401e35 	.word	0x00401e35
  403218:	00402465 	.word	0x00402465
  40321c:	00402ded 	.word	0x00402ded
  403220:	00402f01 	.word	0x00402f01
  403224:	00401a75 	.word	0x00401a75
  403228:	00401381 	.word	0x00401381
  40322c:	20400b68 	.word	0x20400b68
  403230:	e000ed04 	.word	0xe000ed04
  403234:	00400fc9 	.word	0x00400fc9

00403238 <but1_callback>:

/**                                                               
* callback do botao                                               
* libera semaforo: xSemaphore                                    
*/
void but1_callback(void){
  403238:	b530      	push	{r4, r5, lr}
  40323a:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40323c:	ac02      	add	r4, sp, #8
  40323e:	2300      	movs	r3, #0
  403240:	f844 3d04 	str.w	r3, [r4, #-4]!
    printf("but_callback \n");
  403244:	4805      	ldr	r0, [pc, #20]	; (40325c <but1_callback+0x24>)
  403246:	4d06      	ldr	r5, [pc, #24]	; (403260 <but1_callback+0x28>)
  403248:	47a8      	blx	r5
    xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  40324a:	4621      	mov	r1, r4
  40324c:	4b05      	ldr	r3, [pc, #20]	; (403264 <but1_callback+0x2c>)
  40324e:	6818      	ldr	r0, [r3, #0]
  403250:	4b05      	ldr	r3, [pc, #20]	; (403268 <but1_callback+0x30>)
  403252:	4798      	blx	r3
    printf("semafaro tx \n");
  403254:	4805      	ldr	r0, [pc, #20]	; (40326c <but1_callback+0x34>)
  403256:	47a8      	blx	r5
}
  403258:	b003      	add	sp, #12
  40325a:	bd30      	pop	{r4, r5, pc}
  40325c:	0040a2cc 	.word	0x0040a2cc
  403260:	00403afd 	.word	0x00403afd
  403264:	20400d20 	.word	0x20400d20
  403268:	00401991 	.word	0x00401991
  40326c:	0040a2dc 	.word	0x0040a2dc

00403270 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403270:	b5f0      	push	{r4, r5, r6, r7, lr}
  403272:	b083      	sub	sp, #12
  403274:	4605      	mov	r5, r0
  403276:	460c      	mov	r4, r1
	uint32_t val = 0;
  403278:	2300      	movs	r3, #0
  40327a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40327c:	4b2a      	ldr	r3, [pc, #168]	; (403328 <usart_serial_getchar+0xb8>)
  40327e:	4298      	cmp	r0, r3
  403280:	d013      	beq.n	4032aa <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403282:	4b2a      	ldr	r3, [pc, #168]	; (40332c <usart_serial_getchar+0xbc>)
  403284:	4298      	cmp	r0, r3
  403286:	d018      	beq.n	4032ba <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403288:	4b29      	ldr	r3, [pc, #164]	; (403330 <usart_serial_getchar+0xc0>)
  40328a:	4298      	cmp	r0, r3
  40328c:	d01d      	beq.n	4032ca <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40328e:	4b29      	ldr	r3, [pc, #164]	; (403334 <usart_serial_getchar+0xc4>)
  403290:	429d      	cmp	r5, r3
  403292:	d022      	beq.n	4032da <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403294:	4b28      	ldr	r3, [pc, #160]	; (403338 <usart_serial_getchar+0xc8>)
  403296:	429d      	cmp	r5, r3
  403298:	d027      	beq.n	4032ea <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40329a:	4b28      	ldr	r3, [pc, #160]	; (40333c <usart_serial_getchar+0xcc>)
  40329c:	429d      	cmp	r5, r3
  40329e:	d02e      	beq.n	4032fe <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4032a0:	4b27      	ldr	r3, [pc, #156]	; (403340 <usart_serial_getchar+0xd0>)
  4032a2:	429d      	cmp	r5, r3
  4032a4:	d035      	beq.n	403312 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4032a6:	b003      	add	sp, #12
  4032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4032aa:	461f      	mov	r7, r3
  4032ac:	4e25      	ldr	r6, [pc, #148]	; (403344 <usart_serial_getchar+0xd4>)
  4032ae:	4621      	mov	r1, r4
  4032b0:	4638      	mov	r0, r7
  4032b2:	47b0      	blx	r6
  4032b4:	2800      	cmp	r0, #0
  4032b6:	d1fa      	bne.n	4032ae <usart_serial_getchar+0x3e>
  4032b8:	e7e9      	b.n	40328e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4032ba:	461f      	mov	r7, r3
  4032bc:	4e21      	ldr	r6, [pc, #132]	; (403344 <usart_serial_getchar+0xd4>)
  4032be:	4621      	mov	r1, r4
  4032c0:	4638      	mov	r0, r7
  4032c2:	47b0      	blx	r6
  4032c4:	2800      	cmp	r0, #0
  4032c6:	d1fa      	bne.n	4032be <usart_serial_getchar+0x4e>
  4032c8:	e7e4      	b.n	403294 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4032ca:	461f      	mov	r7, r3
  4032cc:	4e1d      	ldr	r6, [pc, #116]	; (403344 <usart_serial_getchar+0xd4>)
  4032ce:	4621      	mov	r1, r4
  4032d0:	4638      	mov	r0, r7
  4032d2:	47b0      	blx	r6
  4032d4:	2800      	cmp	r0, #0
  4032d6:	d1fa      	bne.n	4032ce <usart_serial_getchar+0x5e>
  4032d8:	e7df      	b.n	40329a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4032da:	461f      	mov	r7, r3
  4032dc:	4e19      	ldr	r6, [pc, #100]	; (403344 <usart_serial_getchar+0xd4>)
  4032de:	4621      	mov	r1, r4
  4032e0:	4638      	mov	r0, r7
  4032e2:	47b0      	blx	r6
  4032e4:	2800      	cmp	r0, #0
  4032e6:	d1fa      	bne.n	4032de <usart_serial_getchar+0x6e>
  4032e8:	e7da      	b.n	4032a0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4032ea:	461e      	mov	r6, r3
  4032ec:	4d16      	ldr	r5, [pc, #88]	; (403348 <usart_serial_getchar+0xd8>)
  4032ee:	a901      	add	r1, sp, #4
  4032f0:	4630      	mov	r0, r6
  4032f2:	47a8      	blx	r5
  4032f4:	2800      	cmp	r0, #0
  4032f6:	d1fa      	bne.n	4032ee <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4032f8:	9b01      	ldr	r3, [sp, #4]
  4032fa:	7023      	strb	r3, [r4, #0]
  4032fc:	e7d3      	b.n	4032a6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032fe:	461e      	mov	r6, r3
  403300:	4d11      	ldr	r5, [pc, #68]	; (403348 <usart_serial_getchar+0xd8>)
  403302:	a901      	add	r1, sp, #4
  403304:	4630      	mov	r0, r6
  403306:	47a8      	blx	r5
  403308:	2800      	cmp	r0, #0
  40330a:	d1fa      	bne.n	403302 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40330c:	9b01      	ldr	r3, [sp, #4]
  40330e:	7023      	strb	r3, [r4, #0]
  403310:	e7c9      	b.n	4032a6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403312:	461e      	mov	r6, r3
  403314:	4d0c      	ldr	r5, [pc, #48]	; (403348 <usart_serial_getchar+0xd8>)
  403316:	a901      	add	r1, sp, #4
  403318:	4630      	mov	r0, r6
  40331a:	47a8      	blx	r5
  40331c:	2800      	cmp	r0, #0
  40331e:	d1fa      	bne.n	403316 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403320:	9b01      	ldr	r3, [sp, #4]
  403322:	7023      	strb	r3, [r4, #0]
}
  403324:	e7bf      	b.n	4032a6 <usart_serial_getchar+0x36>
  403326:	bf00      	nop
  403328:	400e0800 	.word	0x400e0800
  40332c:	400e0a00 	.word	0x400e0a00
  403330:	400e1a00 	.word	0x400e1a00
  403334:	400e1c00 	.word	0x400e1c00
  403338:	40024000 	.word	0x40024000
  40333c:	40028000 	.word	0x40028000
  403340:	4002c000 	.word	0x4002c000
  403344:	00400b83 	.word	0x00400b83
  403348:	00400c97 	.word	0x00400c97

0040334c <usart_serial_putchar>:
{
  40334c:	b570      	push	{r4, r5, r6, lr}
  40334e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403350:	4b2a      	ldr	r3, [pc, #168]	; (4033fc <usart_serial_putchar+0xb0>)
  403352:	4298      	cmp	r0, r3
  403354:	d013      	beq.n	40337e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403356:	4b2a      	ldr	r3, [pc, #168]	; (403400 <usart_serial_putchar+0xb4>)
  403358:	4298      	cmp	r0, r3
  40335a:	d019      	beq.n	403390 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40335c:	4b29      	ldr	r3, [pc, #164]	; (403404 <usart_serial_putchar+0xb8>)
  40335e:	4298      	cmp	r0, r3
  403360:	d01f      	beq.n	4033a2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403362:	4b29      	ldr	r3, [pc, #164]	; (403408 <usart_serial_putchar+0xbc>)
  403364:	4298      	cmp	r0, r3
  403366:	d025      	beq.n	4033b4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403368:	4b28      	ldr	r3, [pc, #160]	; (40340c <usart_serial_putchar+0xc0>)
  40336a:	4298      	cmp	r0, r3
  40336c:	d02b      	beq.n	4033c6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40336e:	4b28      	ldr	r3, [pc, #160]	; (403410 <usart_serial_putchar+0xc4>)
  403370:	4298      	cmp	r0, r3
  403372:	d031      	beq.n	4033d8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403374:	4b27      	ldr	r3, [pc, #156]	; (403414 <usart_serial_putchar+0xc8>)
  403376:	4298      	cmp	r0, r3
  403378:	d037      	beq.n	4033ea <usart_serial_putchar+0x9e>
	return 0;
  40337a:	2000      	movs	r0, #0
}
  40337c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40337e:	461e      	mov	r6, r3
  403380:	4d25      	ldr	r5, [pc, #148]	; (403418 <usart_serial_putchar+0xcc>)
  403382:	4621      	mov	r1, r4
  403384:	4630      	mov	r0, r6
  403386:	47a8      	blx	r5
  403388:	2800      	cmp	r0, #0
  40338a:	d1fa      	bne.n	403382 <usart_serial_putchar+0x36>
		return 1;
  40338c:	2001      	movs	r0, #1
  40338e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403390:	461e      	mov	r6, r3
  403392:	4d21      	ldr	r5, [pc, #132]	; (403418 <usart_serial_putchar+0xcc>)
  403394:	4621      	mov	r1, r4
  403396:	4630      	mov	r0, r6
  403398:	47a8      	blx	r5
  40339a:	2800      	cmp	r0, #0
  40339c:	d1fa      	bne.n	403394 <usart_serial_putchar+0x48>
		return 1;
  40339e:	2001      	movs	r0, #1
  4033a0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033a2:	461e      	mov	r6, r3
  4033a4:	4d1c      	ldr	r5, [pc, #112]	; (403418 <usart_serial_putchar+0xcc>)
  4033a6:	4621      	mov	r1, r4
  4033a8:	4630      	mov	r0, r6
  4033aa:	47a8      	blx	r5
  4033ac:	2800      	cmp	r0, #0
  4033ae:	d1fa      	bne.n	4033a6 <usart_serial_putchar+0x5a>
		return 1;
  4033b0:	2001      	movs	r0, #1
  4033b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033b4:	461e      	mov	r6, r3
  4033b6:	4d18      	ldr	r5, [pc, #96]	; (403418 <usart_serial_putchar+0xcc>)
  4033b8:	4621      	mov	r1, r4
  4033ba:	4630      	mov	r0, r6
  4033bc:	47a8      	blx	r5
  4033be:	2800      	cmp	r0, #0
  4033c0:	d1fa      	bne.n	4033b8 <usart_serial_putchar+0x6c>
		return 1;
  4033c2:	2001      	movs	r0, #1
  4033c4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033c6:	461e      	mov	r6, r3
  4033c8:	4d14      	ldr	r5, [pc, #80]	; (40341c <usart_serial_putchar+0xd0>)
  4033ca:	4621      	mov	r1, r4
  4033cc:	4630      	mov	r0, r6
  4033ce:	47a8      	blx	r5
  4033d0:	2800      	cmp	r0, #0
  4033d2:	d1fa      	bne.n	4033ca <usart_serial_putchar+0x7e>
		return 1;
  4033d4:	2001      	movs	r0, #1
  4033d6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033d8:	461e      	mov	r6, r3
  4033da:	4d10      	ldr	r5, [pc, #64]	; (40341c <usart_serial_putchar+0xd0>)
  4033dc:	4621      	mov	r1, r4
  4033de:	4630      	mov	r0, r6
  4033e0:	47a8      	blx	r5
  4033e2:	2800      	cmp	r0, #0
  4033e4:	d1fa      	bne.n	4033dc <usart_serial_putchar+0x90>
		return 1;
  4033e6:	2001      	movs	r0, #1
  4033e8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033ea:	461e      	mov	r6, r3
  4033ec:	4d0b      	ldr	r5, [pc, #44]	; (40341c <usart_serial_putchar+0xd0>)
  4033ee:	4621      	mov	r1, r4
  4033f0:	4630      	mov	r0, r6
  4033f2:	47a8      	blx	r5
  4033f4:	2800      	cmp	r0, #0
  4033f6:	d1fa      	bne.n	4033ee <usart_serial_putchar+0xa2>
		return 1;
  4033f8:	2001      	movs	r0, #1
  4033fa:	bd70      	pop	{r4, r5, r6, pc}
  4033fc:	400e0800 	.word	0x400e0800
  403400:	400e0a00 	.word	0x400e0a00
  403404:	400e1a00 	.word	0x400e1a00
  403408:	400e1c00 	.word	0x400e1c00
  40340c:	40024000 	.word	0x40024000
  403410:	40028000 	.word	0x40028000
  403414:	4002c000 	.word	0x4002c000
  403418:	00400b71 	.word	0x00400b71
  40341c:	00400c81 	.word	0x00400c81

00403420 <task_uartRX>:
		}
		vTaskDelay(xDelay);
	}
}

static void task_uartRX(void *pvpParameters){
  403420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403424:	b08a      	sub	sp, #40	; 0x28
	printf("ENTROU NESSA PORRA \n ");
  403426:	4817      	ldr	r0, [pc, #92]	; (403484 <task_uartRX+0x64>)
  403428:	4b17      	ldr	r3, [pc, #92]	; (403488 <task_uartRX+0x68>)
  40342a:	4798      	blx	r3
	char letter;
	char word[32];
	int i =0;
  40342c:	2600      	movs	r6, #0
	while(1){ 
		if (xQueueReceive( xQueueChar, &letter, ( TickType_t )  100 / portTICK_PERIOD_MS)){
  40342e:	4d17      	ldr	r5, [pc, #92]	; (40348c <task_uartRX+0x6c>)
  403430:	4c17      	ldr	r4, [pc, #92]	; (403490 <task_uartRX+0x70>)
				printf("entrou no if\n");
				i = 0;
			} else {
				word[i] = letter;
				i ++;
				printf("entrou no else\n");
  403432:	4f15      	ldr	r7, [pc, #84]	; (403488 <task_uartRX+0x68>)
  403434:	e012      	b.n	40345c <task_uartRX+0x3c>
				word[i] = 0; 
  403436:	ab0a      	add	r3, sp, #40	; 0x28
  403438:	4433      	add	r3, r6
  40343a:	2600      	movs	r6, #0
  40343c:	f803 6c24 	strb.w	r6, [r3, #-36]
				xQueueSend(xQueueCommand, &word, 0);
  403440:	4633      	mov	r3, r6
  403442:	4632      	mov	r2, r6
  403444:	a901      	add	r1, sp, #4
  403446:	4813      	ldr	r0, [pc, #76]	; (403494 <task_uartRX+0x74>)
  403448:	6800      	ldr	r0, [r0, #0]
  40344a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4034a4 <task_uartRX+0x84>
  40344e:	47c0      	blx	r8
				printf("entrou no if\n");
  403450:	4811      	ldr	r0, [pc, #68]	; (403498 <task_uartRX+0x78>)
  403452:	47b8      	blx	r7
			}
			printf("AQUI: %c", letter);
  403454:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
  403458:	4810      	ldr	r0, [pc, #64]	; (40349c <task_uartRX+0x7c>)
  40345a:	47b8      	blx	r7
		if (xQueueReceive( xQueueChar, &letter, ( TickType_t )  100 / portTICK_PERIOD_MS)){
  40345c:	2264      	movs	r2, #100	; 0x64
  40345e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  403462:	6828      	ldr	r0, [r5, #0]
  403464:	47a0      	blx	r4
  403466:	2800      	cmp	r0, #0
  403468:	d0f8      	beq.n	40345c <task_uartRX+0x3c>
			if (letter== '\n') {
  40346a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  40346e:	2b0a      	cmp	r3, #10
  403470:	d0e1      	beq.n	403436 <task_uartRX+0x16>
				word[i] = letter;
  403472:	aa0a      	add	r2, sp, #40	; 0x28
  403474:	4432      	add	r2, r6
  403476:	f802 3c24 	strb.w	r3, [r2, #-36]
				i ++;
  40347a:	3601      	adds	r6, #1
				printf("entrou no else\n");
  40347c:	4808      	ldr	r0, [pc, #32]	; (4034a0 <task_uartRX+0x80>)
  40347e:	47b8      	blx	r7
  403480:	e7e8      	b.n	403454 <task_uartRX+0x34>
  403482:	bf00      	nop
  403484:	0040a4b0 	.word	0x0040a4b0
  403488:	00403afd 	.word	0x00403afd
  40348c:	20400d24 	.word	0x20400d24
  403490:	00401a75 	.word	0x00401a75
  403494:	20400d28 	.word	0x20400d28
  403498:	0040a4c8 	.word	0x0040a4c8
  40349c:	0040a4e8 	.word	0x0040a4e8
  4034a0:	0040a4d8 	.word	0x0040a4d8
  4034a4:	0040168d 	.word	0x0040168d

004034a8 <task_led1>:
{
  4034a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK) ; // liga o led
  4034ac:	4f0b      	ldr	r7, [pc, #44]	; (4034dc <task_led1+0x34>)
  4034ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4034e8 <task_led1+0x40>
			vTaskDelay(xDelayLed);
  4034b2:	4d0b      	ldr	r5, [pc, #44]	; (4034e0 <task_led1+0x38>)
  4034b4:	e002      	b.n	4034bc <task_led1+0x14>
		vTaskDelay(xDelay);
  4034b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4034ba:	47a8      	blx	r5
{
  4034bc:	2405      	movs	r4, #5
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK) ; // liga o led
  4034be:	2601      	movs	r6, #1
  4034c0:	4631      	mov	r1, r6
  4034c2:	4638      	mov	r0, r7
  4034c4:	47c0      	blx	r8
			vTaskDelay(xDelayLed);
  4034c6:	20c8      	movs	r0, #200	; 0xc8
  4034c8:	47a8      	blx	r5
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK); // apaga o led
  4034ca:	4631      	mov	r1, r6
  4034cc:	4638      	mov	r0, r7
  4034ce:	4b05      	ldr	r3, [pc, #20]	; (4034e4 <task_led1+0x3c>)
  4034d0:	4798      	blx	r3
			vTaskDelay(xDelayLed);
  4034d2:	20c8      	movs	r0, #200	; 0xc8
  4034d4:	47a8      	blx	r5
		for (int i = 0; i < 5; i++)
  4034d6:	3c01      	subs	r4, #1
  4034d8:	d1f2      	bne.n	4034c0 <task_led1+0x18>
  4034da:	e7ec      	b.n	4034b6 <task_led1+0xe>
  4034dc:	400e0e00 	.word	0x400e0e00
  4034e0:	0040257d 	.word	0x0040257d
  4034e4:	00400465 	.word	0x00400465
  4034e8:	00400469 	.word	0x00400469

004034ec <task_monitor>:
{
  4034ec:	b570      	push	{r4, r5, r6, lr}
		vTaskList((signed portCHAR *)szList);
  4034ee:	4e04      	ldr	r6, [pc, #16]	; (403500 <task_monitor+0x14>)
  4034f0:	4d04      	ldr	r5, [pc, #16]	; (403504 <task_monitor+0x18>)
		vTaskDelay(3000);
  4034f2:	4c05      	ldr	r4, [pc, #20]	; (403508 <task_monitor+0x1c>)
		vTaskList((signed portCHAR *)szList);
  4034f4:	4630      	mov	r0, r6
  4034f6:	47a8      	blx	r5
		vTaskDelay(3000);
  4034f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4034fc:	47a0      	blx	r4
  4034fe:	e7f9      	b.n	4034f4 <task_monitor+0x8>
  403500:	20400ba0 	.word	0x20400ba0
  403504:	00402ca9 	.word	0x00402ca9
  403508:	0040257d 	.word	0x0040257d

0040350c <vApplicationStackOverflowHook>:
{
  40350c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40350e:	460a      	mov	r2, r1
  403510:	4601      	mov	r1, r0
  403512:	4802      	ldr	r0, [pc, #8]	; (40351c <vApplicationStackOverflowHook+0x10>)
  403514:	4b02      	ldr	r3, [pc, #8]	; (403520 <vApplicationStackOverflowHook+0x14>)
  403516:	4798      	blx	r3
  403518:	e7fe      	b.n	403518 <vApplicationStackOverflowHook+0xc>
  40351a:	bf00      	nop
  40351c:	0040a4f4 	.word	0x0040a4f4
  403520:	00403afd 	.word	0x00403afd

00403524 <vApplicationIdleHook>:
{
  403524:	b508      	push	{r3, lr}
	pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  403526:	2002      	movs	r0, #2
  403528:	4b01      	ldr	r3, [pc, #4]	; (403530 <vApplicationIdleHook+0xc>)
  40352a:	4798      	blx	r3
  40352c:	bd08      	pop	{r3, pc}
  40352e:	bf00      	nop
  403530:	004008fd 	.word	0x004008fd

00403534 <vApplicationTickHook>:
{
  403534:	4770      	bx	lr
	...

00403538 <led_toggle>:
void led_toggle(Pio *pio, const pio_type_t ul_type, const uint32_t ul_mask) {
  403538:	b538      	push	{r3, r4, r5, lr}
  40353a:	4604      	mov	r4, r0
  40353c:	4615      	mov	r5, r2
    if (pio_get(pio,ul_type,ul_mask)) pio_clear(pio, ul_mask);
  40353e:	4b06      	ldr	r3, [pc, #24]	; (403558 <led_toggle+0x20>)
  403540:	4798      	blx	r3
  403542:	b920      	cbnz	r0, 40354e <led_toggle+0x16>
    else pio_set(pio,ul_mask);
  403544:	4629      	mov	r1, r5
  403546:	4620      	mov	r0, r4
  403548:	4b04      	ldr	r3, [pc, #16]	; (40355c <led_toggle+0x24>)
  40354a:	4798      	blx	r3
  40354c:	bd38      	pop	{r3, r4, r5, pc}
    if (pio_get(pio,ul_type,ul_mask)) pio_clear(pio, ul_mask);
  40354e:	4629      	mov	r1, r5
  403550:	4620      	mov	r0, r4
  403552:	4b03      	ldr	r3, [pc, #12]	; (403560 <led_toggle+0x28>)
  403554:	4798      	blx	r3
  403556:	bd38      	pop	{r3, r4, r5, pc}
  403558:	0040046d 	.word	0x0040046d
  40355c:	00400465 	.word	0x00400465
  403560:	00400469 	.word	0x00400469

00403564 <task_execute>:
  } else if(ret & US_IER_TXRDY){

  }
}

static void task_execute(void *pvpParameters){
  403564:	b580      	push	{r7, lr}
  403566:	b088      	sub	sp, #32
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  403568:	4e40      	ldr	r6, [pc, #256]	; (40366c <task_execute+0x108>)
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  40356a:	4f41      	ldr	r7, [pc, #260]	; (403670 <task_execute+0x10c>)
  40356c:	e005      	b.n	40357a <task_execute+0x16>
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  40356e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403572:	210c      	movs	r1, #12
  403574:	4630      	mov	r0, r6
  403576:	4b3f      	ldr	r3, [pc, #252]	; (403674 <task_execute+0x110>)
  403578:	4798      	blx	r3
      if (xQueueReceive(xQueueCommand,&command, 100 / portTICK_PERIOD_MS)){
  40357a:	4d3f      	ldr	r5, [pc, #252]	; (403678 <task_execute+0x114>)
  40357c:	4c3f      	ldr	r4, [pc, #252]	; (40367c <task_execute+0x118>)
  40357e:	2264      	movs	r2, #100	; 0x64
  403580:	4669      	mov	r1, sp
  403582:	6828      	ldr	r0, [r5, #0]
  403584:	47a0      	blx	r4
  403586:	2800      	cmp	r0, #0
  403588:	d0f9      	beq.n	40357e <task_execute+0x1a>
		  printf("Dentro do receive command");
  40358a:	483d      	ldr	r0, [pc, #244]	; (403680 <task_execute+0x11c>)
  40358c:	4b3d      	ldr	r3, [pc, #244]	; (403684 <task_execute+0x120>)
  40358e:	4798      	blx	r3
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  403590:	493d      	ldr	r1, [pc, #244]	; (403688 <task_execute+0x124>)
  403592:	4668      	mov	r0, sp
  403594:	4b3d      	ldr	r3, [pc, #244]	; (40368c <task_execute+0x128>)
  403596:	4798      	blx	r3
  403598:	2800      	cmp	r0, #0
  40359a:	d0e8      	beq.n	40356e <task_execute+0xa>
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
  40359c:	493c      	ldr	r1, [pc, #240]	; (403690 <task_execute+0x12c>)
  40359e:	4668      	mov	r0, sp
  4035a0:	4b3a      	ldr	r3, [pc, #232]	; (40368c <task_execute+0x128>)
  4035a2:	4798      	blx	r3
  4035a4:	2800      	cmp	r0, #0
  4035a6:	d034      	beq.n	403612 <task_execute+0xae>
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  4035a8:	493a      	ldr	r1, [pc, #232]	; (403694 <task_execute+0x130>)
  4035aa:	4668      	mov	r0, sp
  4035ac:	4b37      	ldr	r3, [pc, #220]	; (40368c <task_execute+0x128>)
  4035ae:	4798      	blx	r3
  4035b0:	2800      	cmp	r0, #0
  4035b2:	d034      	beq.n	40361e <task_execute+0xba>
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  4035b4:	4938      	ldr	r1, [pc, #224]	; (403698 <task_execute+0x134>)
  4035b6:	4668      	mov	r0, sp
  4035b8:	4b34      	ldr	r3, [pc, #208]	; (40368c <task_execute+0x128>)
  4035ba:	4798      	blx	r3
  4035bc:	2800      	cmp	r0, #0
  4035be:	d035      	beq.n	40362c <task_execute+0xc8>
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  4035c0:	4936      	ldr	r1, [pc, #216]	; (40369c <task_execute+0x138>)
  4035c2:	4668      	mov	r0, sp
  4035c4:	4b31      	ldr	r3, [pc, #196]	; (40368c <task_execute+0x128>)
  4035c6:	4798      	blx	r3
  4035c8:	2800      	cmp	r0, #0
  4035ca:	d035      	beq.n	403638 <task_execute+0xd4>
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  4035cc:	4934      	ldr	r1, [pc, #208]	; (4036a0 <task_execute+0x13c>)
  4035ce:	4668      	mov	r0, sp
  4035d0:	4b2e      	ldr	r3, [pc, #184]	; (40368c <task_execute+0x128>)
  4035d2:	4798      	blx	r3
  4035d4:	2800      	cmp	r0, #0
  4035d6:	d034      	beq.n	403642 <task_execute+0xde>
        else if (strcmp(command, "led 2 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  4035d8:	4932      	ldr	r1, [pc, #200]	; (4036a4 <task_execute+0x140>)
  4035da:	4668      	mov	r0, sp
  4035dc:	4b2b      	ldr	r3, [pc, #172]	; (40368c <task_execute+0x128>)
  4035de:	4798      	blx	r3
  4035e0:	2800      	cmp	r0, #0
  4035e2:	d034      	beq.n	40364e <task_execute+0xea>
        else if (strcmp(command, "led 2 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  4035e4:	4930      	ldr	r1, [pc, #192]	; (4036a8 <task_execute+0x144>)
  4035e6:	4668      	mov	r0, sp
  4035e8:	4b28      	ldr	r3, [pc, #160]	; (40368c <task_execute+0x128>)
  4035ea:	4798      	blx	r3
  4035ec:	2800      	cmp	r0, #0
  4035ee:	d033      	beq.n	403658 <task_execute+0xf4>
        else if (strcmp(command, "led 3 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  4035f0:	492e      	ldr	r1, [pc, #184]	; (4036ac <task_execute+0x148>)
  4035f2:	4668      	mov	r0, sp
  4035f4:	4b25      	ldr	r3, [pc, #148]	; (40368c <task_execute+0x128>)
  4035f6:	4798      	blx	r3
  4035f8:	2800      	cmp	r0, #0
  4035fa:	d032      	beq.n	403662 <task_execute+0xfe>
        else if (strcmp(command, "led 3 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  4035fc:	492c      	ldr	r1, [pc, #176]	; (4036b0 <task_execute+0x14c>)
  4035fe:	4668      	mov	r0, sp
  403600:	4b22      	ldr	r3, [pc, #136]	; (40368c <task_execute+0x128>)
  403602:	4798      	blx	r3
  403604:	2800      	cmp	r0, #0
  403606:	d1b8      	bne.n	40357a <task_execute+0x16>
  403608:	2104      	movs	r1, #4
  40360a:	482a      	ldr	r0, [pc, #168]	; (4036b4 <task_execute+0x150>)
  40360c:	4b2a      	ldr	r3, [pc, #168]	; (4036b8 <task_execute+0x154>)
  40360e:	4798      	blx	r3
  403610:	e7b3      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
  403612:	2201      	movs	r2, #1
  403614:	210a      	movs	r1, #10
  403616:	4638      	mov	r0, r7
  403618:	4b16      	ldr	r3, [pc, #88]	; (403674 <task_execute+0x110>)
  40361a:	4798      	blx	r3
  40361c:	e7ad      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  40361e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403622:	210c      	movs	r1, #12
  403624:	4630      	mov	r0, r6
  403626:	4b13      	ldr	r3, [pc, #76]	; (403674 <task_execute+0x110>)
  403628:	4798      	blx	r3
  40362a:	e7a6      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  40362c:	2204      	movs	r2, #4
  40362e:	210b      	movs	r1, #11
  403630:	4820      	ldr	r0, [pc, #128]	; (4036b4 <task_execute+0x150>)
  403632:	4b10      	ldr	r3, [pc, #64]	; (403674 <task_execute+0x110>)
  403634:	4798      	blx	r3
  403636:	e7a0      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  403638:	2101      	movs	r1, #1
  40363a:	4638      	mov	r0, r7
  40363c:	4b1e      	ldr	r3, [pc, #120]	; (4036b8 <task_execute+0x154>)
  40363e:	4798      	blx	r3
  403640:	e79b      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  403642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403646:	4630      	mov	r0, r6
  403648:	4b1c      	ldr	r3, [pc, #112]	; (4036bc <task_execute+0x158>)
  40364a:	4798      	blx	r3
  40364c:	e795      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 2 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  40364e:	2104      	movs	r1, #4
  403650:	4818      	ldr	r0, [pc, #96]	; (4036b4 <task_execute+0x150>)
  403652:	4b1a      	ldr	r3, [pc, #104]	; (4036bc <task_execute+0x158>)
  403654:	4798      	blx	r3
  403656:	e790      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 2 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  403658:	2104      	movs	r1, #4
  40365a:	4816      	ldr	r0, [pc, #88]	; (4036b4 <task_execute+0x150>)
  40365c:	4b16      	ldr	r3, [pc, #88]	; (4036b8 <task_execute+0x154>)
  40365e:	4798      	blx	r3
  403660:	e78b      	b.n	40357a <task_execute+0x16>
        else if (strcmp(command, "led 3 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  403662:	2104      	movs	r1, #4
  403664:	4813      	ldr	r0, [pc, #76]	; (4036b4 <task_execute+0x150>)
  403666:	4b15      	ldr	r3, [pc, #84]	; (4036bc <task_execute+0x158>)
  403668:	4798      	blx	r3
  40366a:	e786      	b.n	40357a <task_execute+0x16>
  40366c:	400e1200 	.word	0x400e1200
  403670:	400e0e00 	.word	0x400e0e00
  403674:	00403539 	.word	0x00403539
  403678:	20400d28 	.word	0x20400d28
  40367c:	00401a75 	.word	0x00401a75
  403680:	0040a3f0 	.word	0x0040a3f0
  403684:	00403afd 	.word	0x00403afd
  403688:	0040a40c 	.word	0x0040a40c
  40368c:	004044a9 	.word	0x004044a9
  403690:	0040a41c 	.word	0x0040a41c
  403694:	0040a42c 	.word	0x0040a42c
  403698:	0040a43c 	.word	0x0040a43c
  40369c:	0040a44c 	.word	0x0040a44c
  4036a0:	0040a458 	.word	0x0040a458
  4036a4:	0040a464 	.word	0x0040a464
  4036a8:	0040a470 	.word	0x0040a470
  4036ac:	0040a47c 	.word	0x0040a47c
  4036b0:	0040a488 	.word	0x0040a488
  4036b4:	400e1000 	.word	0x400e1000
  4036b8:	00400469 	.word	0x00400469
  4036bc:	00400465 	.word	0x00400465

004036c0 <task_led>:
static void task_led(void *pvParameters) {
  4036c0:	b580      	push	{r7, lr}
  4036c2:	b082      	sub	sp, #8
  xSemaphore = xSemaphoreCreateBinary();
  4036c4:	2203      	movs	r2, #3
  4036c6:	2100      	movs	r1, #0
  4036c8:	2001      	movs	r0, #1
  4036ca:	4b1d      	ldr	r3, [pc, #116]	; (403740 <task_led+0x80>)
  4036cc:	4798      	blx	r3
  4036ce:	4d1d      	ldr	r5, [pc, #116]	; (403744 <task_led+0x84>)
  4036d0:	6028      	str	r0, [r5, #0]
  pmc_enable_periph_clk(BUT1_PIO_ID);
  4036d2:	2010      	movs	r0, #16
  4036d4:	4b1c      	ldr	r3, [pc, #112]	; (403748 <task_led+0x88>)
  4036d6:	4798      	blx	r3
  pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP);
  4036d8:	4c1c      	ldr	r4, [pc, #112]	; (40374c <task_led+0x8c>)
  4036da:	2301      	movs	r3, #1
  4036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4036e0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4036e4:	4620      	mov	r0, r4
  4036e6:	4e1a      	ldr	r6, [pc, #104]	; (403750 <task_led+0x90>)
  4036e8:	47b0      	blx	r6
  pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  4036ea:	4b1a      	ldr	r3, [pc, #104]	; (403754 <task_led+0x94>)
  4036ec:	9300      	str	r3, [sp, #0]
  4036ee:	2350      	movs	r3, #80	; 0x50
  4036f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4036f4:	2110      	movs	r1, #16
  4036f6:	4620      	mov	r0, r4
  4036f8:	4e17      	ldr	r6, [pc, #92]	; (403758 <task_led+0x98>)
  4036fa:	47b0      	blx	r6
  pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  4036fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403700:	4620      	mov	r0, r4
  403702:	4b16      	ldr	r3, [pc, #88]	; (40375c <task_led+0x9c>)
  403704:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403706:	4b16      	ldr	r3, [pc, #88]	; (403760 <task_led+0xa0>)
  403708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40370c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40370e:	2280      	movs	r2, #128	; 0x80
  403710:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  if (xSemaphore == NULL)
  403714:	682b      	ldr	r3, [r5, #0]
  403716:	b913      	cbnz	r3, 40371e <task_led+0x5e>
    printf("falha em criar o semaforo \n");
  403718:	4812      	ldr	r0, [pc, #72]	; (403764 <task_led+0xa4>)
  40371a:	4b13      	ldr	r3, [pc, #76]	; (403768 <task_led+0xa8>)
  40371c:	4798      	blx	r3
    if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  40371e:	4e09      	ldr	r6, [pc, #36]	; (403744 <task_led+0x84>)
  403720:	4d12      	ldr	r5, [pc, #72]	; (40376c <task_led+0xac>)
      led_toggle(LED_PIO,LED_PIO_ID, LED_PIO_IDX_MASK);
  403722:	4f13      	ldr	r7, [pc, #76]	; (403770 <task_led+0xb0>)
    if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  403724:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  403728:	4621      	mov	r1, r4
  40372a:	6830      	ldr	r0, [r6, #0]
  40372c:	47a8      	blx	r5
  40372e:	2801      	cmp	r0, #1
  403730:	d1fa      	bne.n	403728 <task_led+0x68>
      led_toggle(LED_PIO,LED_PIO_ID, LED_PIO_IDX_MASK);
  403732:	f44f 7280 	mov.w	r2, #256	; 0x100
  403736:	210c      	movs	r1, #12
  403738:	4638      	mov	r0, r7
  40373a:	4b0e      	ldr	r3, [pc, #56]	; (403774 <task_led+0xb4>)
  40373c:	4798      	blx	r3
  40373e:	e7f1      	b.n	403724 <task_led+0x64>
  403740:	00401631 	.word	0x00401631
  403744:	20400d20 	.word	0x20400d20
  403748:	0040088d 	.word	0x0040088d
  40374c:	400e1400 	.word	0x400e1400
  403750:	00400579 	.word	0x00400579
  403754:	00403239 	.word	0x00403239
  403758:	00400699 	.word	0x00400699
  40375c:	0040063b 	.word	0x0040063b
  403760:	e000e100 	.word	0xe000e100
  403764:	0040a494 	.word	0x0040a494
  403768:	00403afd 	.word	0x00403afd
  40376c:	00401c0d 	.word	0x00401c0d
  403770:	400e1200 	.word	0x400e1200
  403774:	00403539 	.word	0x00403539

00403778 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403778:	f04f 0380 	mov.w	r3, #128	; 0x80
  40377c:	b672      	cpsid	i
  40377e:	f383 8811 	msr	BASEPRI, r3
  403782:	f3bf 8f6f 	isb	sy
  403786:	f3bf 8f4f 	dsb	sy
  40378a:	b662      	cpsie	i
  40378c:	e7fe      	b.n	40378c <vApplicationMallocFailedHook+0x14>
	...

00403790 <led_init>:
void led_init(void){
  403790:	b570      	push	{r4, r5, r6, lr}
  403792:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED_PIO_ID);
  403794:	200c      	movs	r0, #12
  403796:	4c13      	ldr	r4, [pc, #76]	; (4037e4 <led_init+0x54>)
  403798:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  40379a:	200a      	movs	r0, #10
  40379c:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  40379e:	200c      	movs	r0, #12
  4037a0:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  4037a2:	200b      	movs	r0, #11
  4037a4:	47a0      	blx	r4
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  4037a6:	4e10      	ldr	r6, [pc, #64]	; (4037e8 <led_init+0x58>)
  4037a8:	2400      	movs	r4, #0
  4037aa:	9400      	str	r4, [sp, #0]
  4037ac:	4623      	mov	r3, r4
  4037ae:	4622      	mov	r2, r4
  4037b0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4037b4:	4630      	mov	r0, r6
  4037b6:	4d0d      	ldr	r5, [pc, #52]	; (4037ec <led_init+0x5c>)
  4037b8:	47a8      	blx	r5
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  4037ba:	9400      	str	r4, [sp, #0]
  4037bc:	4623      	mov	r3, r4
  4037be:	4622      	mov	r2, r4
  4037c0:	2101      	movs	r1, #1
  4037c2:	480b      	ldr	r0, [pc, #44]	; (4037f0 <led_init+0x60>)
  4037c4:	47a8      	blx	r5
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  4037c6:	9400      	str	r4, [sp, #0]
  4037c8:	4623      	mov	r3, r4
  4037ca:	4622      	mov	r2, r4
  4037cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4037d0:	4630      	mov	r0, r6
  4037d2:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);
  4037d4:	9400      	str	r4, [sp, #0]
  4037d6:	4623      	mov	r3, r4
  4037d8:	4622      	mov	r2, r4
  4037da:	2104      	movs	r1, #4
  4037dc:	4805      	ldr	r0, [pc, #20]	; (4037f4 <led_init+0x64>)
  4037de:	47a8      	blx	r5
}
  4037e0:	b002      	add	sp, #8
  4037e2:	bd70      	pop	{r4, r5, r6, pc}
  4037e4:	0040088d 	.word	0x0040088d
  4037e8:	400e1200 	.word	0x400e1200
  4037ec:	0040054f 	.word	0x0040054f
  4037f0:	400e0e00 	.word	0x400e0e00
  4037f4:	400e1000 	.word	0x400e1000

004037f8 <USART1_Handler>:
void USART1_Handler(void){
  4037f8:	b570      	push	{r4, r5, r6, lr}
  4037fa:	b082      	sub	sp, #8
  uint32_t ret = usart_get_status(USART1);
  4037fc:	4810      	ldr	r0, [pc, #64]	; (403840 <USART1_Handler+0x48>)
  4037fe:	4b11      	ldr	r3, [pc, #68]	; (403844 <USART1_Handler+0x4c>)
  403800:	4798      	blx	r3
  403802:	4604      	mov	r4, r0
  printf("entrou em USART1_HANDLER \n");
  403804:	4810      	ldr	r0, [pc, #64]	; (403848 <USART1_Handler+0x50>)
  403806:	4b11      	ldr	r3, [pc, #68]	; (40384c <USART1_Handler+0x54>)
  403808:	4798      	blx	r3
  if(ret & US_IER_RXRDY){
  40380a:	f014 0f01 	tst.w	r4, #1
  40380e:	d101      	bne.n	403814 <USART1_Handler+0x1c>
}
  403810:	b002      	add	sp, #8
  403812:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  403814:	ac02      	add	r4, sp, #8
  403816:	2300      	movs	r3, #0
  403818:	f844 3d08 	str.w	r3, [r4, #-8]!
		while (usart_read(p_usart, &val));
  40381c:	4e08      	ldr	r6, [pc, #32]	; (403840 <USART1_Handler+0x48>)
  40381e:	4d0c      	ldr	r5, [pc, #48]	; (403850 <USART1_Handler+0x58>)
  403820:	4621      	mov	r1, r4
  403822:	4630      	mov	r0, r6
  403824:	47a8      	blx	r5
  403826:	2800      	cmp	r0, #0
  403828:	d1fa      	bne.n	403820 <USART1_Handler+0x28>
		*data = (uint8_t)(val & 0xFF);
  40382a:	a902      	add	r1, sp, #8
  40382c:	9b00      	ldr	r3, [sp, #0]
  40382e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	  xQueueSendFromISR(xQueueChar, &c, 0);
  403832:	2300      	movs	r3, #0
  403834:	461a      	mov	r2, r3
  403836:	4807      	ldr	r0, [pc, #28]	; (403854 <USART1_Handler+0x5c>)
  403838:	6800      	ldr	r0, [r0, #0]
  40383a:	4c07      	ldr	r4, [pc, #28]	; (403858 <USART1_Handler+0x60>)
  40383c:	47a0      	blx	r4
}
  40383e:	e7e7      	b.n	403810 <USART1_Handler+0x18>
  403840:	40028000 	.word	0x40028000
  403844:	00400c7d 	.word	0x00400c7d
  403848:	0040a2b0 	.word	0x0040a2b0
  40384c:	00403afd 	.word	0x00403afd
  403850:	00400c97 	.word	0x00400c97
  403854:	20400d24 	.word	0x20400d24
  403858:	0040187d 	.word	0x0040187d

0040385c <main>:
}



int main(void)
{
  40385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403860:	b089      	sub	sp, #36	; 0x24
	// Criar a fila aqui!
	xQueueChar = xQueueCreate (32, sizeof(char));
  403862:	2200      	movs	r2, #0
  403864:	2101      	movs	r1, #1
  403866:	2020      	movs	r0, #32
  403868:	4c61      	ldr	r4, [pc, #388]	; (4039f0 <main+0x194>)
  40386a:	47a0      	blx	r4
  40386c:	4b61      	ldr	r3, [pc, #388]	; (4039f4 <main+0x198>)
  40386e:	6018      	str	r0, [r3, #0]
	xQueueCommand = xQueueCreate (5, sizeof(char)*32);
  403870:	2200      	movs	r2, #0
  403872:	2120      	movs	r1, #32
  403874:	2005      	movs	r0, #5
  403876:	47a0      	blx	r4
  403878:	4b5f      	ldr	r3, [pc, #380]	; (4039f8 <main+0x19c>)
  40387a:	6018      	str	r0, [r3, #0]

	/* Initialize the SAM system */
	sysclk_init();
  40387c:	4b5f      	ldr	r3, [pc, #380]	; (4039fc <main+0x1a0>)
  40387e:	4798      	blx	r3
	board_init();
  403880:	4b5f      	ldr	r3, [pc, #380]	; (403a00 <main+0x1a4>)
  403882:	4798      	blx	r3
	led_init();
  403884:	4b5f      	ldr	r3, [pc, #380]	; (403a04 <main+0x1a8>)
  403886:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403888:	200b      	movs	r0, #11
  40388a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 403a98 <main+0x23c>
  40388e:	47c0      	blx	r8
  403890:	200a      	movs	r0, #10
  403892:	47c0      	blx	r8
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4); // RX
  403894:	2210      	movs	r2, #16
  403896:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40389a:	485b      	ldr	r0, [pc, #364]	; (403a08 <main+0x1ac>)
  40389c:	4c5b      	ldr	r4, [pc, #364]	; (403a0c <main+0x1b0>)
  40389e:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  4038a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4038a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4038a8:	4859      	ldr	r0, [pc, #356]	; (403a10 <main+0x1b4>)
  4038aa:	47a0      	blx	r4
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4038ac:	4a59      	ldr	r2, [pc, #356]	; (403a14 <main+0x1b8>)
  4038ae:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4038b2:	f043 0310 	orr.w	r3, r3, #16
  4038b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  4038ba:	200e      	movs	r0, #14
  4038bc:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4038be:	4b56      	ldr	r3, [pc, #344]	; (403a18 <main+0x1bc>)
  4038c0:	4a56      	ldr	r2, [pc, #344]	; (403a1c <main+0x1c0>)
  4038c2:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4038c4:	4e56      	ldr	r6, [pc, #344]	; (403a20 <main+0x1c4>)
  4038c6:	4f57      	ldr	r7, [pc, #348]	; (403a24 <main+0x1c8>)
  4038c8:	6037      	str	r7, [r6, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4038ca:	4d57      	ldr	r5, [pc, #348]	; (403a28 <main+0x1cc>)
  4038cc:	4b57      	ldr	r3, [pc, #348]	; (403a2c <main+0x1d0>)
  4038ce:	602b      	str	r3, [r5, #0]
	usart_settings.baudrate = opt->baudrate;
  4038d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4038d4:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  4038d6:	23c0      	movs	r3, #192	; 0xc0
  4038d8:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  4038da:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4038de:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  4038e0:	2400      	movs	r4, #0
  4038e2:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4038e4:	9406      	str	r4, [sp, #24]
  4038e6:	200e      	movs	r0, #14
  4038e8:	47c0      	blx	r8
		usart_init_rs232(p_usart, &usart_settings,
  4038ea:	4a51      	ldr	r2, [pc, #324]	; (403a30 <main+0x1d4>)
  4038ec:	a902      	add	r1, sp, #8
  4038ee:	484b      	ldr	r0, [pc, #300]	; (403a1c <main+0x1c0>)
  4038f0:	4b50      	ldr	r3, [pc, #320]	; (403a34 <main+0x1d8>)
  4038f2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4038f4:	4849      	ldr	r0, [pc, #292]	; (403a1c <main+0x1c0>)
  4038f6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 403a9c <main+0x240>
  4038fa:	47c8      	blx	r9
		usart_enable_rx(p_usart);
  4038fc:	4847      	ldr	r0, [pc, #284]	; (403a1c <main+0x1c0>)
  4038fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 403aa0 <main+0x244>
  403902:	47c0      	blx	r8
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403904:	f8df b19c 	ldr.w	fp, [pc, #412]	; 403aa4 <main+0x248>
  403908:	f8db 3000 	ldr.w	r3, [fp]
  40390c:	4621      	mov	r1, r4
  40390e:	6898      	ldr	r0, [r3, #8]
  403910:	f8df a194 	ldr.w	sl, [pc, #404]	; 403aa8 <main+0x24c>
  403914:	47d0      	blx	sl
	setbuf(stdin, NULL);
  403916:	f8db 3000 	ldr.w	r3, [fp]
  40391a:	4621      	mov	r1, r4
  40391c:	6858      	ldr	r0, [r3, #4]
  40391e:	47d0      	blx	sl
  usart_enable_tx(USART1);
  403920:	483e      	ldr	r0, [pc, #248]	; (403a1c <main+0x1c0>)
  403922:	47c8      	blx	r9
  usart_enable_rx(USART1);
  403924:	483d      	ldr	r0, [pc, #244]	; (403a1c <main+0x1c0>)
  403926:	47c0      	blx	r8
  ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403928:	6037      	str	r7, [r6, #0]
  ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40392a:	4b40      	ldr	r3, [pc, #256]	; (403a2c <main+0x1d0>)
  40392c:	602b      	str	r3, [r5, #0]
  usart_enable_interrupt(USART1, US_IER_RXRDY);
  40392e:	2101      	movs	r1, #1
  403930:	483a      	ldr	r0, [pc, #232]	; (403a1c <main+0x1c0>)
  403932:	4b41      	ldr	r3, [pc, #260]	; (403a38 <main+0x1dc>)
  403934:	4798      	blx	r3
  403936:	4b41      	ldr	r3, [pc, #260]	; (403a3c <main+0x1e0>)
  403938:	2280      	movs	r2, #128	; 0x80
  40393a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40393e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403942:	601a      	str	r2, [r3, #0]
	/* Initialize the console uart */
	//configure_console();
	USART1_init();

	/* Output demo information. */
	printf("-- Freertos Example --\n\r");
  403944:	483e      	ldr	r0, [pc, #248]	; (403a40 <main+0x1e4>)
  403946:	4d3f      	ldr	r5, [pc, #252]	; (403a44 <main+0x1e8>)
  403948:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  40394a:	493f      	ldr	r1, [pc, #252]	; (403a48 <main+0x1ec>)
  40394c:	483f      	ldr	r0, [pc, #252]	; (403a4c <main+0x1f0>)
  40394e:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  403950:	4a3f      	ldr	r2, [pc, #252]	; (403a50 <main+0x1f4>)
  403952:	4940      	ldr	r1, [pc, #256]	; (403a54 <main+0x1f8>)
  403954:	4840      	ldr	r0, [pc, #256]	; (403a58 <main+0x1fc>)
  403956:	47a8      	blx	r5


	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  403958:	9401      	str	r4, [sp, #4]
  40395a:	9400      	str	r4, [sp, #0]
  40395c:	4623      	mov	r3, r4
  40395e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403962:	493e      	ldr	r1, [pc, #248]	; (403a5c <main+0x200>)
  403964:	483e      	ldr	r0, [pc, #248]	; (403a60 <main+0x204>)
  403966:	4c3f      	ldr	r4, [pc, #252]	; (403a64 <main+0x208>)
  403968:	47a0      	blx	r4
  40396a:	2801      	cmp	r0, #1
  40396c:	d001      	beq.n	403972 <main+0x116>
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Monitor task\r\n");
  40396e:	483e      	ldr	r0, [pc, #248]	; (403a68 <main+0x20c>)
  403970:	47a8      	blx	r5
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  403972:	2300      	movs	r3, #0
  403974:	9301      	str	r3, [sp, #4]
  403976:	9300      	str	r3, [sp, #0]
  403978:	f44f 7280 	mov.w	r2, #256	; 0x100
  40397c:	493b      	ldr	r1, [pc, #236]	; (403a6c <main+0x210>)
  40397e:	483c      	ldr	r0, [pc, #240]	; (403a70 <main+0x214>)
  403980:	4c38      	ldr	r4, [pc, #224]	; (403a64 <main+0x208>)
  403982:	47a0      	blx	r4
  403984:	2801      	cmp	r0, #1
  403986:	d002      	beq.n	40398e <main+0x132>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  403988:	483a      	ldr	r0, [pc, #232]	; (403a74 <main+0x218>)
  40398a:	4b2e      	ldr	r3, [pc, #184]	; (403a44 <main+0x1e8>)
  40398c:	4798      	blx	r3
	}

	if (xTaskCreate(task_led1, "Led", TASK_LED1_STACK_SIZE, NULL,
  40398e:	2300      	movs	r3, #0
  403990:	9301      	str	r3, [sp, #4]
  403992:	9300      	str	r3, [sp, #0]
  403994:	f44f 7280 	mov.w	r2, #256	; 0x100
  403998:	4934      	ldr	r1, [pc, #208]	; (403a6c <main+0x210>)
  40399a:	4837      	ldr	r0, [pc, #220]	; (403a78 <main+0x21c>)
  40399c:	4c31      	ldr	r4, [pc, #196]	; (403a64 <main+0x208>)
  40399e:	47a0      	blx	r4
  4039a0:	2801      	cmp	r0, #1
  4039a2:	d002      	beq.n	4039aa <main+0x14e>
			TASK_LED1_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  4039a4:	4833      	ldr	r0, [pc, #204]	; (403a74 <main+0x218>)
  4039a6:	4b27      	ldr	r3, [pc, #156]	; (403a44 <main+0x1e8>)
  4039a8:	4798      	blx	r3
	}	


	if (xTaskCreate(task_uartRX, "uartRx", TASK_UARTRX_STACK_SIZE, NULL,
  4039aa:	2300      	movs	r3, #0
  4039ac:	9301      	str	r3, [sp, #4]
  4039ae:	9300      	str	r3, [sp, #0]
  4039b0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4039b4:	4931      	ldr	r1, [pc, #196]	; (403a7c <main+0x220>)
  4039b6:	4832      	ldr	r0, [pc, #200]	; (403a80 <main+0x224>)
  4039b8:	4c2a      	ldr	r4, [pc, #168]	; (403a64 <main+0x208>)
  4039ba:	47a0      	blx	r4
  4039bc:	2801      	cmp	r0, #1
  4039be:	d002      	beq.n	4039c6 <main+0x16a>
		TASK_UARTRX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test task uartRX\r\n");
  4039c0:	4830      	ldr	r0, [pc, #192]	; (403a84 <main+0x228>)
  4039c2:	4b20      	ldr	r3, [pc, #128]	; (403a44 <main+0x1e8>)
  4039c4:	4798      	blx	r3
	}

	if (xTaskCreate(task_execute, "execute", TASK_EXECUTE_STACK_SIZE, NULL,
  4039c6:	2300      	movs	r3, #0
  4039c8:	9301      	str	r3, [sp, #4]
  4039ca:	9300      	str	r3, [sp, #0]
  4039cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4039d0:	492d      	ldr	r1, [pc, #180]	; (403a88 <main+0x22c>)
  4039d2:	482e      	ldr	r0, [pc, #184]	; (403a8c <main+0x230>)
  4039d4:	4c23      	ldr	r4, [pc, #140]	; (403a64 <main+0x208>)
  4039d6:	47a0      	blx	r4
  4039d8:	2801      	cmp	r0, #1
  4039da:	d002      	beq.n	4039e2 <main+0x186>
		TASK_EXECUTE_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create task execute\r\n");
  4039dc:	482c      	ldr	r0, [pc, #176]	; (403a90 <main+0x234>)
  4039de:	4b19      	ldr	r3, [pc, #100]	; (403a44 <main+0x1e8>)
  4039e0:	4798      	blx	r3
	}


	/* Start the scheduler. */
	vTaskStartScheduler();
  4039e2:	4b2c      	ldr	r3, [pc, #176]	; (403a94 <main+0x238>)
  4039e4:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  4039e6:	2000      	movs	r0, #0
  4039e8:	b009      	add	sp, #36	; 0x24
  4039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039ee:	bf00      	nop
  4039f0:	00401631 	.word	0x00401631
  4039f4:	20400d24 	.word	0x20400d24
  4039f8:	20400d28 	.word	0x20400d28
  4039fc:	004001d5 	.word	0x004001d5
  403a00:	004002d1 	.word	0x004002d1
  403a04:	00403791 	.word	0x00403791
  403a08:	400e1000 	.word	0x400e1000
  403a0c:	00400487 	.word	0x00400487
  403a10:	400e0e00 	.word	0x400e0e00
  403a14:	40088000 	.word	0x40088000
  403a18:	20400cdc 	.word	0x20400cdc
  403a1c:	40028000 	.word	0x40028000
  403a20:	20400cd8 	.word	0x20400cd8
  403a24:	0040334d 	.word	0x0040334d
  403a28:	20400cd4 	.word	0x20400cd4
  403a2c:	00403271 	.word	0x00403271
  403a30:	08f0d180 	.word	0x08f0d180
  403a34:	00400c19 	.word	0x00400c19
  403a38:	00400c79 	.word	0x00400c79
  403a3c:	e000e100 	.word	0xe000e100
  403a40:	0040a2ec 	.word	0x0040a2ec
  403a44:	00403afd 	.word	0x00403afd
  403a48:	0040a308 	.word	0x0040a308
  403a4c:	0040a314 	.word	0x0040a314
  403a50:	0040a31c 	.word	0x0040a31c
  403a54:	0040a328 	.word	0x0040a328
  403a58:	0040a334 	.word	0x0040a334
  403a5c:	0040a34c 	.word	0x0040a34c
  403a60:	004034ed 	.word	0x004034ed
  403a64:	00401ff1 	.word	0x00401ff1
  403a68:	0040a354 	.word	0x0040a354
  403a6c:	0040a374 	.word	0x0040a374
  403a70:	004036c1 	.word	0x004036c1
  403a74:	0040a378 	.word	0x0040a378
  403a78:	004034a9 	.word	0x004034a9
  403a7c:	0040a39c 	.word	0x0040a39c
  403a80:	00403421 	.word	0x00403421
  403a84:	0040a3a4 	.word	0x0040a3a4
  403a88:	0040a3c8 	.word	0x0040a3c8
  403a8c:	00403565 	.word	0x00403565
  403a90:	0040a3d0 	.word	0x0040a3d0
  403a94:	0040226d 	.word	0x0040226d
  403a98:	0040088d 	.word	0x0040088d
  403a9c:	00400c6d 	.word	0x00400c6d
  403aa0:	00400c73 	.word	0x00400c73
  403aa4:	2040000c 	.word	0x2040000c
  403aa8:	004042b1 	.word	0x004042b1

00403aac <__libc_init_array>:
  403aac:	b570      	push	{r4, r5, r6, lr}
  403aae:	4e0f      	ldr	r6, [pc, #60]	; (403aec <__libc_init_array+0x40>)
  403ab0:	4d0f      	ldr	r5, [pc, #60]	; (403af0 <__libc_init_array+0x44>)
  403ab2:	1b76      	subs	r6, r6, r5
  403ab4:	10b6      	asrs	r6, r6, #2
  403ab6:	bf18      	it	ne
  403ab8:	2400      	movne	r4, #0
  403aba:	d005      	beq.n	403ac8 <__libc_init_array+0x1c>
  403abc:	3401      	adds	r4, #1
  403abe:	f855 3b04 	ldr.w	r3, [r5], #4
  403ac2:	4798      	blx	r3
  403ac4:	42a6      	cmp	r6, r4
  403ac6:	d1f9      	bne.n	403abc <__libc_init_array+0x10>
  403ac8:	4e0a      	ldr	r6, [pc, #40]	; (403af4 <__libc_init_array+0x48>)
  403aca:	4d0b      	ldr	r5, [pc, #44]	; (403af8 <__libc_init_array+0x4c>)
  403acc:	1b76      	subs	r6, r6, r5
  403ace:	f006 fe73 	bl	40a7b8 <_init>
  403ad2:	10b6      	asrs	r6, r6, #2
  403ad4:	bf18      	it	ne
  403ad6:	2400      	movne	r4, #0
  403ad8:	d006      	beq.n	403ae8 <__libc_init_array+0x3c>
  403ada:	3401      	adds	r4, #1
  403adc:	f855 3b04 	ldr.w	r3, [r5], #4
  403ae0:	4798      	blx	r3
  403ae2:	42a6      	cmp	r6, r4
  403ae4:	d1f9      	bne.n	403ada <__libc_init_array+0x2e>
  403ae6:	bd70      	pop	{r4, r5, r6, pc}
  403ae8:	bd70      	pop	{r4, r5, r6, pc}
  403aea:	bf00      	nop
  403aec:	0040a7c4 	.word	0x0040a7c4
  403af0:	0040a7c4 	.word	0x0040a7c4
  403af4:	0040a7cc 	.word	0x0040a7cc
  403af8:	0040a7c4 	.word	0x0040a7c4

00403afc <iprintf>:
  403afc:	b40f      	push	{r0, r1, r2, r3}
  403afe:	b500      	push	{lr}
  403b00:	4907      	ldr	r1, [pc, #28]	; (403b20 <iprintf+0x24>)
  403b02:	b083      	sub	sp, #12
  403b04:	ab04      	add	r3, sp, #16
  403b06:	6808      	ldr	r0, [r1, #0]
  403b08:	f853 2b04 	ldr.w	r2, [r3], #4
  403b0c:	6881      	ldr	r1, [r0, #8]
  403b0e:	9301      	str	r3, [sp, #4]
  403b10:	f002 f972 	bl	405df8 <_vfiprintf_r>
  403b14:	b003      	add	sp, #12
  403b16:	f85d eb04 	ldr.w	lr, [sp], #4
  403b1a:	b004      	add	sp, #16
  403b1c:	4770      	bx	lr
  403b1e:	bf00      	nop
  403b20:	2040000c 	.word	0x2040000c

00403b24 <malloc>:
  403b24:	4b02      	ldr	r3, [pc, #8]	; (403b30 <malloc+0xc>)
  403b26:	4601      	mov	r1, r0
  403b28:	6818      	ldr	r0, [r3, #0]
  403b2a:	f000 b80b 	b.w	403b44 <_malloc_r>
  403b2e:	bf00      	nop
  403b30:	2040000c 	.word	0x2040000c

00403b34 <free>:
  403b34:	4b02      	ldr	r3, [pc, #8]	; (403b40 <free+0xc>)
  403b36:	4601      	mov	r1, r0
  403b38:	6818      	ldr	r0, [r3, #0]
  403b3a:	f004 ba39 	b.w	407fb0 <_free_r>
  403b3e:	bf00      	nop
  403b40:	2040000c 	.word	0x2040000c

00403b44 <_malloc_r>:
  403b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b48:	f101 060b 	add.w	r6, r1, #11
  403b4c:	2e16      	cmp	r6, #22
  403b4e:	b083      	sub	sp, #12
  403b50:	4605      	mov	r5, r0
  403b52:	f240 809e 	bls.w	403c92 <_malloc_r+0x14e>
  403b56:	f036 0607 	bics.w	r6, r6, #7
  403b5a:	f100 80bd 	bmi.w	403cd8 <_malloc_r+0x194>
  403b5e:	42b1      	cmp	r1, r6
  403b60:	f200 80ba 	bhi.w	403cd8 <_malloc_r+0x194>
  403b64:	f000 fb86 	bl	404274 <__malloc_lock>
  403b68:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403b6c:	f0c0 8293 	bcc.w	404096 <_malloc_r+0x552>
  403b70:	0a73      	lsrs	r3, r6, #9
  403b72:	f000 80b8 	beq.w	403ce6 <_malloc_r+0x1a2>
  403b76:	2b04      	cmp	r3, #4
  403b78:	f200 8179 	bhi.w	403e6e <_malloc_r+0x32a>
  403b7c:	09b3      	lsrs	r3, r6, #6
  403b7e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403b82:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403b86:	00c3      	lsls	r3, r0, #3
  403b88:	4fbf      	ldr	r7, [pc, #764]	; (403e88 <_malloc_r+0x344>)
  403b8a:	443b      	add	r3, r7
  403b8c:	f1a3 0108 	sub.w	r1, r3, #8
  403b90:	685c      	ldr	r4, [r3, #4]
  403b92:	42a1      	cmp	r1, r4
  403b94:	d106      	bne.n	403ba4 <_malloc_r+0x60>
  403b96:	e00c      	b.n	403bb2 <_malloc_r+0x6e>
  403b98:	2a00      	cmp	r2, #0
  403b9a:	f280 80aa 	bge.w	403cf2 <_malloc_r+0x1ae>
  403b9e:	68e4      	ldr	r4, [r4, #12]
  403ba0:	42a1      	cmp	r1, r4
  403ba2:	d006      	beq.n	403bb2 <_malloc_r+0x6e>
  403ba4:	6863      	ldr	r3, [r4, #4]
  403ba6:	f023 0303 	bic.w	r3, r3, #3
  403baa:	1b9a      	subs	r2, r3, r6
  403bac:	2a0f      	cmp	r2, #15
  403bae:	ddf3      	ble.n	403b98 <_malloc_r+0x54>
  403bb0:	4670      	mov	r0, lr
  403bb2:	693c      	ldr	r4, [r7, #16]
  403bb4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403e9c <_malloc_r+0x358>
  403bb8:	4574      	cmp	r4, lr
  403bba:	f000 81ab 	beq.w	403f14 <_malloc_r+0x3d0>
  403bbe:	6863      	ldr	r3, [r4, #4]
  403bc0:	f023 0303 	bic.w	r3, r3, #3
  403bc4:	1b9a      	subs	r2, r3, r6
  403bc6:	2a0f      	cmp	r2, #15
  403bc8:	f300 8190 	bgt.w	403eec <_malloc_r+0x3a8>
  403bcc:	2a00      	cmp	r2, #0
  403bce:	f8c7 e014 	str.w	lr, [r7, #20]
  403bd2:	f8c7 e010 	str.w	lr, [r7, #16]
  403bd6:	f280 809d 	bge.w	403d14 <_malloc_r+0x1d0>
  403bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403bde:	f080 8161 	bcs.w	403ea4 <_malloc_r+0x360>
  403be2:	08db      	lsrs	r3, r3, #3
  403be4:	f103 0c01 	add.w	ip, r3, #1
  403be8:	1099      	asrs	r1, r3, #2
  403bea:	687a      	ldr	r2, [r7, #4]
  403bec:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403bf0:	f8c4 8008 	str.w	r8, [r4, #8]
  403bf4:	2301      	movs	r3, #1
  403bf6:	408b      	lsls	r3, r1
  403bf8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403bfc:	4313      	orrs	r3, r2
  403bfe:	3908      	subs	r1, #8
  403c00:	60e1      	str	r1, [r4, #12]
  403c02:	607b      	str	r3, [r7, #4]
  403c04:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403c08:	f8c8 400c 	str.w	r4, [r8, #12]
  403c0c:	1082      	asrs	r2, r0, #2
  403c0e:	2401      	movs	r4, #1
  403c10:	4094      	lsls	r4, r2
  403c12:	429c      	cmp	r4, r3
  403c14:	f200 808b 	bhi.w	403d2e <_malloc_r+0x1ea>
  403c18:	421c      	tst	r4, r3
  403c1a:	d106      	bne.n	403c2a <_malloc_r+0xe6>
  403c1c:	f020 0003 	bic.w	r0, r0, #3
  403c20:	0064      	lsls	r4, r4, #1
  403c22:	421c      	tst	r4, r3
  403c24:	f100 0004 	add.w	r0, r0, #4
  403c28:	d0fa      	beq.n	403c20 <_malloc_r+0xdc>
  403c2a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403c2e:	46cc      	mov	ip, r9
  403c30:	4680      	mov	r8, r0
  403c32:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403c36:	459c      	cmp	ip, r3
  403c38:	d107      	bne.n	403c4a <_malloc_r+0x106>
  403c3a:	e16d      	b.n	403f18 <_malloc_r+0x3d4>
  403c3c:	2a00      	cmp	r2, #0
  403c3e:	f280 817b 	bge.w	403f38 <_malloc_r+0x3f4>
  403c42:	68db      	ldr	r3, [r3, #12]
  403c44:	459c      	cmp	ip, r3
  403c46:	f000 8167 	beq.w	403f18 <_malloc_r+0x3d4>
  403c4a:	6859      	ldr	r1, [r3, #4]
  403c4c:	f021 0103 	bic.w	r1, r1, #3
  403c50:	1b8a      	subs	r2, r1, r6
  403c52:	2a0f      	cmp	r2, #15
  403c54:	ddf2      	ble.n	403c3c <_malloc_r+0xf8>
  403c56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403c5a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403c5e:	9300      	str	r3, [sp, #0]
  403c60:	199c      	adds	r4, r3, r6
  403c62:	4628      	mov	r0, r5
  403c64:	f046 0601 	orr.w	r6, r6, #1
  403c68:	f042 0501 	orr.w	r5, r2, #1
  403c6c:	605e      	str	r6, [r3, #4]
  403c6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403c72:	f8cc 8008 	str.w	r8, [ip, #8]
  403c76:	617c      	str	r4, [r7, #20]
  403c78:	613c      	str	r4, [r7, #16]
  403c7a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403c7e:	f8c4 e008 	str.w	lr, [r4, #8]
  403c82:	6065      	str	r5, [r4, #4]
  403c84:	505a      	str	r2, [r3, r1]
  403c86:	f000 fafb 	bl	404280 <__malloc_unlock>
  403c8a:	9b00      	ldr	r3, [sp, #0]
  403c8c:	f103 0408 	add.w	r4, r3, #8
  403c90:	e01e      	b.n	403cd0 <_malloc_r+0x18c>
  403c92:	2910      	cmp	r1, #16
  403c94:	d820      	bhi.n	403cd8 <_malloc_r+0x194>
  403c96:	f000 faed 	bl	404274 <__malloc_lock>
  403c9a:	2610      	movs	r6, #16
  403c9c:	2318      	movs	r3, #24
  403c9e:	2002      	movs	r0, #2
  403ca0:	4f79      	ldr	r7, [pc, #484]	; (403e88 <_malloc_r+0x344>)
  403ca2:	443b      	add	r3, r7
  403ca4:	f1a3 0208 	sub.w	r2, r3, #8
  403ca8:	685c      	ldr	r4, [r3, #4]
  403caa:	4294      	cmp	r4, r2
  403cac:	f000 813d 	beq.w	403f2a <_malloc_r+0x3e6>
  403cb0:	6863      	ldr	r3, [r4, #4]
  403cb2:	68e1      	ldr	r1, [r4, #12]
  403cb4:	68a6      	ldr	r6, [r4, #8]
  403cb6:	f023 0303 	bic.w	r3, r3, #3
  403cba:	4423      	add	r3, r4
  403cbc:	4628      	mov	r0, r5
  403cbe:	685a      	ldr	r2, [r3, #4]
  403cc0:	60f1      	str	r1, [r6, #12]
  403cc2:	f042 0201 	orr.w	r2, r2, #1
  403cc6:	608e      	str	r6, [r1, #8]
  403cc8:	605a      	str	r2, [r3, #4]
  403cca:	f000 fad9 	bl	404280 <__malloc_unlock>
  403cce:	3408      	adds	r4, #8
  403cd0:	4620      	mov	r0, r4
  403cd2:	b003      	add	sp, #12
  403cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cd8:	2400      	movs	r4, #0
  403cda:	230c      	movs	r3, #12
  403cdc:	4620      	mov	r0, r4
  403cde:	602b      	str	r3, [r5, #0]
  403ce0:	b003      	add	sp, #12
  403ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ce6:	2040      	movs	r0, #64	; 0x40
  403ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403cec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403cf0:	e74a      	b.n	403b88 <_malloc_r+0x44>
  403cf2:	4423      	add	r3, r4
  403cf4:	68e1      	ldr	r1, [r4, #12]
  403cf6:	685a      	ldr	r2, [r3, #4]
  403cf8:	68a6      	ldr	r6, [r4, #8]
  403cfa:	f042 0201 	orr.w	r2, r2, #1
  403cfe:	60f1      	str	r1, [r6, #12]
  403d00:	4628      	mov	r0, r5
  403d02:	608e      	str	r6, [r1, #8]
  403d04:	605a      	str	r2, [r3, #4]
  403d06:	f000 fabb 	bl	404280 <__malloc_unlock>
  403d0a:	3408      	adds	r4, #8
  403d0c:	4620      	mov	r0, r4
  403d0e:	b003      	add	sp, #12
  403d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d14:	4423      	add	r3, r4
  403d16:	4628      	mov	r0, r5
  403d18:	685a      	ldr	r2, [r3, #4]
  403d1a:	f042 0201 	orr.w	r2, r2, #1
  403d1e:	605a      	str	r2, [r3, #4]
  403d20:	f000 faae 	bl	404280 <__malloc_unlock>
  403d24:	3408      	adds	r4, #8
  403d26:	4620      	mov	r0, r4
  403d28:	b003      	add	sp, #12
  403d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d2e:	68bc      	ldr	r4, [r7, #8]
  403d30:	6863      	ldr	r3, [r4, #4]
  403d32:	f023 0803 	bic.w	r8, r3, #3
  403d36:	45b0      	cmp	r8, r6
  403d38:	d304      	bcc.n	403d44 <_malloc_r+0x200>
  403d3a:	eba8 0306 	sub.w	r3, r8, r6
  403d3e:	2b0f      	cmp	r3, #15
  403d40:	f300 8085 	bgt.w	403e4e <_malloc_r+0x30a>
  403d44:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403ea0 <_malloc_r+0x35c>
  403d48:	4b50      	ldr	r3, [pc, #320]	; (403e8c <_malloc_r+0x348>)
  403d4a:	f8d9 2000 	ldr.w	r2, [r9]
  403d4e:	681b      	ldr	r3, [r3, #0]
  403d50:	3201      	adds	r2, #1
  403d52:	4433      	add	r3, r6
  403d54:	eb04 0a08 	add.w	sl, r4, r8
  403d58:	f000 8155 	beq.w	404006 <_malloc_r+0x4c2>
  403d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403d60:	330f      	adds	r3, #15
  403d62:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403d66:	f02b 0b0f 	bic.w	fp, fp, #15
  403d6a:	4659      	mov	r1, fp
  403d6c:	4628      	mov	r0, r5
  403d6e:	f000 fa8d 	bl	40428c <_sbrk_r>
  403d72:	1c41      	adds	r1, r0, #1
  403d74:	4602      	mov	r2, r0
  403d76:	f000 80fc 	beq.w	403f72 <_malloc_r+0x42e>
  403d7a:	4582      	cmp	sl, r0
  403d7c:	f200 80f7 	bhi.w	403f6e <_malloc_r+0x42a>
  403d80:	4b43      	ldr	r3, [pc, #268]	; (403e90 <_malloc_r+0x34c>)
  403d82:	6819      	ldr	r1, [r3, #0]
  403d84:	4459      	add	r1, fp
  403d86:	6019      	str	r1, [r3, #0]
  403d88:	f000 814d 	beq.w	404026 <_malloc_r+0x4e2>
  403d8c:	f8d9 0000 	ldr.w	r0, [r9]
  403d90:	3001      	adds	r0, #1
  403d92:	bf1b      	ittet	ne
  403d94:	eba2 0a0a 	subne.w	sl, r2, sl
  403d98:	4451      	addne	r1, sl
  403d9a:	f8c9 2000 	streq.w	r2, [r9]
  403d9e:	6019      	strne	r1, [r3, #0]
  403da0:	f012 0107 	ands.w	r1, r2, #7
  403da4:	f000 8115 	beq.w	403fd2 <_malloc_r+0x48e>
  403da8:	f1c1 0008 	rsb	r0, r1, #8
  403dac:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403db0:	4402      	add	r2, r0
  403db2:	3108      	adds	r1, #8
  403db4:	eb02 090b 	add.w	r9, r2, fp
  403db8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403dbc:	eba1 0909 	sub.w	r9, r1, r9
  403dc0:	4649      	mov	r1, r9
  403dc2:	4628      	mov	r0, r5
  403dc4:	9301      	str	r3, [sp, #4]
  403dc6:	9200      	str	r2, [sp, #0]
  403dc8:	f000 fa60 	bl	40428c <_sbrk_r>
  403dcc:	1c43      	adds	r3, r0, #1
  403dce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403dd2:	f000 8143 	beq.w	40405c <_malloc_r+0x518>
  403dd6:	1a80      	subs	r0, r0, r2
  403dd8:	4448      	add	r0, r9
  403dda:	f040 0001 	orr.w	r0, r0, #1
  403dde:	6819      	ldr	r1, [r3, #0]
  403de0:	60ba      	str	r2, [r7, #8]
  403de2:	4449      	add	r1, r9
  403de4:	42bc      	cmp	r4, r7
  403de6:	6050      	str	r0, [r2, #4]
  403de8:	6019      	str	r1, [r3, #0]
  403dea:	d017      	beq.n	403e1c <_malloc_r+0x2d8>
  403dec:	f1b8 0f0f 	cmp.w	r8, #15
  403df0:	f240 80fb 	bls.w	403fea <_malloc_r+0x4a6>
  403df4:	6860      	ldr	r0, [r4, #4]
  403df6:	f1a8 020c 	sub.w	r2, r8, #12
  403dfa:	f022 0207 	bic.w	r2, r2, #7
  403dfe:	eb04 0e02 	add.w	lr, r4, r2
  403e02:	f000 0001 	and.w	r0, r0, #1
  403e06:	f04f 0c05 	mov.w	ip, #5
  403e0a:	4310      	orrs	r0, r2
  403e0c:	2a0f      	cmp	r2, #15
  403e0e:	6060      	str	r0, [r4, #4]
  403e10:	f8ce c004 	str.w	ip, [lr, #4]
  403e14:	f8ce c008 	str.w	ip, [lr, #8]
  403e18:	f200 8117 	bhi.w	40404a <_malloc_r+0x506>
  403e1c:	4b1d      	ldr	r3, [pc, #116]	; (403e94 <_malloc_r+0x350>)
  403e1e:	68bc      	ldr	r4, [r7, #8]
  403e20:	681a      	ldr	r2, [r3, #0]
  403e22:	4291      	cmp	r1, r2
  403e24:	bf88      	it	hi
  403e26:	6019      	strhi	r1, [r3, #0]
  403e28:	4b1b      	ldr	r3, [pc, #108]	; (403e98 <_malloc_r+0x354>)
  403e2a:	681a      	ldr	r2, [r3, #0]
  403e2c:	4291      	cmp	r1, r2
  403e2e:	6862      	ldr	r2, [r4, #4]
  403e30:	bf88      	it	hi
  403e32:	6019      	strhi	r1, [r3, #0]
  403e34:	f022 0203 	bic.w	r2, r2, #3
  403e38:	4296      	cmp	r6, r2
  403e3a:	eba2 0306 	sub.w	r3, r2, r6
  403e3e:	d801      	bhi.n	403e44 <_malloc_r+0x300>
  403e40:	2b0f      	cmp	r3, #15
  403e42:	dc04      	bgt.n	403e4e <_malloc_r+0x30a>
  403e44:	4628      	mov	r0, r5
  403e46:	f000 fa1b 	bl	404280 <__malloc_unlock>
  403e4a:	2400      	movs	r4, #0
  403e4c:	e740      	b.n	403cd0 <_malloc_r+0x18c>
  403e4e:	19a2      	adds	r2, r4, r6
  403e50:	f043 0301 	orr.w	r3, r3, #1
  403e54:	f046 0601 	orr.w	r6, r6, #1
  403e58:	6066      	str	r6, [r4, #4]
  403e5a:	4628      	mov	r0, r5
  403e5c:	60ba      	str	r2, [r7, #8]
  403e5e:	6053      	str	r3, [r2, #4]
  403e60:	f000 fa0e 	bl	404280 <__malloc_unlock>
  403e64:	3408      	adds	r4, #8
  403e66:	4620      	mov	r0, r4
  403e68:	b003      	add	sp, #12
  403e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e6e:	2b14      	cmp	r3, #20
  403e70:	d971      	bls.n	403f56 <_malloc_r+0x412>
  403e72:	2b54      	cmp	r3, #84	; 0x54
  403e74:	f200 80a3 	bhi.w	403fbe <_malloc_r+0x47a>
  403e78:	0b33      	lsrs	r3, r6, #12
  403e7a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403e7e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403e82:	00c3      	lsls	r3, r0, #3
  403e84:	e680      	b.n	403b88 <_malloc_r+0x44>
  403e86:	bf00      	nop
  403e88:	20400438 	.word	0x20400438
  403e8c:	20400cd0 	.word	0x20400cd0
  403e90:	20400ca0 	.word	0x20400ca0
  403e94:	20400cc8 	.word	0x20400cc8
  403e98:	20400ccc 	.word	0x20400ccc
  403e9c:	20400440 	.word	0x20400440
  403ea0:	20400840 	.word	0x20400840
  403ea4:	0a5a      	lsrs	r2, r3, #9
  403ea6:	2a04      	cmp	r2, #4
  403ea8:	d95b      	bls.n	403f62 <_malloc_r+0x41e>
  403eaa:	2a14      	cmp	r2, #20
  403eac:	f200 80ae 	bhi.w	40400c <_malloc_r+0x4c8>
  403eb0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403eb4:	00c9      	lsls	r1, r1, #3
  403eb6:	325b      	adds	r2, #91	; 0x5b
  403eb8:	eb07 0c01 	add.w	ip, r7, r1
  403ebc:	5879      	ldr	r1, [r7, r1]
  403ebe:	f1ac 0c08 	sub.w	ip, ip, #8
  403ec2:	458c      	cmp	ip, r1
  403ec4:	f000 8088 	beq.w	403fd8 <_malloc_r+0x494>
  403ec8:	684a      	ldr	r2, [r1, #4]
  403eca:	f022 0203 	bic.w	r2, r2, #3
  403ece:	4293      	cmp	r3, r2
  403ed0:	d273      	bcs.n	403fba <_malloc_r+0x476>
  403ed2:	6889      	ldr	r1, [r1, #8]
  403ed4:	458c      	cmp	ip, r1
  403ed6:	d1f7      	bne.n	403ec8 <_malloc_r+0x384>
  403ed8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403edc:	687b      	ldr	r3, [r7, #4]
  403ede:	60e2      	str	r2, [r4, #12]
  403ee0:	f8c4 c008 	str.w	ip, [r4, #8]
  403ee4:	6094      	str	r4, [r2, #8]
  403ee6:	f8cc 400c 	str.w	r4, [ip, #12]
  403eea:	e68f      	b.n	403c0c <_malloc_r+0xc8>
  403eec:	19a1      	adds	r1, r4, r6
  403eee:	f046 0c01 	orr.w	ip, r6, #1
  403ef2:	f042 0601 	orr.w	r6, r2, #1
  403ef6:	f8c4 c004 	str.w	ip, [r4, #4]
  403efa:	4628      	mov	r0, r5
  403efc:	6179      	str	r1, [r7, #20]
  403efe:	6139      	str	r1, [r7, #16]
  403f00:	f8c1 e00c 	str.w	lr, [r1, #12]
  403f04:	f8c1 e008 	str.w	lr, [r1, #8]
  403f08:	604e      	str	r6, [r1, #4]
  403f0a:	50e2      	str	r2, [r4, r3]
  403f0c:	f000 f9b8 	bl	404280 <__malloc_unlock>
  403f10:	3408      	adds	r4, #8
  403f12:	e6dd      	b.n	403cd0 <_malloc_r+0x18c>
  403f14:	687b      	ldr	r3, [r7, #4]
  403f16:	e679      	b.n	403c0c <_malloc_r+0xc8>
  403f18:	f108 0801 	add.w	r8, r8, #1
  403f1c:	f018 0f03 	tst.w	r8, #3
  403f20:	f10c 0c08 	add.w	ip, ip, #8
  403f24:	f47f ae85 	bne.w	403c32 <_malloc_r+0xee>
  403f28:	e02d      	b.n	403f86 <_malloc_r+0x442>
  403f2a:	68dc      	ldr	r4, [r3, #12]
  403f2c:	42a3      	cmp	r3, r4
  403f2e:	bf08      	it	eq
  403f30:	3002      	addeq	r0, #2
  403f32:	f43f ae3e 	beq.w	403bb2 <_malloc_r+0x6e>
  403f36:	e6bb      	b.n	403cb0 <_malloc_r+0x16c>
  403f38:	4419      	add	r1, r3
  403f3a:	461c      	mov	r4, r3
  403f3c:	684a      	ldr	r2, [r1, #4]
  403f3e:	68db      	ldr	r3, [r3, #12]
  403f40:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403f44:	f042 0201 	orr.w	r2, r2, #1
  403f48:	604a      	str	r2, [r1, #4]
  403f4a:	4628      	mov	r0, r5
  403f4c:	60f3      	str	r3, [r6, #12]
  403f4e:	609e      	str	r6, [r3, #8]
  403f50:	f000 f996 	bl	404280 <__malloc_unlock>
  403f54:	e6bc      	b.n	403cd0 <_malloc_r+0x18c>
  403f56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403f5a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403f5e:	00c3      	lsls	r3, r0, #3
  403f60:	e612      	b.n	403b88 <_malloc_r+0x44>
  403f62:	099a      	lsrs	r2, r3, #6
  403f64:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403f68:	00c9      	lsls	r1, r1, #3
  403f6a:	3238      	adds	r2, #56	; 0x38
  403f6c:	e7a4      	b.n	403eb8 <_malloc_r+0x374>
  403f6e:	42bc      	cmp	r4, r7
  403f70:	d054      	beq.n	40401c <_malloc_r+0x4d8>
  403f72:	68bc      	ldr	r4, [r7, #8]
  403f74:	6862      	ldr	r2, [r4, #4]
  403f76:	f022 0203 	bic.w	r2, r2, #3
  403f7a:	e75d      	b.n	403e38 <_malloc_r+0x2f4>
  403f7c:	f859 3908 	ldr.w	r3, [r9], #-8
  403f80:	4599      	cmp	r9, r3
  403f82:	f040 8086 	bne.w	404092 <_malloc_r+0x54e>
  403f86:	f010 0f03 	tst.w	r0, #3
  403f8a:	f100 30ff 	add.w	r0, r0, #4294967295
  403f8e:	d1f5      	bne.n	403f7c <_malloc_r+0x438>
  403f90:	687b      	ldr	r3, [r7, #4]
  403f92:	ea23 0304 	bic.w	r3, r3, r4
  403f96:	607b      	str	r3, [r7, #4]
  403f98:	0064      	lsls	r4, r4, #1
  403f9a:	429c      	cmp	r4, r3
  403f9c:	f63f aec7 	bhi.w	403d2e <_malloc_r+0x1ea>
  403fa0:	2c00      	cmp	r4, #0
  403fa2:	f43f aec4 	beq.w	403d2e <_malloc_r+0x1ea>
  403fa6:	421c      	tst	r4, r3
  403fa8:	4640      	mov	r0, r8
  403faa:	f47f ae3e 	bne.w	403c2a <_malloc_r+0xe6>
  403fae:	0064      	lsls	r4, r4, #1
  403fb0:	421c      	tst	r4, r3
  403fb2:	f100 0004 	add.w	r0, r0, #4
  403fb6:	d0fa      	beq.n	403fae <_malloc_r+0x46a>
  403fb8:	e637      	b.n	403c2a <_malloc_r+0xe6>
  403fba:	468c      	mov	ip, r1
  403fbc:	e78c      	b.n	403ed8 <_malloc_r+0x394>
  403fbe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403fc2:	d815      	bhi.n	403ff0 <_malloc_r+0x4ac>
  403fc4:	0bf3      	lsrs	r3, r6, #15
  403fc6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403fca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403fce:	00c3      	lsls	r3, r0, #3
  403fd0:	e5da      	b.n	403b88 <_malloc_r+0x44>
  403fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403fd6:	e6ed      	b.n	403db4 <_malloc_r+0x270>
  403fd8:	687b      	ldr	r3, [r7, #4]
  403fda:	1092      	asrs	r2, r2, #2
  403fdc:	2101      	movs	r1, #1
  403fde:	fa01 f202 	lsl.w	r2, r1, r2
  403fe2:	4313      	orrs	r3, r2
  403fe4:	607b      	str	r3, [r7, #4]
  403fe6:	4662      	mov	r2, ip
  403fe8:	e779      	b.n	403ede <_malloc_r+0x39a>
  403fea:	2301      	movs	r3, #1
  403fec:	6053      	str	r3, [r2, #4]
  403fee:	e729      	b.n	403e44 <_malloc_r+0x300>
  403ff0:	f240 5254 	movw	r2, #1364	; 0x554
  403ff4:	4293      	cmp	r3, r2
  403ff6:	d822      	bhi.n	40403e <_malloc_r+0x4fa>
  403ff8:	0cb3      	lsrs	r3, r6, #18
  403ffa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403ffe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404002:	00c3      	lsls	r3, r0, #3
  404004:	e5c0      	b.n	403b88 <_malloc_r+0x44>
  404006:	f103 0b10 	add.w	fp, r3, #16
  40400a:	e6ae      	b.n	403d6a <_malloc_r+0x226>
  40400c:	2a54      	cmp	r2, #84	; 0x54
  40400e:	d829      	bhi.n	404064 <_malloc_r+0x520>
  404010:	0b1a      	lsrs	r2, r3, #12
  404012:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404016:	00c9      	lsls	r1, r1, #3
  404018:	326e      	adds	r2, #110	; 0x6e
  40401a:	e74d      	b.n	403eb8 <_malloc_r+0x374>
  40401c:	4b20      	ldr	r3, [pc, #128]	; (4040a0 <_malloc_r+0x55c>)
  40401e:	6819      	ldr	r1, [r3, #0]
  404020:	4459      	add	r1, fp
  404022:	6019      	str	r1, [r3, #0]
  404024:	e6b2      	b.n	403d8c <_malloc_r+0x248>
  404026:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40402a:	2800      	cmp	r0, #0
  40402c:	f47f aeae 	bne.w	403d8c <_malloc_r+0x248>
  404030:	eb08 030b 	add.w	r3, r8, fp
  404034:	68ba      	ldr	r2, [r7, #8]
  404036:	f043 0301 	orr.w	r3, r3, #1
  40403a:	6053      	str	r3, [r2, #4]
  40403c:	e6ee      	b.n	403e1c <_malloc_r+0x2d8>
  40403e:	207f      	movs	r0, #127	; 0x7f
  404040:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404044:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404048:	e59e      	b.n	403b88 <_malloc_r+0x44>
  40404a:	f104 0108 	add.w	r1, r4, #8
  40404e:	4628      	mov	r0, r5
  404050:	9300      	str	r3, [sp, #0]
  404052:	f003 ffad 	bl	407fb0 <_free_r>
  404056:	9b00      	ldr	r3, [sp, #0]
  404058:	6819      	ldr	r1, [r3, #0]
  40405a:	e6df      	b.n	403e1c <_malloc_r+0x2d8>
  40405c:	2001      	movs	r0, #1
  40405e:	f04f 0900 	mov.w	r9, #0
  404062:	e6bc      	b.n	403dde <_malloc_r+0x29a>
  404064:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404068:	d805      	bhi.n	404076 <_malloc_r+0x532>
  40406a:	0bda      	lsrs	r2, r3, #15
  40406c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404070:	00c9      	lsls	r1, r1, #3
  404072:	3277      	adds	r2, #119	; 0x77
  404074:	e720      	b.n	403eb8 <_malloc_r+0x374>
  404076:	f240 5154 	movw	r1, #1364	; 0x554
  40407a:	428a      	cmp	r2, r1
  40407c:	d805      	bhi.n	40408a <_malloc_r+0x546>
  40407e:	0c9a      	lsrs	r2, r3, #18
  404080:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404084:	00c9      	lsls	r1, r1, #3
  404086:	327c      	adds	r2, #124	; 0x7c
  404088:	e716      	b.n	403eb8 <_malloc_r+0x374>
  40408a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40408e:	227e      	movs	r2, #126	; 0x7e
  404090:	e712      	b.n	403eb8 <_malloc_r+0x374>
  404092:	687b      	ldr	r3, [r7, #4]
  404094:	e780      	b.n	403f98 <_malloc_r+0x454>
  404096:	08f0      	lsrs	r0, r6, #3
  404098:	f106 0308 	add.w	r3, r6, #8
  40409c:	e600      	b.n	403ca0 <_malloc_r+0x15c>
  40409e:	bf00      	nop
  4040a0:	20400ca0 	.word	0x20400ca0

004040a4 <memcpy>:
  4040a4:	4684      	mov	ip, r0
  4040a6:	ea41 0300 	orr.w	r3, r1, r0
  4040aa:	f013 0303 	ands.w	r3, r3, #3
  4040ae:	d16d      	bne.n	40418c <memcpy+0xe8>
  4040b0:	3a40      	subs	r2, #64	; 0x40
  4040b2:	d341      	bcc.n	404138 <memcpy+0x94>
  4040b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b8:	f840 3b04 	str.w	r3, [r0], #4
  4040bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c0:	f840 3b04 	str.w	r3, [r0], #4
  4040c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c8:	f840 3b04 	str.w	r3, [r0], #4
  4040cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d0:	f840 3b04 	str.w	r3, [r0], #4
  4040d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d8:	f840 3b04 	str.w	r3, [r0], #4
  4040dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e0:	f840 3b04 	str.w	r3, [r0], #4
  4040e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e8:	f840 3b04 	str.w	r3, [r0], #4
  4040ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4040f0:	f840 3b04 	str.w	r3, [r0], #4
  4040f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040f8:	f840 3b04 	str.w	r3, [r0], #4
  4040fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404100:	f840 3b04 	str.w	r3, [r0], #4
  404104:	f851 3b04 	ldr.w	r3, [r1], #4
  404108:	f840 3b04 	str.w	r3, [r0], #4
  40410c:	f851 3b04 	ldr.w	r3, [r1], #4
  404110:	f840 3b04 	str.w	r3, [r0], #4
  404114:	f851 3b04 	ldr.w	r3, [r1], #4
  404118:	f840 3b04 	str.w	r3, [r0], #4
  40411c:	f851 3b04 	ldr.w	r3, [r1], #4
  404120:	f840 3b04 	str.w	r3, [r0], #4
  404124:	f851 3b04 	ldr.w	r3, [r1], #4
  404128:	f840 3b04 	str.w	r3, [r0], #4
  40412c:	f851 3b04 	ldr.w	r3, [r1], #4
  404130:	f840 3b04 	str.w	r3, [r0], #4
  404134:	3a40      	subs	r2, #64	; 0x40
  404136:	d2bd      	bcs.n	4040b4 <memcpy+0x10>
  404138:	3230      	adds	r2, #48	; 0x30
  40413a:	d311      	bcc.n	404160 <memcpy+0xbc>
  40413c:	f851 3b04 	ldr.w	r3, [r1], #4
  404140:	f840 3b04 	str.w	r3, [r0], #4
  404144:	f851 3b04 	ldr.w	r3, [r1], #4
  404148:	f840 3b04 	str.w	r3, [r0], #4
  40414c:	f851 3b04 	ldr.w	r3, [r1], #4
  404150:	f840 3b04 	str.w	r3, [r0], #4
  404154:	f851 3b04 	ldr.w	r3, [r1], #4
  404158:	f840 3b04 	str.w	r3, [r0], #4
  40415c:	3a10      	subs	r2, #16
  40415e:	d2ed      	bcs.n	40413c <memcpy+0x98>
  404160:	320c      	adds	r2, #12
  404162:	d305      	bcc.n	404170 <memcpy+0xcc>
  404164:	f851 3b04 	ldr.w	r3, [r1], #4
  404168:	f840 3b04 	str.w	r3, [r0], #4
  40416c:	3a04      	subs	r2, #4
  40416e:	d2f9      	bcs.n	404164 <memcpy+0xc0>
  404170:	3204      	adds	r2, #4
  404172:	d008      	beq.n	404186 <memcpy+0xe2>
  404174:	07d2      	lsls	r2, r2, #31
  404176:	bf1c      	itt	ne
  404178:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40417c:	f800 3b01 	strbne.w	r3, [r0], #1
  404180:	d301      	bcc.n	404186 <memcpy+0xe2>
  404182:	880b      	ldrh	r3, [r1, #0]
  404184:	8003      	strh	r3, [r0, #0]
  404186:	4660      	mov	r0, ip
  404188:	4770      	bx	lr
  40418a:	bf00      	nop
  40418c:	2a08      	cmp	r2, #8
  40418e:	d313      	bcc.n	4041b8 <memcpy+0x114>
  404190:	078b      	lsls	r3, r1, #30
  404192:	d08d      	beq.n	4040b0 <memcpy+0xc>
  404194:	f010 0303 	ands.w	r3, r0, #3
  404198:	d08a      	beq.n	4040b0 <memcpy+0xc>
  40419a:	f1c3 0304 	rsb	r3, r3, #4
  40419e:	1ad2      	subs	r2, r2, r3
  4041a0:	07db      	lsls	r3, r3, #31
  4041a2:	bf1c      	itt	ne
  4041a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4041a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4041ac:	d380      	bcc.n	4040b0 <memcpy+0xc>
  4041ae:	f831 3b02 	ldrh.w	r3, [r1], #2
  4041b2:	f820 3b02 	strh.w	r3, [r0], #2
  4041b6:	e77b      	b.n	4040b0 <memcpy+0xc>
  4041b8:	3a04      	subs	r2, #4
  4041ba:	d3d9      	bcc.n	404170 <memcpy+0xcc>
  4041bc:	3a01      	subs	r2, #1
  4041be:	f811 3b01 	ldrb.w	r3, [r1], #1
  4041c2:	f800 3b01 	strb.w	r3, [r0], #1
  4041c6:	d2f9      	bcs.n	4041bc <memcpy+0x118>
  4041c8:	780b      	ldrb	r3, [r1, #0]
  4041ca:	7003      	strb	r3, [r0, #0]
  4041cc:	784b      	ldrb	r3, [r1, #1]
  4041ce:	7043      	strb	r3, [r0, #1]
  4041d0:	788b      	ldrb	r3, [r1, #2]
  4041d2:	7083      	strb	r3, [r0, #2]
  4041d4:	4660      	mov	r0, ip
  4041d6:	4770      	bx	lr

004041d8 <memset>:
  4041d8:	b470      	push	{r4, r5, r6}
  4041da:	0786      	lsls	r6, r0, #30
  4041dc:	d046      	beq.n	40426c <memset+0x94>
  4041de:	1e54      	subs	r4, r2, #1
  4041e0:	2a00      	cmp	r2, #0
  4041e2:	d041      	beq.n	404268 <memset+0x90>
  4041e4:	b2ca      	uxtb	r2, r1
  4041e6:	4603      	mov	r3, r0
  4041e8:	e002      	b.n	4041f0 <memset+0x18>
  4041ea:	f114 34ff 	adds.w	r4, r4, #4294967295
  4041ee:	d33b      	bcc.n	404268 <memset+0x90>
  4041f0:	f803 2b01 	strb.w	r2, [r3], #1
  4041f4:	079d      	lsls	r5, r3, #30
  4041f6:	d1f8      	bne.n	4041ea <memset+0x12>
  4041f8:	2c03      	cmp	r4, #3
  4041fa:	d92e      	bls.n	40425a <memset+0x82>
  4041fc:	b2cd      	uxtb	r5, r1
  4041fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404202:	2c0f      	cmp	r4, #15
  404204:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404208:	d919      	bls.n	40423e <memset+0x66>
  40420a:	f103 0210 	add.w	r2, r3, #16
  40420e:	4626      	mov	r6, r4
  404210:	3e10      	subs	r6, #16
  404212:	2e0f      	cmp	r6, #15
  404214:	f842 5c10 	str.w	r5, [r2, #-16]
  404218:	f842 5c0c 	str.w	r5, [r2, #-12]
  40421c:	f842 5c08 	str.w	r5, [r2, #-8]
  404220:	f842 5c04 	str.w	r5, [r2, #-4]
  404224:	f102 0210 	add.w	r2, r2, #16
  404228:	d8f2      	bhi.n	404210 <memset+0x38>
  40422a:	f1a4 0210 	sub.w	r2, r4, #16
  40422e:	f022 020f 	bic.w	r2, r2, #15
  404232:	f004 040f 	and.w	r4, r4, #15
  404236:	3210      	adds	r2, #16
  404238:	2c03      	cmp	r4, #3
  40423a:	4413      	add	r3, r2
  40423c:	d90d      	bls.n	40425a <memset+0x82>
  40423e:	461e      	mov	r6, r3
  404240:	4622      	mov	r2, r4
  404242:	3a04      	subs	r2, #4
  404244:	2a03      	cmp	r2, #3
  404246:	f846 5b04 	str.w	r5, [r6], #4
  40424a:	d8fa      	bhi.n	404242 <memset+0x6a>
  40424c:	1f22      	subs	r2, r4, #4
  40424e:	f022 0203 	bic.w	r2, r2, #3
  404252:	3204      	adds	r2, #4
  404254:	4413      	add	r3, r2
  404256:	f004 0403 	and.w	r4, r4, #3
  40425a:	b12c      	cbz	r4, 404268 <memset+0x90>
  40425c:	b2c9      	uxtb	r1, r1
  40425e:	441c      	add	r4, r3
  404260:	f803 1b01 	strb.w	r1, [r3], #1
  404264:	429c      	cmp	r4, r3
  404266:	d1fb      	bne.n	404260 <memset+0x88>
  404268:	bc70      	pop	{r4, r5, r6}
  40426a:	4770      	bx	lr
  40426c:	4614      	mov	r4, r2
  40426e:	4603      	mov	r3, r0
  404270:	e7c2      	b.n	4041f8 <memset+0x20>
  404272:	bf00      	nop

00404274 <__malloc_lock>:
  404274:	4801      	ldr	r0, [pc, #4]	; (40427c <__malloc_lock+0x8>)
  404276:	f004 b943 	b.w	408500 <__retarget_lock_acquire_recursive>
  40427a:	bf00      	nop
  40427c:	20400d3c 	.word	0x20400d3c

00404280 <__malloc_unlock>:
  404280:	4801      	ldr	r0, [pc, #4]	; (404288 <__malloc_unlock+0x8>)
  404282:	f004 b93f 	b.w	408504 <__retarget_lock_release_recursive>
  404286:	bf00      	nop
  404288:	20400d3c 	.word	0x20400d3c

0040428c <_sbrk_r>:
  40428c:	b538      	push	{r3, r4, r5, lr}
  40428e:	4c07      	ldr	r4, [pc, #28]	; (4042ac <_sbrk_r+0x20>)
  404290:	2300      	movs	r3, #0
  404292:	4605      	mov	r5, r0
  404294:	4608      	mov	r0, r1
  404296:	6023      	str	r3, [r4, #0]
  404298:	f7fc fe3a 	bl	400f10 <_sbrk>
  40429c:	1c43      	adds	r3, r0, #1
  40429e:	d000      	beq.n	4042a2 <_sbrk_r+0x16>
  4042a0:	bd38      	pop	{r3, r4, r5, pc}
  4042a2:	6823      	ldr	r3, [r4, #0]
  4042a4:	2b00      	cmp	r3, #0
  4042a6:	d0fb      	beq.n	4042a0 <_sbrk_r+0x14>
  4042a8:	602b      	str	r3, [r5, #0]
  4042aa:	bd38      	pop	{r3, r4, r5, pc}
  4042ac:	20400d50 	.word	0x20400d50

004042b0 <setbuf>:
  4042b0:	2900      	cmp	r1, #0
  4042b2:	bf0c      	ite	eq
  4042b4:	2202      	moveq	r2, #2
  4042b6:	2200      	movne	r2, #0
  4042b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4042bc:	f000 b800 	b.w	4042c0 <setvbuf>

004042c0 <setvbuf>:
  4042c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4042c4:	4c61      	ldr	r4, [pc, #388]	; (40444c <setvbuf+0x18c>)
  4042c6:	6825      	ldr	r5, [r4, #0]
  4042c8:	b083      	sub	sp, #12
  4042ca:	4604      	mov	r4, r0
  4042cc:	460f      	mov	r7, r1
  4042ce:	4690      	mov	r8, r2
  4042d0:	461e      	mov	r6, r3
  4042d2:	b115      	cbz	r5, 4042da <setvbuf+0x1a>
  4042d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4042d6:	2b00      	cmp	r3, #0
  4042d8:	d064      	beq.n	4043a4 <setvbuf+0xe4>
  4042da:	f1b8 0f02 	cmp.w	r8, #2
  4042de:	d006      	beq.n	4042ee <setvbuf+0x2e>
  4042e0:	f1b8 0f01 	cmp.w	r8, #1
  4042e4:	f200 809f 	bhi.w	404426 <setvbuf+0x166>
  4042e8:	2e00      	cmp	r6, #0
  4042ea:	f2c0 809c 	blt.w	404426 <setvbuf+0x166>
  4042ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4042f0:	07d8      	lsls	r0, r3, #31
  4042f2:	d534      	bpl.n	40435e <setvbuf+0x9e>
  4042f4:	4621      	mov	r1, r4
  4042f6:	4628      	mov	r0, r5
  4042f8:	f003 fcdc 	bl	407cb4 <_fflush_r>
  4042fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4042fe:	b141      	cbz	r1, 404312 <setvbuf+0x52>
  404300:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404304:	4299      	cmp	r1, r3
  404306:	d002      	beq.n	40430e <setvbuf+0x4e>
  404308:	4628      	mov	r0, r5
  40430a:	f003 fe51 	bl	407fb0 <_free_r>
  40430e:	2300      	movs	r3, #0
  404310:	6323      	str	r3, [r4, #48]	; 0x30
  404312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404316:	2200      	movs	r2, #0
  404318:	61a2      	str	r2, [r4, #24]
  40431a:	6062      	str	r2, [r4, #4]
  40431c:	061a      	lsls	r2, r3, #24
  40431e:	d43a      	bmi.n	404396 <setvbuf+0xd6>
  404320:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404324:	f023 0303 	bic.w	r3, r3, #3
  404328:	f1b8 0f02 	cmp.w	r8, #2
  40432c:	81a3      	strh	r3, [r4, #12]
  40432e:	d01d      	beq.n	40436c <setvbuf+0xac>
  404330:	ab01      	add	r3, sp, #4
  404332:	466a      	mov	r2, sp
  404334:	4621      	mov	r1, r4
  404336:	4628      	mov	r0, r5
  404338:	f004 f8e6 	bl	408508 <__swhatbuf_r>
  40433c:	89a3      	ldrh	r3, [r4, #12]
  40433e:	4318      	orrs	r0, r3
  404340:	81a0      	strh	r0, [r4, #12]
  404342:	2e00      	cmp	r6, #0
  404344:	d132      	bne.n	4043ac <setvbuf+0xec>
  404346:	9e00      	ldr	r6, [sp, #0]
  404348:	4630      	mov	r0, r6
  40434a:	f7ff fbeb 	bl	403b24 <malloc>
  40434e:	4607      	mov	r7, r0
  404350:	2800      	cmp	r0, #0
  404352:	d06b      	beq.n	40442c <setvbuf+0x16c>
  404354:	89a3      	ldrh	r3, [r4, #12]
  404356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40435a:	81a3      	strh	r3, [r4, #12]
  40435c:	e028      	b.n	4043b0 <setvbuf+0xf0>
  40435e:	89a3      	ldrh	r3, [r4, #12]
  404360:	0599      	lsls	r1, r3, #22
  404362:	d4c7      	bmi.n	4042f4 <setvbuf+0x34>
  404364:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404366:	f004 f8cb 	bl	408500 <__retarget_lock_acquire_recursive>
  40436a:	e7c3      	b.n	4042f4 <setvbuf+0x34>
  40436c:	2500      	movs	r5, #0
  40436e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404370:	2600      	movs	r6, #0
  404372:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404376:	f043 0302 	orr.w	r3, r3, #2
  40437a:	2001      	movs	r0, #1
  40437c:	60a6      	str	r6, [r4, #8]
  40437e:	07ce      	lsls	r6, r1, #31
  404380:	81a3      	strh	r3, [r4, #12]
  404382:	6022      	str	r2, [r4, #0]
  404384:	6122      	str	r2, [r4, #16]
  404386:	6160      	str	r0, [r4, #20]
  404388:	d401      	bmi.n	40438e <setvbuf+0xce>
  40438a:	0598      	lsls	r0, r3, #22
  40438c:	d53e      	bpl.n	40440c <setvbuf+0x14c>
  40438e:	4628      	mov	r0, r5
  404390:	b003      	add	sp, #12
  404392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404396:	6921      	ldr	r1, [r4, #16]
  404398:	4628      	mov	r0, r5
  40439a:	f003 fe09 	bl	407fb0 <_free_r>
  40439e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043a2:	e7bd      	b.n	404320 <setvbuf+0x60>
  4043a4:	4628      	mov	r0, r5
  4043a6:	f003 fcdd 	bl	407d64 <__sinit>
  4043aa:	e796      	b.n	4042da <setvbuf+0x1a>
  4043ac:	2f00      	cmp	r7, #0
  4043ae:	d0cb      	beq.n	404348 <setvbuf+0x88>
  4043b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4043b2:	2b00      	cmp	r3, #0
  4043b4:	d033      	beq.n	40441e <setvbuf+0x15e>
  4043b6:	9b00      	ldr	r3, [sp, #0]
  4043b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043bc:	6027      	str	r7, [r4, #0]
  4043be:	429e      	cmp	r6, r3
  4043c0:	bf1c      	itt	ne
  4043c2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4043c6:	81a2      	strhne	r2, [r4, #12]
  4043c8:	f1b8 0f01 	cmp.w	r8, #1
  4043cc:	bf04      	itt	eq
  4043ce:	f042 0201 	orreq.w	r2, r2, #1
  4043d2:	81a2      	strheq	r2, [r4, #12]
  4043d4:	b292      	uxth	r2, r2
  4043d6:	f012 0308 	ands.w	r3, r2, #8
  4043da:	6127      	str	r7, [r4, #16]
  4043dc:	6166      	str	r6, [r4, #20]
  4043de:	d00e      	beq.n	4043fe <setvbuf+0x13e>
  4043e0:	07d1      	lsls	r1, r2, #31
  4043e2:	d51a      	bpl.n	40441a <setvbuf+0x15a>
  4043e4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4043e6:	4276      	negs	r6, r6
  4043e8:	2300      	movs	r3, #0
  4043ea:	f015 0501 	ands.w	r5, r5, #1
  4043ee:	61a6      	str	r6, [r4, #24]
  4043f0:	60a3      	str	r3, [r4, #8]
  4043f2:	d009      	beq.n	404408 <setvbuf+0x148>
  4043f4:	2500      	movs	r5, #0
  4043f6:	4628      	mov	r0, r5
  4043f8:	b003      	add	sp, #12
  4043fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4043fe:	60a3      	str	r3, [r4, #8]
  404400:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404402:	f015 0501 	ands.w	r5, r5, #1
  404406:	d1f5      	bne.n	4043f4 <setvbuf+0x134>
  404408:	0593      	lsls	r3, r2, #22
  40440a:	d4c0      	bmi.n	40438e <setvbuf+0xce>
  40440c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40440e:	f004 f879 	bl	408504 <__retarget_lock_release_recursive>
  404412:	4628      	mov	r0, r5
  404414:	b003      	add	sp, #12
  404416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40441a:	60a6      	str	r6, [r4, #8]
  40441c:	e7f0      	b.n	404400 <setvbuf+0x140>
  40441e:	4628      	mov	r0, r5
  404420:	f003 fca0 	bl	407d64 <__sinit>
  404424:	e7c7      	b.n	4043b6 <setvbuf+0xf6>
  404426:	f04f 35ff 	mov.w	r5, #4294967295
  40442a:	e7b0      	b.n	40438e <setvbuf+0xce>
  40442c:	f8dd 9000 	ldr.w	r9, [sp]
  404430:	45b1      	cmp	r9, r6
  404432:	d004      	beq.n	40443e <setvbuf+0x17e>
  404434:	4648      	mov	r0, r9
  404436:	f7ff fb75 	bl	403b24 <malloc>
  40443a:	4607      	mov	r7, r0
  40443c:	b920      	cbnz	r0, 404448 <setvbuf+0x188>
  40443e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404442:	f04f 35ff 	mov.w	r5, #4294967295
  404446:	e792      	b.n	40436e <setvbuf+0xae>
  404448:	464e      	mov	r6, r9
  40444a:	e783      	b.n	404354 <setvbuf+0x94>
  40444c:	2040000c 	.word	0x2040000c

00404450 <sprintf>:
  404450:	b40e      	push	{r1, r2, r3}
  404452:	b5f0      	push	{r4, r5, r6, r7, lr}
  404454:	b09c      	sub	sp, #112	; 0x70
  404456:	ab21      	add	r3, sp, #132	; 0x84
  404458:	490f      	ldr	r1, [pc, #60]	; (404498 <sprintf+0x48>)
  40445a:	f853 2b04 	ldr.w	r2, [r3], #4
  40445e:	9301      	str	r3, [sp, #4]
  404460:	4605      	mov	r5, r0
  404462:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404466:	6808      	ldr	r0, [r1, #0]
  404468:	9502      	str	r5, [sp, #8]
  40446a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40446e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404472:	a902      	add	r1, sp, #8
  404474:	9506      	str	r5, [sp, #24]
  404476:	f8ad 7014 	strh.w	r7, [sp, #20]
  40447a:	9404      	str	r4, [sp, #16]
  40447c:	9407      	str	r4, [sp, #28]
  40447e:	f8ad 6016 	strh.w	r6, [sp, #22]
  404482:	f000 fa4b 	bl	40491c <_svfprintf_r>
  404486:	9b02      	ldr	r3, [sp, #8]
  404488:	2200      	movs	r2, #0
  40448a:	701a      	strb	r2, [r3, #0]
  40448c:	b01c      	add	sp, #112	; 0x70
  40448e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404492:	b003      	add	sp, #12
  404494:	4770      	bx	lr
  404496:	bf00      	nop
  404498:	2040000c 	.word	0x2040000c
  40449c:	00000000 	.word	0x00000000
  4044a0:	eba2 0003 	sub.w	r0, r2, r3
  4044a4:	4770      	bx	lr
  4044a6:	bf00      	nop

004044a8 <strcmp>:
  4044a8:	7802      	ldrb	r2, [r0, #0]
  4044aa:	780b      	ldrb	r3, [r1, #0]
  4044ac:	2a01      	cmp	r2, #1
  4044ae:	bf28      	it	cs
  4044b0:	429a      	cmpcs	r2, r3
  4044b2:	d1f5      	bne.n	4044a0 <sprintf+0x50>
  4044b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4044b8:	ea40 0401 	orr.w	r4, r0, r1
  4044bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4044c0:	f06f 0c00 	mvn.w	ip, #0
  4044c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4044c8:	b312      	cbz	r2, 404510 <strcmp+0x68>
  4044ca:	ea80 0401 	eor.w	r4, r0, r1
  4044ce:	f014 0f07 	tst.w	r4, #7
  4044d2:	d16a      	bne.n	4045aa <strcmp+0x102>
  4044d4:	f000 0407 	and.w	r4, r0, #7
  4044d8:	f020 0007 	bic.w	r0, r0, #7
  4044dc:	f004 0503 	and.w	r5, r4, #3
  4044e0:	f021 0107 	bic.w	r1, r1, #7
  4044e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4044e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4044ec:	f014 0f04 	tst.w	r4, #4
  4044f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4044f4:	fa0c f405 	lsl.w	r4, ip, r5
  4044f8:	ea62 0204 	orn	r2, r2, r4
  4044fc:	ea66 0604 	orn	r6, r6, r4
  404500:	d00a      	beq.n	404518 <strcmp+0x70>
  404502:	ea63 0304 	orn	r3, r3, r4
  404506:	4662      	mov	r2, ip
  404508:	ea67 0704 	orn	r7, r7, r4
  40450c:	4666      	mov	r6, ip
  40450e:	e003      	b.n	404518 <strcmp+0x70>
  404510:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404514:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404518:	fa82 f54c 	uadd8	r5, r2, ip
  40451c:	ea82 0406 	eor.w	r4, r2, r6
  404520:	faa4 f48c 	sel	r4, r4, ip
  404524:	bb6c      	cbnz	r4, 404582 <strcmp+0xda>
  404526:	fa83 f54c 	uadd8	r5, r3, ip
  40452a:	ea83 0507 	eor.w	r5, r3, r7
  40452e:	faa5 f58c 	sel	r5, r5, ip
  404532:	b995      	cbnz	r5, 40455a <strcmp+0xb2>
  404534:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  404538:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40453c:	fa82 f54c 	uadd8	r5, r2, ip
  404540:	ea82 0406 	eor.w	r4, r2, r6
  404544:	faa4 f48c 	sel	r4, r4, ip
  404548:	fa83 f54c 	uadd8	r5, r3, ip
  40454c:	ea83 0507 	eor.w	r5, r3, r7
  404550:	faa5 f58c 	sel	r5, r5, ip
  404554:	4325      	orrs	r5, r4
  404556:	d0db      	beq.n	404510 <strcmp+0x68>
  404558:	b99c      	cbnz	r4, 404582 <strcmp+0xda>
  40455a:	ba2d      	rev	r5, r5
  40455c:	fab5 f485 	clz	r4, r5
  404560:	f024 0407 	bic.w	r4, r4, #7
  404564:	fa27 f104 	lsr.w	r1, r7, r4
  404568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40456c:	fa23 f304 	lsr.w	r3, r3, r4
  404570:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  404574:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404578:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40457c:	eba0 0001 	sub.w	r0, r0, r1
  404580:	4770      	bx	lr
  404582:	ba24      	rev	r4, r4
  404584:	fab4 f484 	clz	r4, r4
  404588:	f024 0407 	bic.w	r4, r4, #7
  40458c:	fa26 f104 	lsr.w	r1, r6, r4
  404590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404594:	fa22 f204 	lsr.w	r2, r2, r4
  404598:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40459c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4045a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4045a4:	eba0 0001 	sub.w	r0, r0, r1
  4045a8:	4770      	bx	lr
  4045aa:	f014 0f03 	tst.w	r4, #3
  4045ae:	d13c      	bne.n	40462a <strcmp+0x182>
  4045b0:	f010 0403 	ands.w	r4, r0, #3
  4045b4:	d128      	bne.n	404608 <strcmp+0x160>
  4045b6:	f850 2b08 	ldr.w	r2, [r0], #8
  4045ba:	f851 3b08 	ldr.w	r3, [r1], #8
  4045be:	fa82 f54c 	uadd8	r5, r2, ip
  4045c2:	ea82 0503 	eor.w	r5, r2, r3
  4045c6:	faa5 f58c 	sel	r5, r5, ip
  4045ca:	b95d      	cbnz	r5, 4045e4 <strcmp+0x13c>
  4045cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4045d4:	fa82 f54c 	uadd8	r5, r2, ip
  4045d8:	ea82 0503 	eor.w	r5, r2, r3
  4045dc:	faa5 f58c 	sel	r5, r5, ip
  4045e0:	2d00      	cmp	r5, #0
  4045e2:	d0e8      	beq.n	4045b6 <strcmp+0x10e>
  4045e4:	ba2d      	rev	r5, r5
  4045e6:	fab5 f485 	clz	r4, r5
  4045ea:	f024 0407 	bic.w	r4, r4, #7
  4045ee:	fa23 f104 	lsr.w	r1, r3, r4
  4045f2:	fa22 f204 	lsr.w	r2, r2, r4
  4045f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4045fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4045fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404602:	eba0 0001 	sub.w	r0, r0, r1
  404606:	4770      	bx	lr
  404608:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40460c:	f020 0003 	bic.w	r0, r0, #3
  404610:	f850 2b08 	ldr.w	r2, [r0], #8
  404614:	f021 0103 	bic.w	r1, r1, #3
  404618:	f851 3b08 	ldr.w	r3, [r1], #8
  40461c:	fa0c f404 	lsl.w	r4, ip, r4
  404620:	ea62 0204 	orn	r2, r2, r4
  404624:	ea63 0304 	orn	r3, r3, r4
  404628:	e7c9      	b.n	4045be <strcmp+0x116>
  40462a:	f010 0403 	ands.w	r4, r0, #3
  40462e:	d01a      	beq.n	404666 <strcmp+0x1be>
  404630:	eba1 0104 	sub.w	r1, r1, r4
  404634:	f020 0003 	bic.w	r0, r0, #3
  404638:	07e4      	lsls	r4, r4, #31
  40463a:	f850 2b04 	ldr.w	r2, [r0], #4
  40463e:	d006      	beq.n	40464e <strcmp+0x1a6>
  404640:	d20f      	bcs.n	404662 <strcmp+0x1ba>
  404642:	788b      	ldrb	r3, [r1, #2]
  404644:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  404648:	1ae4      	subs	r4, r4, r3
  40464a:	d106      	bne.n	40465a <strcmp+0x1b2>
  40464c:	b12b      	cbz	r3, 40465a <strcmp+0x1b2>
  40464e:	78cb      	ldrb	r3, [r1, #3]
  404650:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  404654:	1ae4      	subs	r4, r4, r3
  404656:	d100      	bne.n	40465a <strcmp+0x1b2>
  404658:	b91b      	cbnz	r3, 404662 <strcmp+0x1ba>
  40465a:	4620      	mov	r0, r4
  40465c:	f85d 4b10 	ldr.w	r4, [sp], #16
  404660:	4770      	bx	lr
  404662:	f101 0104 	add.w	r1, r1, #4
  404666:	f850 2b04 	ldr.w	r2, [r0], #4
  40466a:	07cc      	lsls	r4, r1, #31
  40466c:	f021 0103 	bic.w	r1, r1, #3
  404670:	f851 3b04 	ldr.w	r3, [r1], #4
  404674:	d848      	bhi.n	404708 <strcmp+0x260>
  404676:	d224      	bcs.n	4046c2 <strcmp+0x21a>
  404678:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40467c:	fa82 f54c 	uadd8	r5, r2, ip
  404680:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  404684:	faa5 f58c 	sel	r5, r5, ip
  404688:	d10a      	bne.n	4046a0 <strcmp+0x1f8>
  40468a:	b965      	cbnz	r5, 4046a6 <strcmp+0x1fe>
  40468c:	f851 3b04 	ldr.w	r3, [r1], #4
  404690:	ea84 0402 	eor.w	r4, r4, r2
  404694:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  404698:	d10e      	bne.n	4046b8 <strcmp+0x210>
  40469a:	f850 2b04 	ldr.w	r2, [r0], #4
  40469e:	e7eb      	b.n	404678 <strcmp+0x1d0>
  4046a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4046a4:	e055      	b.n	404752 <strcmp+0x2aa>
  4046a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4046aa:	d14d      	bne.n	404748 <strcmp+0x2a0>
  4046ac:	7808      	ldrb	r0, [r1, #0]
  4046ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4046b2:	f1c0 0000 	rsb	r0, r0, #0
  4046b6:	4770      	bx	lr
  4046b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4046bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4046c0:	e047      	b.n	404752 <strcmp+0x2aa>
  4046c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4046c6:	fa82 f54c 	uadd8	r5, r2, ip
  4046ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4046ce:	faa5 f58c 	sel	r5, r5, ip
  4046d2:	d10a      	bne.n	4046ea <strcmp+0x242>
  4046d4:	b965      	cbnz	r5, 4046f0 <strcmp+0x248>
  4046d6:	f851 3b04 	ldr.w	r3, [r1], #4
  4046da:	ea84 0402 	eor.w	r4, r4, r2
  4046de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4046e2:	d10c      	bne.n	4046fe <strcmp+0x256>
  4046e4:	f850 2b04 	ldr.w	r2, [r0], #4
  4046e8:	e7eb      	b.n	4046c2 <strcmp+0x21a>
  4046ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4046ee:	e030      	b.n	404752 <strcmp+0x2aa>
  4046f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4046f4:	d128      	bne.n	404748 <strcmp+0x2a0>
  4046f6:	880b      	ldrh	r3, [r1, #0]
  4046f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4046fc:	e029      	b.n	404752 <strcmp+0x2aa>
  4046fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  404702:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  404706:	e024      	b.n	404752 <strcmp+0x2aa>
  404708:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40470c:	fa82 f54c 	uadd8	r5, r2, ip
  404710:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  404714:	faa5 f58c 	sel	r5, r5, ip
  404718:	d10a      	bne.n	404730 <strcmp+0x288>
  40471a:	b965      	cbnz	r5, 404736 <strcmp+0x28e>
  40471c:	f851 3b04 	ldr.w	r3, [r1], #4
  404720:	ea84 0402 	eor.w	r4, r4, r2
  404724:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  404728:	d109      	bne.n	40473e <strcmp+0x296>
  40472a:	f850 2b04 	ldr.w	r2, [r0], #4
  40472e:	e7eb      	b.n	404708 <strcmp+0x260>
  404730:	ea4f 6313 	mov.w	r3, r3, lsr #24
  404734:	e00d      	b.n	404752 <strcmp+0x2aa>
  404736:	f015 0fff 	tst.w	r5, #255	; 0xff
  40473a:	d105      	bne.n	404748 <strcmp+0x2a0>
  40473c:	680b      	ldr	r3, [r1, #0]
  40473e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  404742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404746:	e004      	b.n	404752 <strcmp+0x2aa>
  404748:	f04f 0000 	mov.w	r0, #0
  40474c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404750:	4770      	bx	lr
  404752:	ba12      	rev	r2, r2
  404754:	ba1b      	rev	r3, r3
  404756:	fa82 f44c 	uadd8	r4, r2, ip
  40475a:	ea82 0403 	eor.w	r4, r2, r3
  40475e:	faa4 f58c 	sel	r5, r4, ip
  404762:	fab5 f485 	clz	r4, r5
  404766:	fa02 f204 	lsl.w	r2, r2, r4
  40476a:	fa03 f304 	lsl.w	r3, r3, r4
  40476e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  404772:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404776:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40477a:	4770      	bx	lr

0040477c <strcpy>:
  40477c:	ea80 0201 	eor.w	r2, r0, r1
  404780:	4684      	mov	ip, r0
  404782:	f012 0f03 	tst.w	r2, #3
  404786:	d14f      	bne.n	404828 <strcpy+0xac>
  404788:	f011 0f03 	tst.w	r1, #3
  40478c:	d132      	bne.n	4047f4 <strcpy+0x78>
  40478e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  404792:	f011 0f04 	tst.w	r1, #4
  404796:	f851 3b04 	ldr.w	r3, [r1], #4
  40479a:	d00b      	beq.n	4047b4 <strcpy+0x38>
  40479c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4047a0:	439a      	bics	r2, r3
  4047a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4047a6:	bf04      	itt	eq
  4047a8:	f84c 3b04 	streq.w	r3, [ip], #4
  4047ac:	f851 3b04 	ldreq.w	r3, [r1], #4
  4047b0:	d116      	bne.n	4047e0 <strcpy+0x64>
  4047b2:	bf00      	nop
  4047b4:	f851 4b04 	ldr.w	r4, [r1], #4
  4047b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4047bc:	439a      	bics	r2, r3
  4047be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4047c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4047c6:	d10b      	bne.n	4047e0 <strcpy+0x64>
  4047c8:	f84c 3b04 	str.w	r3, [ip], #4
  4047cc:	43a2      	bics	r2, r4
  4047ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4047d2:	bf04      	itt	eq
  4047d4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4047d8:	f84c 4b04 	streq.w	r4, [ip], #4
  4047dc:	d0ea      	beq.n	4047b4 <strcpy+0x38>
  4047de:	4623      	mov	r3, r4
  4047e0:	f80c 3b01 	strb.w	r3, [ip], #1
  4047e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4047e8:	ea4f 2333 	mov.w	r3, r3, ror #8
  4047ec:	d1f8      	bne.n	4047e0 <strcpy+0x64>
  4047ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4047f2:	4770      	bx	lr
  4047f4:	f011 0f01 	tst.w	r1, #1
  4047f8:	d006      	beq.n	404808 <strcpy+0x8c>
  4047fa:	f811 2b01 	ldrb.w	r2, [r1], #1
  4047fe:	f80c 2b01 	strb.w	r2, [ip], #1
  404802:	2a00      	cmp	r2, #0
  404804:	bf08      	it	eq
  404806:	4770      	bxeq	lr
  404808:	f011 0f02 	tst.w	r1, #2
  40480c:	d0bf      	beq.n	40478e <strcpy+0x12>
  40480e:	f831 2b02 	ldrh.w	r2, [r1], #2
  404812:	f012 0fff 	tst.w	r2, #255	; 0xff
  404816:	bf16      	itet	ne
  404818:	f82c 2b02 	strhne.w	r2, [ip], #2
  40481c:	f88c 2000 	strbeq.w	r2, [ip]
  404820:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404824:	d1b3      	bne.n	40478e <strcpy+0x12>
  404826:	4770      	bx	lr
  404828:	f811 2b01 	ldrb.w	r2, [r1], #1
  40482c:	f80c 2b01 	strb.w	r2, [ip], #1
  404830:	2a00      	cmp	r2, #0
  404832:	d1f9      	bne.n	404828 <strcpy+0xac>
  404834:	4770      	bx	lr
  404836:	bf00      	nop
	...

00404840 <strlen>:
  404840:	f890 f000 	pld	[r0]
  404844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404848:	f020 0107 	bic.w	r1, r0, #7
  40484c:	f06f 0c00 	mvn.w	ip, #0
  404850:	f010 0407 	ands.w	r4, r0, #7
  404854:	f891 f020 	pld	[r1, #32]
  404858:	f040 8049 	bne.w	4048ee <strlen+0xae>
  40485c:	f04f 0400 	mov.w	r4, #0
  404860:	f06f 0007 	mvn.w	r0, #7
  404864:	e9d1 2300 	ldrd	r2, r3, [r1]
  404868:	f891 f040 	pld	[r1, #64]	; 0x40
  40486c:	f100 0008 	add.w	r0, r0, #8
  404870:	fa82 f24c 	uadd8	r2, r2, ip
  404874:	faa4 f28c 	sel	r2, r4, ip
  404878:	fa83 f34c 	uadd8	r3, r3, ip
  40487c:	faa2 f38c 	sel	r3, r2, ip
  404880:	bb4b      	cbnz	r3, 4048d6 <strlen+0x96>
  404882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404886:	fa82 f24c 	uadd8	r2, r2, ip
  40488a:	f100 0008 	add.w	r0, r0, #8
  40488e:	faa4 f28c 	sel	r2, r4, ip
  404892:	fa83 f34c 	uadd8	r3, r3, ip
  404896:	faa2 f38c 	sel	r3, r2, ip
  40489a:	b9e3      	cbnz	r3, 4048d6 <strlen+0x96>
  40489c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4048a0:	fa82 f24c 	uadd8	r2, r2, ip
  4048a4:	f100 0008 	add.w	r0, r0, #8
  4048a8:	faa4 f28c 	sel	r2, r4, ip
  4048ac:	fa83 f34c 	uadd8	r3, r3, ip
  4048b0:	faa2 f38c 	sel	r3, r2, ip
  4048b4:	b97b      	cbnz	r3, 4048d6 <strlen+0x96>
  4048b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4048ba:	f101 0120 	add.w	r1, r1, #32
  4048be:	fa82 f24c 	uadd8	r2, r2, ip
  4048c2:	f100 0008 	add.w	r0, r0, #8
  4048c6:	faa4 f28c 	sel	r2, r4, ip
  4048ca:	fa83 f34c 	uadd8	r3, r3, ip
  4048ce:	faa2 f38c 	sel	r3, r2, ip
  4048d2:	2b00      	cmp	r3, #0
  4048d4:	d0c6      	beq.n	404864 <strlen+0x24>
  4048d6:	2a00      	cmp	r2, #0
  4048d8:	bf04      	itt	eq
  4048da:	3004      	addeq	r0, #4
  4048dc:	461a      	moveq	r2, r3
  4048de:	ba12      	rev	r2, r2
  4048e0:	fab2 f282 	clz	r2, r2
  4048e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4048e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4048ec:	4770      	bx	lr
  4048ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4048f2:	f004 0503 	and.w	r5, r4, #3
  4048f6:	f1c4 0000 	rsb	r0, r4, #0
  4048fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4048fe:	f014 0f04 	tst.w	r4, #4
  404902:	f891 f040 	pld	[r1, #64]	; 0x40
  404906:	fa0c f505 	lsl.w	r5, ip, r5
  40490a:	ea62 0205 	orn	r2, r2, r5
  40490e:	bf1c      	itt	ne
  404910:	ea63 0305 	ornne	r3, r3, r5
  404914:	4662      	movne	r2, ip
  404916:	f04f 0400 	mov.w	r4, #0
  40491a:	e7a9      	b.n	404870 <strlen+0x30>

0040491c <_svfprintf_r>:
  40491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404920:	b0c3      	sub	sp, #268	; 0x10c
  404922:	460c      	mov	r4, r1
  404924:	910b      	str	r1, [sp, #44]	; 0x2c
  404926:	4692      	mov	sl, r2
  404928:	930f      	str	r3, [sp, #60]	; 0x3c
  40492a:	900c      	str	r0, [sp, #48]	; 0x30
  40492c:	f003 fdd6 	bl	4084dc <_localeconv_r>
  404930:	6803      	ldr	r3, [r0, #0]
  404932:	931a      	str	r3, [sp, #104]	; 0x68
  404934:	4618      	mov	r0, r3
  404936:	f7ff ff83 	bl	404840 <strlen>
  40493a:	89a3      	ldrh	r3, [r4, #12]
  40493c:	9019      	str	r0, [sp, #100]	; 0x64
  40493e:	0619      	lsls	r1, r3, #24
  404940:	d503      	bpl.n	40494a <_svfprintf_r+0x2e>
  404942:	6923      	ldr	r3, [r4, #16]
  404944:	2b00      	cmp	r3, #0
  404946:	f001 8003 	beq.w	405950 <_svfprintf_r+0x1034>
  40494a:	2300      	movs	r3, #0
  40494c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404950:	9313      	str	r3, [sp, #76]	; 0x4c
  404952:	9315      	str	r3, [sp, #84]	; 0x54
  404954:	9314      	str	r3, [sp, #80]	; 0x50
  404956:	9327      	str	r3, [sp, #156]	; 0x9c
  404958:	9326      	str	r3, [sp, #152]	; 0x98
  40495a:	9318      	str	r3, [sp, #96]	; 0x60
  40495c:	931b      	str	r3, [sp, #108]	; 0x6c
  40495e:	9309      	str	r3, [sp, #36]	; 0x24
  404960:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404964:	46c8      	mov	r8, r9
  404966:	9316      	str	r3, [sp, #88]	; 0x58
  404968:	9317      	str	r3, [sp, #92]	; 0x5c
  40496a:	f89a 3000 	ldrb.w	r3, [sl]
  40496e:	4654      	mov	r4, sl
  404970:	b1e3      	cbz	r3, 4049ac <_svfprintf_r+0x90>
  404972:	2b25      	cmp	r3, #37	; 0x25
  404974:	d102      	bne.n	40497c <_svfprintf_r+0x60>
  404976:	e019      	b.n	4049ac <_svfprintf_r+0x90>
  404978:	2b25      	cmp	r3, #37	; 0x25
  40497a:	d003      	beq.n	404984 <_svfprintf_r+0x68>
  40497c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404980:	2b00      	cmp	r3, #0
  404982:	d1f9      	bne.n	404978 <_svfprintf_r+0x5c>
  404984:	eba4 050a 	sub.w	r5, r4, sl
  404988:	b185      	cbz	r5, 4049ac <_svfprintf_r+0x90>
  40498a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40498c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40498e:	f8c8 a000 	str.w	sl, [r8]
  404992:	3301      	adds	r3, #1
  404994:	442a      	add	r2, r5
  404996:	2b07      	cmp	r3, #7
  404998:	f8c8 5004 	str.w	r5, [r8, #4]
  40499c:	9227      	str	r2, [sp, #156]	; 0x9c
  40499e:	9326      	str	r3, [sp, #152]	; 0x98
  4049a0:	dc7f      	bgt.n	404aa2 <_svfprintf_r+0x186>
  4049a2:	f108 0808 	add.w	r8, r8, #8
  4049a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049a8:	442b      	add	r3, r5
  4049aa:	9309      	str	r3, [sp, #36]	; 0x24
  4049ac:	7823      	ldrb	r3, [r4, #0]
  4049ae:	2b00      	cmp	r3, #0
  4049b0:	d07f      	beq.n	404ab2 <_svfprintf_r+0x196>
  4049b2:	2300      	movs	r3, #0
  4049b4:	461a      	mov	r2, r3
  4049b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4049ba:	4619      	mov	r1, r3
  4049bc:	930d      	str	r3, [sp, #52]	; 0x34
  4049be:	469b      	mov	fp, r3
  4049c0:	f04f 30ff 	mov.w	r0, #4294967295
  4049c4:	7863      	ldrb	r3, [r4, #1]
  4049c6:	900a      	str	r0, [sp, #40]	; 0x28
  4049c8:	f104 0a01 	add.w	sl, r4, #1
  4049cc:	f10a 0a01 	add.w	sl, sl, #1
  4049d0:	f1a3 0020 	sub.w	r0, r3, #32
  4049d4:	2858      	cmp	r0, #88	; 0x58
  4049d6:	f200 83c1 	bhi.w	40515c <_svfprintf_r+0x840>
  4049da:	e8df f010 	tbh	[pc, r0, lsl #1]
  4049de:	0238      	.short	0x0238
  4049e0:	03bf03bf 	.word	0x03bf03bf
  4049e4:	03bf0240 	.word	0x03bf0240
  4049e8:	03bf03bf 	.word	0x03bf03bf
  4049ec:	03bf03bf 	.word	0x03bf03bf
  4049f0:	024503bf 	.word	0x024503bf
  4049f4:	03bf0203 	.word	0x03bf0203
  4049f8:	026b005d 	.word	0x026b005d
  4049fc:	028603bf 	.word	0x028603bf
  404a00:	039d039d 	.word	0x039d039d
  404a04:	039d039d 	.word	0x039d039d
  404a08:	039d039d 	.word	0x039d039d
  404a0c:	039d039d 	.word	0x039d039d
  404a10:	03bf039d 	.word	0x03bf039d
  404a14:	03bf03bf 	.word	0x03bf03bf
  404a18:	03bf03bf 	.word	0x03bf03bf
  404a1c:	03bf03bf 	.word	0x03bf03bf
  404a20:	03bf03bf 	.word	0x03bf03bf
  404a24:	033703bf 	.word	0x033703bf
  404a28:	03bf0357 	.word	0x03bf0357
  404a2c:	03bf0357 	.word	0x03bf0357
  404a30:	03bf03bf 	.word	0x03bf03bf
  404a34:	039803bf 	.word	0x039803bf
  404a38:	03bf03bf 	.word	0x03bf03bf
  404a3c:	03bf03ad 	.word	0x03bf03ad
  404a40:	03bf03bf 	.word	0x03bf03bf
  404a44:	03bf03bf 	.word	0x03bf03bf
  404a48:	03bf0259 	.word	0x03bf0259
  404a4c:	031e03bf 	.word	0x031e03bf
  404a50:	03bf03bf 	.word	0x03bf03bf
  404a54:	03bf03bf 	.word	0x03bf03bf
  404a58:	03bf03bf 	.word	0x03bf03bf
  404a5c:	03bf03bf 	.word	0x03bf03bf
  404a60:	03bf03bf 	.word	0x03bf03bf
  404a64:	02db02c6 	.word	0x02db02c6
  404a68:	03570357 	.word	0x03570357
  404a6c:	028b0357 	.word	0x028b0357
  404a70:	03bf02db 	.word	0x03bf02db
  404a74:	029003bf 	.word	0x029003bf
  404a78:	029d03bf 	.word	0x029d03bf
  404a7c:	02b401cc 	.word	0x02b401cc
  404a80:	03bf0208 	.word	0x03bf0208
  404a84:	03bf01e1 	.word	0x03bf01e1
  404a88:	03bf007e 	.word	0x03bf007e
  404a8c:	020d03bf 	.word	0x020d03bf
  404a90:	980d      	ldr	r0, [sp, #52]	; 0x34
  404a92:	930f      	str	r3, [sp, #60]	; 0x3c
  404a94:	4240      	negs	r0, r0
  404a96:	900d      	str	r0, [sp, #52]	; 0x34
  404a98:	f04b 0b04 	orr.w	fp, fp, #4
  404a9c:	f89a 3000 	ldrb.w	r3, [sl]
  404aa0:	e794      	b.n	4049cc <_svfprintf_r+0xb0>
  404aa2:	aa25      	add	r2, sp, #148	; 0x94
  404aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404aa8:	f004 fb5a 	bl	409160 <__ssprint_r>
  404aac:	b940      	cbnz	r0, 404ac0 <_svfprintf_r+0x1a4>
  404aae:	46c8      	mov	r8, r9
  404ab0:	e779      	b.n	4049a6 <_svfprintf_r+0x8a>
  404ab2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404ab4:	b123      	cbz	r3, 404ac0 <_svfprintf_r+0x1a4>
  404ab6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404aba:	aa25      	add	r2, sp, #148	; 0x94
  404abc:	f004 fb50 	bl	409160 <__ssprint_r>
  404ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404ac2:	899b      	ldrh	r3, [r3, #12]
  404ac4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404aca:	bf18      	it	ne
  404acc:	f04f 33ff 	movne.w	r3, #4294967295
  404ad0:	9309      	str	r3, [sp, #36]	; 0x24
  404ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
  404ad4:	b043      	add	sp, #268	; 0x10c
  404ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ada:	f01b 0f20 	tst.w	fp, #32
  404ade:	9311      	str	r3, [sp, #68]	; 0x44
  404ae0:	f040 81dd 	bne.w	404e9e <_svfprintf_r+0x582>
  404ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ae6:	f01b 0f10 	tst.w	fp, #16
  404aea:	4613      	mov	r3, r2
  404aec:	f040 856e 	bne.w	4055cc <_svfprintf_r+0xcb0>
  404af0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404af4:	f000 856a 	beq.w	4055cc <_svfprintf_r+0xcb0>
  404af8:	8814      	ldrh	r4, [r2, #0]
  404afa:	3204      	adds	r2, #4
  404afc:	2500      	movs	r5, #0
  404afe:	2301      	movs	r3, #1
  404b00:	920f      	str	r2, [sp, #60]	; 0x3c
  404b02:	2700      	movs	r7, #0
  404b04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404b08:	990a      	ldr	r1, [sp, #40]	; 0x28
  404b0a:	1c4a      	adds	r2, r1, #1
  404b0c:	f000 8265 	beq.w	404fda <_svfprintf_r+0x6be>
  404b10:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404b14:	9207      	str	r2, [sp, #28]
  404b16:	ea54 0205 	orrs.w	r2, r4, r5
  404b1a:	f040 8264 	bne.w	404fe6 <_svfprintf_r+0x6ca>
  404b1e:	2900      	cmp	r1, #0
  404b20:	f040 843c 	bne.w	40539c <_svfprintf_r+0xa80>
  404b24:	2b00      	cmp	r3, #0
  404b26:	f040 84d7 	bne.w	4054d8 <_svfprintf_r+0xbbc>
  404b2a:	f01b 0301 	ands.w	r3, fp, #1
  404b2e:	930e      	str	r3, [sp, #56]	; 0x38
  404b30:	f000 8604 	beq.w	40573c <_svfprintf_r+0xe20>
  404b34:	ae42      	add	r6, sp, #264	; 0x108
  404b36:	2330      	movs	r3, #48	; 0x30
  404b38:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b40:	4293      	cmp	r3, r2
  404b42:	bfb8      	it	lt
  404b44:	4613      	movlt	r3, r2
  404b46:	9308      	str	r3, [sp, #32]
  404b48:	2300      	movs	r3, #0
  404b4a:	9312      	str	r3, [sp, #72]	; 0x48
  404b4c:	b117      	cbz	r7, 404b54 <_svfprintf_r+0x238>
  404b4e:	9b08      	ldr	r3, [sp, #32]
  404b50:	3301      	adds	r3, #1
  404b52:	9308      	str	r3, [sp, #32]
  404b54:	9b07      	ldr	r3, [sp, #28]
  404b56:	f013 0302 	ands.w	r3, r3, #2
  404b5a:	9310      	str	r3, [sp, #64]	; 0x40
  404b5c:	d002      	beq.n	404b64 <_svfprintf_r+0x248>
  404b5e:	9b08      	ldr	r3, [sp, #32]
  404b60:	3302      	adds	r3, #2
  404b62:	9308      	str	r3, [sp, #32]
  404b64:	9b07      	ldr	r3, [sp, #28]
  404b66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404b6a:	f040 830e 	bne.w	40518a <_svfprintf_r+0x86e>
  404b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404b70:	9a08      	ldr	r2, [sp, #32]
  404b72:	eba3 0b02 	sub.w	fp, r3, r2
  404b76:	f1bb 0f00 	cmp.w	fp, #0
  404b7a:	f340 8306 	ble.w	40518a <_svfprintf_r+0x86e>
  404b7e:	f1bb 0f10 	cmp.w	fp, #16
  404b82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b86:	dd29      	ble.n	404bdc <_svfprintf_r+0x2c0>
  404b88:	4643      	mov	r3, r8
  404b8a:	4621      	mov	r1, r4
  404b8c:	46a8      	mov	r8, r5
  404b8e:	2710      	movs	r7, #16
  404b90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404b94:	e006      	b.n	404ba4 <_svfprintf_r+0x288>
  404b96:	f1ab 0b10 	sub.w	fp, fp, #16
  404b9a:	f1bb 0f10 	cmp.w	fp, #16
  404b9e:	f103 0308 	add.w	r3, r3, #8
  404ba2:	dd18      	ble.n	404bd6 <_svfprintf_r+0x2ba>
  404ba4:	3201      	adds	r2, #1
  404ba6:	48b7      	ldr	r0, [pc, #732]	; (404e84 <_svfprintf_r+0x568>)
  404ba8:	9226      	str	r2, [sp, #152]	; 0x98
  404baa:	3110      	adds	r1, #16
  404bac:	2a07      	cmp	r2, #7
  404bae:	9127      	str	r1, [sp, #156]	; 0x9c
  404bb0:	e883 0081 	stmia.w	r3, {r0, r7}
  404bb4:	ddef      	ble.n	404b96 <_svfprintf_r+0x27a>
  404bb6:	aa25      	add	r2, sp, #148	; 0x94
  404bb8:	4629      	mov	r1, r5
  404bba:	4620      	mov	r0, r4
  404bbc:	f004 fad0 	bl	409160 <__ssprint_r>
  404bc0:	2800      	cmp	r0, #0
  404bc2:	f47f af7d 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  404bc6:	f1ab 0b10 	sub.w	fp, fp, #16
  404bca:	f1bb 0f10 	cmp.w	fp, #16
  404bce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404bd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bd2:	464b      	mov	r3, r9
  404bd4:	dce6      	bgt.n	404ba4 <_svfprintf_r+0x288>
  404bd6:	4645      	mov	r5, r8
  404bd8:	460c      	mov	r4, r1
  404bda:	4698      	mov	r8, r3
  404bdc:	3201      	adds	r2, #1
  404bde:	4ba9      	ldr	r3, [pc, #676]	; (404e84 <_svfprintf_r+0x568>)
  404be0:	9226      	str	r2, [sp, #152]	; 0x98
  404be2:	445c      	add	r4, fp
  404be4:	2a07      	cmp	r2, #7
  404be6:	9427      	str	r4, [sp, #156]	; 0x9c
  404be8:	e888 0808 	stmia.w	r8, {r3, fp}
  404bec:	f300 8498 	bgt.w	405520 <_svfprintf_r+0xc04>
  404bf0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404bf4:	f108 0808 	add.w	r8, r8, #8
  404bf8:	b177      	cbz	r7, 404c18 <_svfprintf_r+0x2fc>
  404bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bfc:	3301      	adds	r3, #1
  404bfe:	3401      	adds	r4, #1
  404c00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404c04:	2201      	movs	r2, #1
  404c06:	2b07      	cmp	r3, #7
  404c08:	9427      	str	r4, [sp, #156]	; 0x9c
  404c0a:	9326      	str	r3, [sp, #152]	; 0x98
  404c0c:	e888 0006 	stmia.w	r8, {r1, r2}
  404c10:	f300 83db 	bgt.w	4053ca <_svfprintf_r+0xaae>
  404c14:	f108 0808 	add.w	r8, r8, #8
  404c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c1a:	b16b      	cbz	r3, 404c38 <_svfprintf_r+0x31c>
  404c1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c1e:	3301      	adds	r3, #1
  404c20:	3402      	adds	r4, #2
  404c22:	a91e      	add	r1, sp, #120	; 0x78
  404c24:	2202      	movs	r2, #2
  404c26:	2b07      	cmp	r3, #7
  404c28:	9427      	str	r4, [sp, #156]	; 0x9c
  404c2a:	9326      	str	r3, [sp, #152]	; 0x98
  404c2c:	e888 0006 	stmia.w	r8, {r1, r2}
  404c30:	f300 83d6 	bgt.w	4053e0 <_svfprintf_r+0xac4>
  404c34:	f108 0808 	add.w	r8, r8, #8
  404c38:	2d80      	cmp	r5, #128	; 0x80
  404c3a:	f000 8315 	beq.w	405268 <_svfprintf_r+0x94c>
  404c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404c42:	1a9f      	subs	r7, r3, r2
  404c44:	2f00      	cmp	r7, #0
  404c46:	dd36      	ble.n	404cb6 <_svfprintf_r+0x39a>
  404c48:	2f10      	cmp	r7, #16
  404c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c4c:	4d8e      	ldr	r5, [pc, #568]	; (404e88 <_svfprintf_r+0x56c>)
  404c4e:	dd27      	ble.n	404ca0 <_svfprintf_r+0x384>
  404c50:	4642      	mov	r2, r8
  404c52:	4621      	mov	r1, r4
  404c54:	46b0      	mov	r8, r6
  404c56:	f04f 0b10 	mov.w	fp, #16
  404c5a:	462e      	mov	r6, r5
  404c5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404c5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404c60:	e004      	b.n	404c6c <_svfprintf_r+0x350>
  404c62:	3f10      	subs	r7, #16
  404c64:	2f10      	cmp	r7, #16
  404c66:	f102 0208 	add.w	r2, r2, #8
  404c6a:	dd15      	ble.n	404c98 <_svfprintf_r+0x37c>
  404c6c:	3301      	adds	r3, #1
  404c6e:	3110      	adds	r1, #16
  404c70:	2b07      	cmp	r3, #7
  404c72:	9127      	str	r1, [sp, #156]	; 0x9c
  404c74:	9326      	str	r3, [sp, #152]	; 0x98
  404c76:	e882 0840 	stmia.w	r2, {r6, fp}
  404c7a:	ddf2      	ble.n	404c62 <_svfprintf_r+0x346>
  404c7c:	aa25      	add	r2, sp, #148	; 0x94
  404c7e:	4629      	mov	r1, r5
  404c80:	4620      	mov	r0, r4
  404c82:	f004 fa6d 	bl	409160 <__ssprint_r>
  404c86:	2800      	cmp	r0, #0
  404c88:	f47f af1a 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  404c8c:	3f10      	subs	r7, #16
  404c8e:	2f10      	cmp	r7, #16
  404c90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c94:	464a      	mov	r2, r9
  404c96:	dce9      	bgt.n	404c6c <_svfprintf_r+0x350>
  404c98:	4635      	mov	r5, r6
  404c9a:	460c      	mov	r4, r1
  404c9c:	4646      	mov	r6, r8
  404c9e:	4690      	mov	r8, r2
  404ca0:	3301      	adds	r3, #1
  404ca2:	443c      	add	r4, r7
  404ca4:	2b07      	cmp	r3, #7
  404ca6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ca8:	9326      	str	r3, [sp, #152]	; 0x98
  404caa:	e888 00a0 	stmia.w	r8, {r5, r7}
  404cae:	f300 8381 	bgt.w	4053b4 <_svfprintf_r+0xa98>
  404cb2:	f108 0808 	add.w	r8, r8, #8
  404cb6:	9b07      	ldr	r3, [sp, #28]
  404cb8:	05df      	lsls	r7, r3, #23
  404cba:	f100 8268 	bmi.w	40518e <_svfprintf_r+0x872>
  404cbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
  404cc2:	f8c8 6000 	str.w	r6, [r8]
  404cc6:	3301      	adds	r3, #1
  404cc8:	440c      	add	r4, r1
  404cca:	2b07      	cmp	r3, #7
  404ccc:	9427      	str	r4, [sp, #156]	; 0x9c
  404cce:	f8c8 1004 	str.w	r1, [r8, #4]
  404cd2:	9326      	str	r3, [sp, #152]	; 0x98
  404cd4:	f300 834d 	bgt.w	405372 <_svfprintf_r+0xa56>
  404cd8:	f108 0808 	add.w	r8, r8, #8
  404cdc:	9b07      	ldr	r3, [sp, #28]
  404cde:	075b      	lsls	r3, r3, #29
  404ce0:	d53a      	bpl.n	404d58 <_svfprintf_r+0x43c>
  404ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ce4:	9a08      	ldr	r2, [sp, #32]
  404ce6:	1a9d      	subs	r5, r3, r2
  404ce8:	2d00      	cmp	r5, #0
  404cea:	dd35      	ble.n	404d58 <_svfprintf_r+0x43c>
  404cec:	2d10      	cmp	r5, #16
  404cee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cf0:	dd20      	ble.n	404d34 <_svfprintf_r+0x418>
  404cf2:	2610      	movs	r6, #16
  404cf4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404cf6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404cfa:	e004      	b.n	404d06 <_svfprintf_r+0x3ea>
  404cfc:	3d10      	subs	r5, #16
  404cfe:	2d10      	cmp	r5, #16
  404d00:	f108 0808 	add.w	r8, r8, #8
  404d04:	dd16      	ble.n	404d34 <_svfprintf_r+0x418>
  404d06:	3301      	adds	r3, #1
  404d08:	4a5e      	ldr	r2, [pc, #376]	; (404e84 <_svfprintf_r+0x568>)
  404d0a:	9326      	str	r3, [sp, #152]	; 0x98
  404d0c:	3410      	adds	r4, #16
  404d0e:	2b07      	cmp	r3, #7
  404d10:	9427      	str	r4, [sp, #156]	; 0x9c
  404d12:	e888 0044 	stmia.w	r8, {r2, r6}
  404d16:	ddf1      	ble.n	404cfc <_svfprintf_r+0x3e0>
  404d18:	aa25      	add	r2, sp, #148	; 0x94
  404d1a:	4659      	mov	r1, fp
  404d1c:	4638      	mov	r0, r7
  404d1e:	f004 fa1f 	bl	409160 <__ssprint_r>
  404d22:	2800      	cmp	r0, #0
  404d24:	f47f aecc 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  404d28:	3d10      	subs	r5, #16
  404d2a:	2d10      	cmp	r5, #16
  404d2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d30:	46c8      	mov	r8, r9
  404d32:	dce8      	bgt.n	404d06 <_svfprintf_r+0x3ea>
  404d34:	3301      	adds	r3, #1
  404d36:	4a53      	ldr	r2, [pc, #332]	; (404e84 <_svfprintf_r+0x568>)
  404d38:	9326      	str	r3, [sp, #152]	; 0x98
  404d3a:	442c      	add	r4, r5
  404d3c:	2b07      	cmp	r3, #7
  404d3e:	9427      	str	r4, [sp, #156]	; 0x9c
  404d40:	e888 0024 	stmia.w	r8, {r2, r5}
  404d44:	dd08      	ble.n	404d58 <_svfprintf_r+0x43c>
  404d46:	aa25      	add	r2, sp, #148	; 0x94
  404d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d4c:	f004 fa08 	bl	409160 <__ssprint_r>
  404d50:	2800      	cmp	r0, #0
  404d52:	f47f aeb5 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  404d56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404d5c:	9908      	ldr	r1, [sp, #32]
  404d5e:	428a      	cmp	r2, r1
  404d60:	bfac      	ite	ge
  404d62:	189b      	addge	r3, r3, r2
  404d64:	185b      	addlt	r3, r3, r1
  404d66:	9309      	str	r3, [sp, #36]	; 0x24
  404d68:	2c00      	cmp	r4, #0
  404d6a:	f040 830d 	bne.w	405388 <_svfprintf_r+0xa6c>
  404d6e:	2300      	movs	r3, #0
  404d70:	9326      	str	r3, [sp, #152]	; 0x98
  404d72:	46c8      	mov	r8, r9
  404d74:	e5f9      	b.n	40496a <_svfprintf_r+0x4e>
  404d76:	9311      	str	r3, [sp, #68]	; 0x44
  404d78:	f01b 0320 	ands.w	r3, fp, #32
  404d7c:	f040 81e3 	bne.w	405146 <_svfprintf_r+0x82a>
  404d80:	f01b 0210 	ands.w	r2, fp, #16
  404d84:	f040 842e 	bne.w	4055e4 <_svfprintf_r+0xcc8>
  404d88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404d8c:	f000 842a 	beq.w	4055e4 <_svfprintf_r+0xcc8>
  404d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d92:	4613      	mov	r3, r2
  404d94:	460a      	mov	r2, r1
  404d96:	3204      	adds	r2, #4
  404d98:	880c      	ldrh	r4, [r1, #0]
  404d9a:	920f      	str	r2, [sp, #60]	; 0x3c
  404d9c:	2500      	movs	r5, #0
  404d9e:	e6b0      	b.n	404b02 <_svfprintf_r+0x1e6>
  404da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404da2:	9311      	str	r3, [sp, #68]	; 0x44
  404da4:	6816      	ldr	r6, [r2, #0]
  404da6:	2400      	movs	r4, #0
  404da8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404dac:	1d15      	adds	r5, r2, #4
  404dae:	2e00      	cmp	r6, #0
  404db0:	f000 86a7 	beq.w	405b02 <_svfprintf_r+0x11e6>
  404db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404db6:	1c53      	adds	r3, r2, #1
  404db8:	f000 8609 	beq.w	4059ce <_svfprintf_r+0x10b2>
  404dbc:	4621      	mov	r1, r4
  404dbe:	4630      	mov	r0, r6
  404dc0:	f003 fc36 	bl	408630 <memchr>
  404dc4:	2800      	cmp	r0, #0
  404dc6:	f000 86e1 	beq.w	405b8c <_svfprintf_r+0x1270>
  404dca:	1b83      	subs	r3, r0, r6
  404dcc:	930e      	str	r3, [sp, #56]	; 0x38
  404dce:	940a      	str	r4, [sp, #40]	; 0x28
  404dd0:	950f      	str	r5, [sp, #60]	; 0x3c
  404dd2:	f8cd b01c 	str.w	fp, [sp, #28]
  404dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404dda:	9308      	str	r3, [sp, #32]
  404ddc:	9412      	str	r4, [sp, #72]	; 0x48
  404dde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404de2:	e6b3      	b.n	404b4c <_svfprintf_r+0x230>
  404de4:	f89a 3000 	ldrb.w	r3, [sl]
  404de8:	2201      	movs	r2, #1
  404dea:	212b      	movs	r1, #43	; 0x2b
  404dec:	e5ee      	b.n	4049cc <_svfprintf_r+0xb0>
  404dee:	f04b 0b20 	orr.w	fp, fp, #32
  404df2:	f89a 3000 	ldrb.w	r3, [sl]
  404df6:	e5e9      	b.n	4049cc <_svfprintf_r+0xb0>
  404df8:	9311      	str	r3, [sp, #68]	; 0x44
  404dfa:	2a00      	cmp	r2, #0
  404dfc:	f040 8795 	bne.w	405d2a <_svfprintf_r+0x140e>
  404e00:	4b22      	ldr	r3, [pc, #136]	; (404e8c <_svfprintf_r+0x570>)
  404e02:	9318      	str	r3, [sp, #96]	; 0x60
  404e04:	f01b 0f20 	tst.w	fp, #32
  404e08:	f040 8111 	bne.w	40502e <_svfprintf_r+0x712>
  404e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e0e:	f01b 0f10 	tst.w	fp, #16
  404e12:	4613      	mov	r3, r2
  404e14:	f040 83e1 	bne.w	4055da <_svfprintf_r+0xcbe>
  404e18:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404e1c:	f000 83dd 	beq.w	4055da <_svfprintf_r+0xcbe>
  404e20:	3304      	adds	r3, #4
  404e22:	8814      	ldrh	r4, [r2, #0]
  404e24:	930f      	str	r3, [sp, #60]	; 0x3c
  404e26:	2500      	movs	r5, #0
  404e28:	f01b 0f01 	tst.w	fp, #1
  404e2c:	f000 810c 	beq.w	405048 <_svfprintf_r+0x72c>
  404e30:	ea54 0305 	orrs.w	r3, r4, r5
  404e34:	f000 8108 	beq.w	405048 <_svfprintf_r+0x72c>
  404e38:	2330      	movs	r3, #48	; 0x30
  404e3a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404e3e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404e42:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404e46:	f04b 0b02 	orr.w	fp, fp, #2
  404e4a:	2302      	movs	r3, #2
  404e4c:	e659      	b.n	404b02 <_svfprintf_r+0x1e6>
  404e4e:	f89a 3000 	ldrb.w	r3, [sl]
  404e52:	2900      	cmp	r1, #0
  404e54:	f47f adba 	bne.w	4049cc <_svfprintf_r+0xb0>
  404e58:	2201      	movs	r2, #1
  404e5a:	2120      	movs	r1, #32
  404e5c:	e5b6      	b.n	4049cc <_svfprintf_r+0xb0>
  404e5e:	f04b 0b01 	orr.w	fp, fp, #1
  404e62:	f89a 3000 	ldrb.w	r3, [sl]
  404e66:	e5b1      	b.n	4049cc <_svfprintf_r+0xb0>
  404e68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404e6a:	6823      	ldr	r3, [r4, #0]
  404e6c:	930d      	str	r3, [sp, #52]	; 0x34
  404e6e:	4618      	mov	r0, r3
  404e70:	2800      	cmp	r0, #0
  404e72:	4623      	mov	r3, r4
  404e74:	f103 0304 	add.w	r3, r3, #4
  404e78:	f6ff ae0a 	blt.w	404a90 <_svfprintf_r+0x174>
  404e7c:	930f      	str	r3, [sp, #60]	; 0x3c
  404e7e:	f89a 3000 	ldrb.w	r3, [sl]
  404e82:	e5a3      	b.n	4049cc <_svfprintf_r+0xb0>
  404e84:	0040a554 	.word	0x0040a554
  404e88:	0040a564 	.word	0x0040a564
  404e8c:	0040a534 	.word	0x0040a534
  404e90:	f04b 0b10 	orr.w	fp, fp, #16
  404e94:	f01b 0f20 	tst.w	fp, #32
  404e98:	9311      	str	r3, [sp, #68]	; 0x44
  404e9a:	f43f ae23 	beq.w	404ae4 <_svfprintf_r+0x1c8>
  404e9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ea0:	3507      	adds	r5, #7
  404ea2:	f025 0307 	bic.w	r3, r5, #7
  404ea6:	f103 0208 	add.w	r2, r3, #8
  404eaa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404eae:	920f      	str	r2, [sp, #60]	; 0x3c
  404eb0:	2301      	movs	r3, #1
  404eb2:	e626      	b.n	404b02 <_svfprintf_r+0x1e6>
  404eb4:	f89a 3000 	ldrb.w	r3, [sl]
  404eb8:	2b2a      	cmp	r3, #42	; 0x2a
  404eba:	f10a 0401 	add.w	r4, sl, #1
  404ebe:	f000 8727 	beq.w	405d10 <_svfprintf_r+0x13f4>
  404ec2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ec6:	2809      	cmp	r0, #9
  404ec8:	46a2      	mov	sl, r4
  404eca:	f200 86ad 	bhi.w	405c28 <_svfprintf_r+0x130c>
  404ece:	2300      	movs	r3, #0
  404ed0:	461c      	mov	r4, r3
  404ed2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404ed6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404eda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404ede:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ee2:	2809      	cmp	r0, #9
  404ee4:	d9f5      	bls.n	404ed2 <_svfprintf_r+0x5b6>
  404ee6:	940a      	str	r4, [sp, #40]	; 0x28
  404ee8:	e572      	b.n	4049d0 <_svfprintf_r+0xb4>
  404eea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404eee:	f89a 3000 	ldrb.w	r3, [sl]
  404ef2:	e56b      	b.n	4049cc <_svfprintf_r+0xb0>
  404ef4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404ef8:	f89a 3000 	ldrb.w	r3, [sl]
  404efc:	e566      	b.n	4049cc <_svfprintf_r+0xb0>
  404efe:	f89a 3000 	ldrb.w	r3, [sl]
  404f02:	2b6c      	cmp	r3, #108	; 0x6c
  404f04:	bf03      	ittte	eq
  404f06:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404f0a:	f04b 0b20 	orreq.w	fp, fp, #32
  404f0e:	f10a 0a01 	addeq.w	sl, sl, #1
  404f12:	f04b 0b10 	orrne.w	fp, fp, #16
  404f16:	e559      	b.n	4049cc <_svfprintf_r+0xb0>
  404f18:	2a00      	cmp	r2, #0
  404f1a:	f040 8711 	bne.w	405d40 <_svfprintf_r+0x1424>
  404f1e:	f01b 0f20 	tst.w	fp, #32
  404f22:	f040 84f9 	bne.w	405918 <_svfprintf_r+0xffc>
  404f26:	f01b 0f10 	tst.w	fp, #16
  404f2a:	f040 84ac 	bne.w	405886 <_svfprintf_r+0xf6a>
  404f2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404f32:	f000 84a8 	beq.w	405886 <_svfprintf_r+0xf6a>
  404f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f38:	6813      	ldr	r3, [r2, #0]
  404f3a:	3204      	adds	r2, #4
  404f3c:	920f      	str	r2, [sp, #60]	; 0x3c
  404f3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404f42:	801a      	strh	r2, [r3, #0]
  404f44:	e511      	b.n	40496a <_svfprintf_r+0x4e>
  404f46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404f48:	4bb3      	ldr	r3, [pc, #716]	; (405218 <_svfprintf_r+0x8fc>)
  404f4a:	680c      	ldr	r4, [r1, #0]
  404f4c:	9318      	str	r3, [sp, #96]	; 0x60
  404f4e:	2230      	movs	r2, #48	; 0x30
  404f50:	2378      	movs	r3, #120	; 0x78
  404f52:	3104      	adds	r1, #4
  404f54:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404f58:	9311      	str	r3, [sp, #68]	; 0x44
  404f5a:	f04b 0b02 	orr.w	fp, fp, #2
  404f5e:	910f      	str	r1, [sp, #60]	; 0x3c
  404f60:	2500      	movs	r5, #0
  404f62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404f66:	2302      	movs	r3, #2
  404f68:	e5cb      	b.n	404b02 <_svfprintf_r+0x1e6>
  404f6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404f6c:	9311      	str	r3, [sp, #68]	; 0x44
  404f6e:	680a      	ldr	r2, [r1, #0]
  404f70:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404f74:	2300      	movs	r3, #0
  404f76:	460a      	mov	r2, r1
  404f78:	461f      	mov	r7, r3
  404f7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404f7e:	3204      	adds	r2, #4
  404f80:	2301      	movs	r3, #1
  404f82:	9308      	str	r3, [sp, #32]
  404f84:	f8cd b01c 	str.w	fp, [sp, #28]
  404f88:	970a      	str	r7, [sp, #40]	; 0x28
  404f8a:	9712      	str	r7, [sp, #72]	; 0x48
  404f8c:	920f      	str	r2, [sp, #60]	; 0x3c
  404f8e:	930e      	str	r3, [sp, #56]	; 0x38
  404f90:	ae28      	add	r6, sp, #160	; 0xa0
  404f92:	e5df      	b.n	404b54 <_svfprintf_r+0x238>
  404f94:	9311      	str	r3, [sp, #68]	; 0x44
  404f96:	2a00      	cmp	r2, #0
  404f98:	f040 86ea 	bne.w	405d70 <_svfprintf_r+0x1454>
  404f9c:	f01b 0f20 	tst.w	fp, #32
  404fa0:	d15d      	bne.n	40505e <_svfprintf_r+0x742>
  404fa2:	f01b 0f10 	tst.w	fp, #16
  404fa6:	f040 8308 	bne.w	4055ba <_svfprintf_r+0xc9e>
  404faa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404fae:	f000 8304 	beq.w	4055ba <_svfprintf_r+0xc9e>
  404fb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404fb4:	f9b1 4000 	ldrsh.w	r4, [r1]
  404fb8:	3104      	adds	r1, #4
  404fba:	17e5      	asrs	r5, r4, #31
  404fbc:	4622      	mov	r2, r4
  404fbe:	462b      	mov	r3, r5
  404fc0:	910f      	str	r1, [sp, #60]	; 0x3c
  404fc2:	2a00      	cmp	r2, #0
  404fc4:	f173 0300 	sbcs.w	r3, r3, #0
  404fc8:	db58      	blt.n	40507c <_svfprintf_r+0x760>
  404fca:	990a      	ldr	r1, [sp, #40]	; 0x28
  404fcc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404fd0:	1c4a      	adds	r2, r1, #1
  404fd2:	f04f 0301 	mov.w	r3, #1
  404fd6:	f47f ad9b 	bne.w	404b10 <_svfprintf_r+0x1f4>
  404fda:	ea54 0205 	orrs.w	r2, r4, r5
  404fde:	f000 81df 	beq.w	4053a0 <_svfprintf_r+0xa84>
  404fe2:	f8cd b01c 	str.w	fp, [sp, #28]
  404fe6:	2b01      	cmp	r3, #1
  404fe8:	f000 827b 	beq.w	4054e2 <_svfprintf_r+0xbc6>
  404fec:	2b02      	cmp	r3, #2
  404fee:	f040 8206 	bne.w	4053fe <_svfprintf_r+0xae2>
  404ff2:	9818      	ldr	r0, [sp, #96]	; 0x60
  404ff4:	464e      	mov	r6, r9
  404ff6:	0923      	lsrs	r3, r4, #4
  404ff8:	f004 010f 	and.w	r1, r4, #15
  404ffc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405000:	092a      	lsrs	r2, r5, #4
  405002:	461c      	mov	r4, r3
  405004:	4615      	mov	r5, r2
  405006:	5c43      	ldrb	r3, [r0, r1]
  405008:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40500c:	ea54 0305 	orrs.w	r3, r4, r5
  405010:	d1f1      	bne.n	404ff6 <_svfprintf_r+0x6da>
  405012:	eba9 0306 	sub.w	r3, r9, r6
  405016:	930e      	str	r3, [sp, #56]	; 0x38
  405018:	e590      	b.n	404b3c <_svfprintf_r+0x220>
  40501a:	9311      	str	r3, [sp, #68]	; 0x44
  40501c:	2a00      	cmp	r2, #0
  40501e:	f040 86a3 	bne.w	405d68 <_svfprintf_r+0x144c>
  405022:	4b7e      	ldr	r3, [pc, #504]	; (40521c <_svfprintf_r+0x900>)
  405024:	9318      	str	r3, [sp, #96]	; 0x60
  405026:	f01b 0f20 	tst.w	fp, #32
  40502a:	f43f aeef 	beq.w	404e0c <_svfprintf_r+0x4f0>
  40502e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405030:	3507      	adds	r5, #7
  405032:	f025 0307 	bic.w	r3, r5, #7
  405036:	f103 0208 	add.w	r2, r3, #8
  40503a:	f01b 0f01 	tst.w	fp, #1
  40503e:	920f      	str	r2, [sp, #60]	; 0x3c
  405040:	e9d3 4500 	ldrd	r4, r5, [r3]
  405044:	f47f aef4 	bne.w	404e30 <_svfprintf_r+0x514>
  405048:	2302      	movs	r3, #2
  40504a:	e55a      	b.n	404b02 <_svfprintf_r+0x1e6>
  40504c:	9311      	str	r3, [sp, #68]	; 0x44
  40504e:	2a00      	cmp	r2, #0
  405050:	f040 8686 	bne.w	405d60 <_svfprintf_r+0x1444>
  405054:	f04b 0b10 	orr.w	fp, fp, #16
  405058:	f01b 0f20 	tst.w	fp, #32
  40505c:	d0a1      	beq.n	404fa2 <_svfprintf_r+0x686>
  40505e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405060:	3507      	adds	r5, #7
  405062:	f025 0507 	bic.w	r5, r5, #7
  405066:	e9d5 2300 	ldrd	r2, r3, [r5]
  40506a:	2a00      	cmp	r2, #0
  40506c:	f105 0108 	add.w	r1, r5, #8
  405070:	461d      	mov	r5, r3
  405072:	f173 0300 	sbcs.w	r3, r3, #0
  405076:	910f      	str	r1, [sp, #60]	; 0x3c
  405078:	4614      	mov	r4, r2
  40507a:	daa6      	bge.n	404fca <_svfprintf_r+0x6ae>
  40507c:	272d      	movs	r7, #45	; 0x2d
  40507e:	4264      	negs	r4, r4
  405080:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405084:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405088:	2301      	movs	r3, #1
  40508a:	e53d      	b.n	404b08 <_svfprintf_r+0x1ec>
  40508c:	9311      	str	r3, [sp, #68]	; 0x44
  40508e:	2a00      	cmp	r2, #0
  405090:	f040 8662 	bne.w	405d58 <_svfprintf_r+0x143c>
  405094:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405096:	3507      	adds	r5, #7
  405098:	f025 0307 	bic.w	r3, r5, #7
  40509c:	f103 0208 	add.w	r2, r3, #8
  4050a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4050a2:	681a      	ldr	r2, [r3, #0]
  4050a4:	9215      	str	r2, [sp, #84]	; 0x54
  4050a6:	685b      	ldr	r3, [r3, #4]
  4050a8:	9314      	str	r3, [sp, #80]	; 0x50
  4050aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4050ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4050ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4050b2:	4628      	mov	r0, r5
  4050b4:	4621      	mov	r1, r4
  4050b6:	f04f 32ff 	mov.w	r2, #4294967295
  4050ba:	4b59      	ldr	r3, [pc, #356]	; (405220 <_svfprintf_r+0x904>)
  4050bc:	f004 ff1e 	bl	409efc <__aeabi_dcmpun>
  4050c0:	2800      	cmp	r0, #0
  4050c2:	f040 834a 	bne.w	40575a <_svfprintf_r+0xe3e>
  4050c6:	4628      	mov	r0, r5
  4050c8:	4621      	mov	r1, r4
  4050ca:	f04f 32ff 	mov.w	r2, #4294967295
  4050ce:	4b54      	ldr	r3, [pc, #336]	; (405220 <_svfprintf_r+0x904>)
  4050d0:	f004 fef6 	bl	409ec0 <__aeabi_dcmple>
  4050d4:	2800      	cmp	r0, #0
  4050d6:	f040 8340 	bne.w	40575a <_svfprintf_r+0xe3e>
  4050da:	a815      	add	r0, sp, #84	; 0x54
  4050dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4050de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4050e0:	f004 fee4 	bl	409eac <__aeabi_dcmplt>
  4050e4:	2800      	cmp	r0, #0
  4050e6:	f040 8530 	bne.w	405b4a <_svfprintf_r+0x122e>
  4050ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4050ee:	4e4d      	ldr	r6, [pc, #308]	; (405224 <_svfprintf_r+0x908>)
  4050f0:	4b4d      	ldr	r3, [pc, #308]	; (405228 <_svfprintf_r+0x90c>)
  4050f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4050f6:	9007      	str	r0, [sp, #28]
  4050f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4050fa:	2203      	movs	r2, #3
  4050fc:	2100      	movs	r1, #0
  4050fe:	9208      	str	r2, [sp, #32]
  405100:	910a      	str	r1, [sp, #40]	; 0x28
  405102:	2847      	cmp	r0, #71	; 0x47
  405104:	bfd8      	it	le
  405106:	461e      	movle	r6, r3
  405108:	920e      	str	r2, [sp, #56]	; 0x38
  40510a:	9112      	str	r1, [sp, #72]	; 0x48
  40510c:	e51e      	b.n	404b4c <_svfprintf_r+0x230>
  40510e:	f04b 0b08 	orr.w	fp, fp, #8
  405112:	f89a 3000 	ldrb.w	r3, [sl]
  405116:	e459      	b.n	4049cc <_svfprintf_r+0xb0>
  405118:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40511c:	2300      	movs	r3, #0
  40511e:	461c      	mov	r4, r3
  405120:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405124:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405128:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40512c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405130:	2809      	cmp	r0, #9
  405132:	d9f5      	bls.n	405120 <_svfprintf_r+0x804>
  405134:	940d      	str	r4, [sp, #52]	; 0x34
  405136:	e44b      	b.n	4049d0 <_svfprintf_r+0xb4>
  405138:	f04b 0b10 	orr.w	fp, fp, #16
  40513c:	9311      	str	r3, [sp, #68]	; 0x44
  40513e:	f01b 0320 	ands.w	r3, fp, #32
  405142:	f43f ae1d 	beq.w	404d80 <_svfprintf_r+0x464>
  405146:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405148:	3507      	adds	r5, #7
  40514a:	f025 0307 	bic.w	r3, r5, #7
  40514e:	f103 0208 	add.w	r2, r3, #8
  405152:	e9d3 4500 	ldrd	r4, r5, [r3]
  405156:	920f      	str	r2, [sp, #60]	; 0x3c
  405158:	2300      	movs	r3, #0
  40515a:	e4d2      	b.n	404b02 <_svfprintf_r+0x1e6>
  40515c:	9311      	str	r3, [sp, #68]	; 0x44
  40515e:	2a00      	cmp	r2, #0
  405160:	f040 85e7 	bne.w	405d32 <_svfprintf_r+0x1416>
  405164:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405166:	2a00      	cmp	r2, #0
  405168:	f43f aca3 	beq.w	404ab2 <_svfprintf_r+0x196>
  40516c:	2300      	movs	r3, #0
  40516e:	2101      	movs	r1, #1
  405170:	461f      	mov	r7, r3
  405172:	9108      	str	r1, [sp, #32]
  405174:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405178:	f8cd b01c 	str.w	fp, [sp, #28]
  40517c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405180:	930a      	str	r3, [sp, #40]	; 0x28
  405182:	9312      	str	r3, [sp, #72]	; 0x48
  405184:	910e      	str	r1, [sp, #56]	; 0x38
  405186:	ae28      	add	r6, sp, #160	; 0xa0
  405188:	e4e4      	b.n	404b54 <_svfprintf_r+0x238>
  40518a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40518c:	e534      	b.n	404bf8 <_svfprintf_r+0x2dc>
  40518e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405190:	2b65      	cmp	r3, #101	; 0x65
  405192:	f340 80a7 	ble.w	4052e4 <_svfprintf_r+0x9c8>
  405196:	a815      	add	r0, sp, #84	; 0x54
  405198:	c80d      	ldmia	r0, {r0, r2, r3}
  40519a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40519c:	f004 fe7c 	bl	409e98 <__aeabi_dcmpeq>
  4051a0:	2800      	cmp	r0, #0
  4051a2:	f000 8150 	beq.w	405446 <_svfprintf_r+0xb2a>
  4051a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051a8:	4a20      	ldr	r2, [pc, #128]	; (40522c <_svfprintf_r+0x910>)
  4051aa:	f8c8 2000 	str.w	r2, [r8]
  4051ae:	3301      	adds	r3, #1
  4051b0:	3401      	adds	r4, #1
  4051b2:	2201      	movs	r2, #1
  4051b4:	2b07      	cmp	r3, #7
  4051b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4051b8:	9326      	str	r3, [sp, #152]	; 0x98
  4051ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4051be:	f300 836a 	bgt.w	405896 <_svfprintf_r+0xf7a>
  4051c2:	f108 0808 	add.w	r8, r8, #8
  4051c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4051c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4051ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051cc:	4293      	cmp	r3, r2
  4051ce:	db03      	blt.n	4051d8 <_svfprintf_r+0x8bc>
  4051d0:	9b07      	ldr	r3, [sp, #28]
  4051d2:	07dd      	lsls	r5, r3, #31
  4051d4:	f57f ad82 	bpl.w	404cdc <_svfprintf_r+0x3c0>
  4051d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4051dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4051de:	f8c8 2000 	str.w	r2, [r8]
  4051e2:	3301      	adds	r3, #1
  4051e4:	440c      	add	r4, r1
  4051e6:	2b07      	cmp	r3, #7
  4051e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4051ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4051ee:	9326      	str	r3, [sp, #152]	; 0x98
  4051f0:	f300 839e 	bgt.w	405930 <_svfprintf_r+0x1014>
  4051f4:	f108 0808 	add.w	r8, r8, #8
  4051f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051fa:	1e5e      	subs	r6, r3, #1
  4051fc:	2e00      	cmp	r6, #0
  4051fe:	f77f ad6d 	ble.w	404cdc <_svfprintf_r+0x3c0>
  405202:	2e10      	cmp	r6, #16
  405204:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405206:	4d0a      	ldr	r5, [pc, #40]	; (405230 <_svfprintf_r+0x914>)
  405208:	f340 81f5 	ble.w	4055f6 <_svfprintf_r+0xcda>
  40520c:	4622      	mov	r2, r4
  40520e:	2710      	movs	r7, #16
  405210:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405216:	e013      	b.n	405240 <_svfprintf_r+0x924>
  405218:	0040a534 	.word	0x0040a534
  40521c:	0040a520 	.word	0x0040a520
  405220:	7fefffff 	.word	0x7fefffff
  405224:	0040a514 	.word	0x0040a514
  405228:	0040a510 	.word	0x0040a510
  40522c:	0040a550 	.word	0x0040a550
  405230:	0040a564 	.word	0x0040a564
  405234:	f108 0808 	add.w	r8, r8, #8
  405238:	3e10      	subs	r6, #16
  40523a:	2e10      	cmp	r6, #16
  40523c:	f340 81da 	ble.w	4055f4 <_svfprintf_r+0xcd8>
  405240:	3301      	adds	r3, #1
  405242:	3210      	adds	r2, #16
  405244:	2b07      	cmp	r3, #7
  405246:	9227      	str	r2, [sp, #156]	; 0x9c
  405248:	9326      	str	r3, [sp, #152]	; 0x98
  40524a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40524e:	ddf1      	ble.n	405234 <_svfprintf_r+0x918>
  405250:	aa25      	add	r2, sp, #148	; 0x94
  405252:	4621      	mov	r1, r4
  405254:	4658      	mov	r0, fp
  405256:	f003 ff83 	bl	409160 <__ssprint_r>
  40525a:	2800      	cmp	r0, #0
  40525c:	f47f ac30 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405260:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405262:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405264:	46c8      	mov	r8, r9
  405266:	e7e7      	b.n	405238 <_svfprintf_r+0x91c>
  405268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40526a:	9a08      	ldr	r2, [sp, #32]
  40526c:	1a9f      	subs	r7, r3, r2
  40526e:	2f00      	cmp	r7, #0
  405270:	f77f ace5 	ble.w	404c3e <_svfprintf_r+0x322>
  405274:	2f10      	cmp	r7, #16
  405276:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405278:	4db6      	ldr	r5, [pc, #728]	; (405554 <_svfprintf_r+0xc38>)
  40527a:	dd27      	ble.n	4052cc <_svfprintf_r+0x9b0>
  40527c:	4642      	mov	r2, r8
  40527e:	4621      	mov	r1, r4
  405280:	46b0      	mov	r8, r6
  405282:	f04f 0b10 	mov.w	fp, #16
  405286:	462e      	mov	r6, r5
  405288:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40528a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40528c:	e004      	b.n	405298 <_svfprintf_r+0x97c>
  40528e:	3f10      	subs	r7, #16
  405290:	2f10      	cmp	r7, #16
  405292:	f102 0208 	add.w	r2, r2, #8
  405296:	dd15      	ble.n	4052c4 <_svfprintf_r+0x9a8>
  405298:	3301      	adds	r3, #1
  40529a:	3110      	adds	r1, #16
  40529c:	2b07      	cmp	r3, #7
  40529e:	9127      	str	r1, [sp, #156]	; 0x9c
  4052a0:	9326      	str	r3, [sp, #152]	; 0x98
  4052a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4052a6:	ddf2      	ble.n	40528e <_svfprintf_r+0x972>
  4052a8:	aa25      	add	r2, sp, #148	; 0x94
  4052aa:	4629      	mov	r1, r5
  4052ac:	4620      	mov	r0, r4
  4052ae:	f003 ff57 	bl	409160 <__ssprint_r>
  4052b2:	2800      	cmp	r0, #0
  4052b4:	f47f ac04 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4052b8:	3f10      	subs	r7, #16
  4052ba:	2f10      	cmp	r7, #16
  4052bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4052be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052c0:	464a      	mov	r2, r9
  4052c2:	dce9      	bgt.n	405298 <_svfprintf_r+0x97c>
  4052c4:	4635      	mov	r5, r6
  4052c6:	460c      	mov	r4, r1
  4052c8:	4646      	mov	r6, r8
  4052ca:	4690      	mov	r8, r2
  4052cc:	3301      	adds	r3, #1
  4052ce:	443c      	add	r4, r7
  4052d0:	2b07      	cmp	r3, #7
  4052d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4052d4:	9326      	str	r3, [sp, #152]	; 0x98
  4052d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4052da:	f300 8232 	bgt.w	405742 <_svfprintf_r+0xe26>
  4052de:	f108 0808 	add.w	r8, r8, #8
  4052e2:	e4ac      	b.n	404c3e <_svfprintf_r+0x322>
  4052e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4052e8:	2b01      	cmp	r3, #1
  4052ea:	f340 81fe 	ble.w	4056ea <_svfprintf_r+0xdce>
  4052ee:	3701      	adds	r7, #1
  4052f0:	3401      	adds	r4, #1
  4052f2:	2301      	movs	r3, #1
  4052f4:	2f07      	cmp	r7, #7
  4052f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4052f8:	9726      	str	r7, [sp, #152]	; 0x98
  4052fa:	f8c8 6000 	str.w	r6, [r8]
  4052fe:	f8c8 3004 	str.w	r3, [r8, #4]
  405302:	f300 8203 	bgt.w	40570c <_svfprintf_r+0xdf0>
  405306:	f108 0808 	add.w	r8, r8, #8
  40530a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40530c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40530e:	f8c8 3000 	str.w	r3, [r8]
  405312:	3701      	adds	r7, #1
  405314:	4414      	add	r4, r2
  405316:	2f07      	cmp	r7, #7
  405318:	9427      	str	r4, [sp, #156]	; 0x9c
  40531a:	9726      	str	r7, [sp, #152]	; 0x98
  40531c:	f8c8 2004 	str.w	r2, [r8, #4]
  405320:	f300 8200 	bgt.w	405724 <_svfprintf_r+0xe08>
  405324:	f108 0808 	add.w	r8, r8, #8
  405328:	a815      	add	r0, sp, #84	; 0x54
  40532a:	c80d      	ldmia	r0, {r0, r2, r3}
  40532c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40532e:	f004 fdb3 	bl	409e98 <__aeabi_dcmpeq>
  405332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405334:	2800      	cmp	r0, #0
  405336:	f040 8101 	bne.w	40553c <_svfprintf_r+0xc20>
  40533a:	3b01      	subs	r3, #1
  40533c:	3701      	adds	r7, #1
  40533e:	3601      	adds	r6, #1
  405340:	441c      	add	r4, r3
  405342:	2f07      	cmp	r7, #7
  405344:	9726      	str	r7, [sp, #152]	; 0x98
  405346:	9427      	str	r4, [sp, #156]	; 0x9c
  405348:	f8c8 6000 	str.w	r6, [r8]
  40534c:	f8c8 3004 	str.w	r3, [r8, #4]
  405350:	f300 8127 	bgt.w	4055a2 <_svfprintf_r+0xc86>
  405354:	f108 0808 	add.w	r8, r8, #8
  405358:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40535a:	f8c8 2004 	str.w	r2, [r8, #4]
  40535e:	3701      	adds	r7, #1
  405360:	4414      	add	r4, r2
  405362:	ab21      	add	r3, sp, #132	; 0x84
  405364:	2f07      	cmp	r7, #7
  405366:	9427      	str	r4, [sp, #156]	; 0x9c
  405368:	9726      	str	r7, [sp, #152]	; 0x98
  40536a:	f8c8 3000 	str.w	r3, [r8]
  40536e:	f77f acb3 	ble.w	404cd8 <_svfprintf_r+0x3bc>
  405372:	aa25      	add	r2, sp, #148	; 0x94
  405374:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405376:	980c      	ldr	r0, [sp, #48]	; 0x30
  405378:	f003 fef2 	bl	409160 <__ssprint_r>
  40537c:	2800      	cmp	r0, #0
  40537e:	f47f ab9f 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405382:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405384:	46c8      	mov	r8, r9
  405386:	e4a9      	b.n	404cdc <_svfprintf_r+0x3c0>
  405388:	aa25      	add	r2, sp, #148	; 0x94
  40538a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40538c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40538e:	f003 fee7 	bl	409160 <__ssprint_r>
  405392:	2800      	cmp	r0, #0
  405394:	f43f aceb 	beq.w	404d6e <_svfprintf_r+0x452>
  405398:	f7ff bb92 	b.w	404ac0 <_svfprintf_r+0x1a4>
  40539c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4053a0:	2b01      	cmp	r3, #1
  4053a2:	f000 8134 	beq.w	40560e <_svfprintf_r+0xcf2>
  4053a6:	2b02      	cmp	r3, #2
  4053a8:	d125      	bne.n	4053f6 <_svfprintf_r+0xada>
  4053aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4053ae:	2400      	movs	r4, #0
  4053b0:	2500      	movs	r5, #0
  4053b2:	e61e      	b.n	404ff2 <_svfprintf_r+0x6d6>
  4053b4:	aa25      	add	r2, sp, #148	; 0x94
  4053b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053ba:	f003 fed1 	bl	409160 <__ssprint_r>
  4053be:	2800      	cmp	r0, #0
  4053c0:	f47f ab7e 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4053c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053c6:	46c8      	mov	r8, r9
  4053c8:	e475      	b.n	404cb6 <_svfprintf_r+0x39a>
  4053ca:	aa25      	add	r2, sp, #148	; 0x94
  4053cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053d0:	f003 fec6 	bl	409160 <__ssprint_r>
  4053d4:	2800      	cmp	r0, #0
  4053d6:	f47f ab73 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4053da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053dc:	46c8      	mov	r8, r9
  4053de:	e41b      	b.n	404c18 <_svfprintf_r+0x2fc>
  4053e0:	aa25      	add	r2, sp, #148	; 0x94
  4053e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053e6:	f003 febb 	bl	409160 <__ssprint_r>
  4053ea:	2800      	cmp	r0, #0
  4053ec:	f47f ab68 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4053f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053f2:	46c8      	mov	r8, r9
  4053f4:	e420      	b.n	404c38 <_svfprintf_r+0x31c>
  4053f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4053fa:	2400      	movs	r4, #0
  4053fc:	2500      	movs	r5, #0
  4053fe:	4649      	mov	r1, r9
  405400:	e000      	b.n	405404 <_svfprintf_r+0xae8>
  405402:	4631      	mov	r1, r6
  405404:	08e2      	lsrs	r2, r4, #3
  405406:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40540a:	08e8      	lsrs	r0, r5, #3
  40540c:	f004 0307 	and.w	r3, r4, #7
  405410:	4605      	mov	r5, r0
  405412:	4614      	mov	r4, r2
  405414:	3330      	adds	r3, #48	; 0x30
  405416:	ea54 0205 	orrs.w	r2, r4, r5
  40541a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40541e:	f101 36ff 	add.w	r6, r1, #4294967295
  405422:	d1ee      	bne.n	405402 <_svfprintf_r+0xae6>
  405424:	9a07      	ldr	r2, [sp, #28]
  405426:	07d2      	lsls	r2, r2, #31
  405428:	f57f adf3 	bpl.w	405012 <_svfprintf_r+0x6f6>
  40542c:	2b30      	cmp	r3, #48	; 0x30
  40542e:	f43f adf0 	beq.w	405012 <_svfprintf_r+0x6f6>
  405432:	3902      	subs	r1, #2
  405434:	2330      	movs	r3, #48	; 0x30
  405436:	f806 3c01 	strb.w	r3, [r6, #-1]
  40543a:	eba9 0301 	sub.w	r3, r9, r1
  40543e:	930e      	str	r3, [sp, #56]	; 0x38
  405440:	460e      	mov	r6, r1
  405442:	f7ff bb7b 	b.w	404b3c <_svfprintf_r+0x220>
  405446:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405448:	2900      	cmp	r1, #0
  40544a:	f340 822e 	ble.w	4058aa <_svfprintf_r+0xf8e>
  40544e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405452:	4293      	cmp	r3, r2
  405454:	bfa8      	it	ge
  405456:	4613      	movge	r3, r2
  405458:	2b00      	cmp	r3, #0
  40545a:	461f      	mov	r7, r3
  40545c:	dd0d      	ble.n	40547a <_svfprintf_r+0xb5e>
  40545e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405460:	f8c8 6000 	str.w	r6, [r8]
  405464:	3301      	adds	r3, #1
  405466:	443c      	add	r4, r7
  405468:	2b07      	cmp	r3, #7
  40546a:	9427      	str	r4, [sp, #156]	; 0x9c
  40546c:	f8c8 7004 	str.w	r7, [r8, #4]
  405470:	9326      	str	r3, [sp, #152]	; 0x98
  405472:	f300 831f 	bgt.w	405ab4 <_svfprintf_r+0x1198>
  405476:	f108 0808 	add.w	r8, r8, #8
  40547a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40547c:	2f00      	cmp	r7, #0
  40547e:	bfa8      	it	ge
  405480:	1bdb      	subge	r3, r3, r7
  405482:	2b00      	cmp	r3, #0
  405484:	461f      	mov	r7, r3
  405486:	f340 80d6 	ble.w	405636 <_svfprintf_r+0xd1a>
  40548a:	2f10      	cmp	r7, #16
  40548c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40548e:	4d31      	ldr	r5, [pc, #196]	; (405554 <_svfprintf_r+0xc38>)
  405490:	f340 81ed 	ble.w	40586e <_svfprintf_r+0xf52>
  405494:	4642      	mov	r2, r8
  405496:	4621      	mov	r1, r4
  405498:	46b0      	mov	r8, r6
  40549a:	f04f 0b10 	mov.w	fp, #16
  40549e:	462e      	mov	r6, r5
  4054a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4054a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4054a4:	e004      	b.n	4054b0 <_svfprintf_r+0xb94>
  4054a6:	3208      	adds	r2, #8
  4054a8:	3f10      	subs	r7, #16
  4054aa:	2f10      	cmp	r7, #16
  4054ac:	f340 81db 	ble.w	405866 <_svfprintf_r+0xf4a>
  4054b0:	3301      	adds	r3, #1
  4054b2:	3110      	adds	r1, #16
  4054b4:	2b07      	cmp	r3, #7
  4054b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4054b8:	9326      	str	r3, [sp, #152]	; 0x98
  4054ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4054be:	ddf2      	ble.n	4054a6 <_svfprintf_r+0xb8a>
  4054c0:	aa25      	add	r2, sp, #148	; 0x94
  4054c2:	4629      	mov	r1, r5
  4054c4:	4620      	mov	r0, r4
  4054c6:	f003 fe4b 	bl	409160 <__ssprint_r>
  4054ca:	2800      	cmp	r0, #0
  4054cc:	f47f aaf8 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4054d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4054d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054d4:	464a      	mov	r2, r9
  4054d6:	e7e7      	b.n	4054a8 <_svfprintf_r+0xb8c>
  4054d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054da:	930e      	str	r3, [sp, #56]	; 0x38
  4054dc:	464e      	mov	r6, r9
  4054de:	f7ff bb2d 	b.w	404b3c <_svfprintf_r+0x220>
  4054e2:	2d00      	cmp	r5, #0
  4054e4:	bf08      	it	eq
  4054e6:	2c0a      	cmpeq	r4, #10
  4054e8:	f0c0 808f 	bcc.w	40560a <_svfprintf_r+0xcee>
  4054ec:	464e      	mov	r6, r9
  4054ee:	4620      	mov	r0, r4
  4054f0:	4629      	mov	r1, r5
  4054f2:	220a      	movs	r2, #10
  4054f4:	2300      	movs	r3, #0
  4054f6:	f004 fd3f 	bl	409f78 <__aeabi_uldivmod>
  4054fa:	3230      	adds	r2, #48	; 0x30
  4054fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405500:	4620      	mov	r0, r4
  405502:	4629      	mov	r1, r5
  405504:	2300      	movs	r3, #0
  405506:	220a      	movs	r2, #10
  405508:	f004 fd36 	bl	409f78 <__aeabi_uldivmod>
  40550c:	4604      	mov	r4, r0
  40550e:	460d      	mov	r5, r1
  405510:	ea54 0305 	orrs.w	r3, r4, r5
  405514:	d1eb      	bne.n	4054ee <_svfprintf_r+0xbd2>
  405516:	eba9 0306 	sub.w	r3, r9, r6
  40551a:	930e      	str	r3, [sp, #56]	; 0x38
  40551c:	f7ff bb0e 	b.w	404b3c <_svfprintf_r+0x220>
  405520:	aa25      	add	r2, sp, #148	; 0x94
  405522:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405524:	980c      	ldr	r0, [sp, #48]	; 0x30
  405526:	f003 fe1b 	bl	409160 <__ssprint_r>
  40552a:	2800      	cmp	r0, #0
  40552c:	f47f aac8 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405530:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405534:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405536:	46c8      	mov	r8, r9
  405538:	f7ff bb5e 	b.w	404bf8 <_svfprintf_r+0x2dc>
  40553c:	1e5e      	subs	r6, r3, #1
  40553e:	2e00      	cmp	r6, #0
  405540:	f77f af0a 	ble.w	405358 <_svfprintf_r+0xa3c>
  405544:	2e10      	cmp	r6, #16
  405546:	4d03      	ldr	r5, [pc, #12]	; (405554 <_svfprintf_r+0xc38>)
  405548:	dd22      	ble.n	405590 <_svfprintf_r+0xc74>
  40554a:	4622      	mov	r2, r4
  40554c:	f04f 0b10 	mov.w	fp, #16
  405550:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405552:	e006      	b.n	405562 <_svfprintf_r+0xc46>
  405554:	0040a564 	.word	0x0040a564
  405558:	3e10      	subs	r6, #16
  40555a:	2e10      	cmp	r6, #16
  40555c:	f108 0808 	add.w	r8, r8, #8
  405560:	dd15      	ble.n	40558e <_svfprintf_r+0xc72>
  405562:	3701      	adds	r7, #1
  405564:	3210      	adds	r2, #16
  405566:	2f07      	cmp	r7, #7
  405568:	9227      	str	r2, [sp, #156]	; 0x9c
  40556a:	9726      	str	r7, [sp, #152]	; 0x98
  40556c:	e888 0820 	stmia.w	r8, {r5, fp}
  405570:	ddf2      	ble.n	405558 <_svfprintf_r+0xc3c>
  405572:	aa25      	add	r2, sp, #148	; 0x94
  405574:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405576:	4620      	mov	r0, r4
  405578:	f003 fdf2 	bl	409160 <__ssprint_r>
  40557c:	2800      	cmp	r0, #0
  40557e:	f47f aa9f 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405582:	3e10      	subs	r6, #16
  405584:	2e10      	cmp	r6, #16
  405586:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405588:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40558a:	46c8      	mov	r8, r9
  40558c:	dce9      	bgt.n	405562 <_svfprintf_r+0xc46>
  40558e:	4614      	mov	r4, r2
  405590:	3701      	adds	r7, #1
  405592:	4434      	add	r4, r6
  405594:	2f07      	cmp	r7, #7
  405596:	9427      	str	r4, [sp, #156]	; 0x9c
  405598:	9726      	str	r7, [sp, #152]	; 0x98
  40559a:	e888 0060 	stmia.w	r8, {r5, r6}
  40559e:	f77f aed9 	ble.w	405354 <_svfprintf_r+0xa38>
  4055a2:	aa25      	add	r2, sp, #148	; 0x94
  4055a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055a8:	f003 fdda 	bl	409160 <__ssprint_r>
  4055ac:	2800      	cmp	r0, #0
  4055ae:	f47f aa87 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4055b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4055b6:	46c8      	mov	r8, r9
  4055b8:	e6ce      	b.n	405358 <_svfprintf_r+0xa3c>
  4055ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055bc:	6814      	ldr	r4, [r2, #0]
  4055be:	4613      	mov	r3, r2
  4055c0:	3304      	adds	r3, #4
  4055c2:	17e5      	asrs	r5, r4, #31
  4055c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4055c6:	4622      	mov	r2, r4
  4055c8:	462b      	mov	r3, r5
  4055ca:	e4fa      	b.n	404fc2 <_svfprintf_r+0x6a6>
  4055cc:	3204      	adds	r2, #4
  4055ce:	681c      	ldr	r4, [r3, #0]
  4055d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4055d2:	2301      	movs	r3, #1
  4055d4:	2500      	movs	r5, #0
  4055d6:	f7ff ba94 	b.w	404b02 <_svfprintf_r+0x1e6>
  4055da:	681c      	ldr	r4, [r3, #0]
  4055dc:	3304      	adds	r3, #4
  4055de:	930f      	str	r3, [sp, #60]	; 0x3c
  4055e0:	2500      	movs	r5, #0
  4055e2:	e421      	b.n	404e28 <_svfprintf_r+0x50c>
  4055e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4055e6:	460a      	mov	r2, r1
  4055e8:	3204      	adds	r2, #4
  4055ea:	680c      	ldr	r4, [r1, #0]
  4055ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4055ee:	2500      	movs	r5, #0
  4055f0:	f7ff ba87 	b.w	404b02 <_svfprintf_r+0x1e6>
  4055f4:	4614      	mov	r4, r2
  4055f6:	3301      	adds	r3, #1
  4055f8:	4434      	add	r4, r6
  4055fa:	2b07      	cmp	r3, #7
  4055fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4055fe:	9326      	str	r3, [sp, #152]	; 0x98
  405600:	e888 0060 	stmia.w	r8, {r5, r6}
  405604:	f77f ab68 	ble.w	404cd8 <_svfprintf_r+0x3bc>
  405608:	e6b3      	b.n	405372 <_svfprintf_r+0xa56>
  40560a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40560e:	f8cd b01c 	str.w	fp, [sp, #28]
  405612:	ae42      	add	r6, sp, #264	; 0x108
  405614:	3430      	adds	r4, #48	; 0x30
  405616:	2301      	movs	r3, #1
  405618:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40561c:	930e      	str	r3, [sp, #56]	; 0x38
  40561e:	f7ff ba8d 	b.w	404b3c <_svfprintf_r+0x220>
  405622:	aa25      	add	r2, sp, #148	; 0x94
  405624:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405626:	980c      	ldr	r0, [sp, #48]	; 0x30
  405628:	f003 fd9a 	bl	409160 <__ssprint_r>
  40562c:	2800      	cmp	r0, #0
  40562e:	f47f aa47 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405632:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405634:	46c8      	mov	r8, r9
  405636:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40563a:	429a      	cmp	r2, r3
  40563c:	db44      	blt.n	4056c8 <_svfprintf_r+0xdac>
  40563e:	9b07      	ldr	r3, [sp, #28]
  405640:	07d9      	lsls	r1, r3, #31
  405642:	d441      	bmi.n	4056c8 <_svfprintf_r+0xdac>
  405644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405646:	9812      	ldr	r0, [sp, #72]	; 0x48
  405648:	1a9a      	subs	r2, r3, r2
  40564a:	1a1d      	subs	r5, r3, r0
  40564c:	4295      	cmp	r5, r2
  40564e:	bfa8      	it	ge
  405650:	4615      	movge	r5, r2
  405652:	2d00      	cmp	r5, #0
  405654:	dd0e      	ble.n	405674 <_svfprintf_r+0xd58>
  405656:	9926      	ldr	r1, [sp, #152]	; 0x98
  405658:	f8c8 5004 	str.w	r5, [r8, #4]
  40565c:	3101      	adds	r1, #1
  40565e:	4406      	add	r6, r0
  405660:	442c      	add	r4, r5
  405662:	2907      	cmp	r1, #7
  405664:	f8c8 6000 	str.w	r6, [r8]
  405668:	9427      	str	r4, [sp, #156]	; 0x9c
  40566a:	9126      	str	r1, [sp, #152]	; 0x98
  40566c:	f300 823b 	bgt.w	405ae6 <_svfprintf_r+0x11ca>
  405670:	f108 0808 	add.w	r8, r8, #8
  405674:	2d00      	cmp	r5, #0
  405676:	bfac      	ite	ge
  405678:	1b56      	subge	r6, r2, r5
  40567a:	4616      	movlt	r6, r2
  40567c:	2e00      	cmp	r6, #0
  40567e:	f77f ab2d 	ble.w	404cdc <_svfprintf_r+0x3c0>
  405682:	2e10      	cmp	r6, #16
  405684:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405686:	4db0      	ldr	r5, [pc, #704]	; (405948 <_svfprintf_r+0x102c>)
  405688:	ddb5      	ble.n	4055f6 <_svfprintf_r+0xcda>
  40568a:	4622      	mov	r2, r4
  40568c:	2710      	movs	r7, #16
  40568e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405692:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405694:	e004      	b.n	4056a0 <_svfprintf_r+0xd84>
  405696:	f108 0808 	add.w	r8, r8, #8
  40569a:	3e10      	subs	r6, #16
  40569c:	2e10      	cmp	r6, #16
  40569e:	dda9      	ble.n	4055f4 <_svfprintf_r+0xcd8>
  4056a0:	3301      	adds	r3, #1
  4056a2:	3210      	adds	r2, #16
  4056a4:	2b07      	cmp	r3, #7
  4056a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4056a8:	9326      	str	r3, [sp, #152]	; 0x98
  4056aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4056ae:	ddf2      	ble.n	405696 <_svfprintf_r+0xd7a>
  4056b0:	aa25      	add	r2, sp, #148	; 0x94
  4056b2:	4621      	mov	r1, r4
  4056b4:	4658      	mov	r0, fp
  4056b6:	f003 fd53 	bl	409160 <__ssprint_r>
  4056ba:	2800      	cmp	r0, #0
  4056bc:	f47f aa00 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4056c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4056c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056c4:	46c8      	mov	r8, r9
  4056c6:	e7e8      	b.n	40569a <_svfprintf_r+0xd7e>
  4056c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4056cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4056ce:	f8c8 1000 	str.w	r1, [r8]
  4056d2:	3301      	adds	r3, #1
  4056d4:	4404      	add	r4, r0
  4056d6:	2b07      	cmp	r3, #7
  4056d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4056da:	f8c8 0004 	str.w	r0, [r8, #4]
  4056de:	9326      	str	r3, [sp, #152]	; 0x98
  4056e0:	f300 81f5 	bgt.w	405ace <_svfprintf_r+0x11b2>
  4056e4:	f108 0808 	add.w	r8, r8, #8
  4056e8:	e7ac      	b.n	405644 <_svfprintf_r+0xd28>
  4056ea:	9b07      	ldr	r3, [sp, #28]
  4056ec:	07da      	lsls	r2, r3, #31
  4056ee:	f53f adfe 	bmi.w	4052ee <_svfprintf_r+0x9d2>
  4056f2:	3701      	adds	r7, #1
  4056f4:	3401      	adds	r4, #1
  4056f6:	2301      	movs	r3, #1
  4056f8:	2f07      	cmp	r7, #7
  4056fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4056fc:	9726      	str	r7, [sp, #152]	; 0x98
  4056fe:	f8c8 6000 	str.w	r6, [r8]
  405702:	f8c8 3004 	str.w	r3, [r8, #4]
  405706:	f77f ae25 	ble.w	405354 <_svfprintf_r+0xa38>
  40570a:	e74a      	b.n	4055a2 <_svfprintf_r+0xc86>
  40570c:	aa25      	add	r2, sp, #148	; 0x94
  40570e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405710:	980c      	ldr	r0, [sp, #48]	; 0x30
  405712:	f003 fd25 	bl	409160 <__ssprint_r>
  405716:	2800      	cmp	r0, #0
  405718:	f47f a9d2 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  40571c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40571e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405720:	46c8      	mov	r8, r9
  405722:	e5f2      	b.n	40530a <_svfprintf_r+0x9ee>
  405724:	aa25      	add	r2, sp, #148	; 0x94
  405726:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405728:	980c      	ldr	r0, [sp, #48]	; 0x30
  40572a:	f003 fd19 	bl	409160 <__ssprint_r>
  40572e:	2800      	cmp	r0, #0
  405730:	f47f a9c6 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405734:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405736:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405738:	46c8      	mov	r8, r9
  40573a:	e5f5      	b.n	405328 <_svfprintf_r+0xa0c>
  40573c:	464e      	mov	r6, r9
  40573e:	f7ff b9fd 	b.w	404b3c <_svfprintf_r+0x220>
  405742:	aa25      	add	r2, sp, #148	; 0x94
  405744:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405746:	980c      	ldr	r0, [sp, #48]	; 0x30
  405748:	f003 fd0a 	bl	409160 <__ssprint_r>
  40574c:	2800      	cmp	r0, #0
  40574e:	f47f a9b7 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405752:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405754:	46c8      	mov	r8, r9
  405756:	f7ff ba72 	b.w	404c3e <_svfprintf_r+0x322>
  40575a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40575c:	4622      	mov	r2, r4
  40575e:	4620      	mov	r0, r4
  405760:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405762:	4623      	mov	r3, r4
  405764:	4621      	mov	r1, r4
  405766:	f004 fbc9 	bl	409efc <__aeabi_dcmpun>
  40576a:	2800      	cmp	r0, #0
  40576c:	f040 8286 	bne.w	405c7c <_svfprintf_r+0x1360>
  405770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405772:	3301      	adds	r3, #1
  405774:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405776:	f023 0320 	bic.w	r3, r3, #32
  40577a:	930e      	str	r3, [sp, #56]	; 0x38
  40577c:	f000 81e2 	beq.w	405b44 <_svfprintf_r+0x1228>
  405780:	2b47      	cmp	r3, #71	; 0x47
  405782:	f000 811e 	beq.w	4059c2 <_svfprintf_r+0x10a6>
  405786:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40578a:	9307      	str	r3, [sp, #28]
  40578c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40578e:	1e1f      	subs	r7, r3, #0
  405790:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405792:	9308      	str	r3, [sp, #32]
  405794:	bfbb      	ittet	lt
  405796:	463b      	movlt	r3, r7
  405798:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40579c:	2300      	movge	r3, #0
  40579e:	232d      	movlt	r3, #45	; 0x2d
  4057a0:	9310      	str	r3, [sp, #64]	; 0x40
  4057a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057a4:	2b66      	cmp	r3, #102	; 0x66
  4057a6:	f000 81bb 	beq.w	405b20 <_svfprintf_r+0x1204>
  4057aa:	2b46      	cmp	r3, #70	; 0x46
  4057ac:	f000 80df 	beq.w	40596e <_svfprintf_r+0x1052>
  4057b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057b2:	9a08      	ldr	r2, [sp, #32]
  4057b4:	2b45      	cmp	r3, #69	; 0x45
  4057b6:	bf0c      	ite	eq
  4057b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4057ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4057bc:	a823      	add	r0, sp, #140	; 0x8c
  4057be:	a920      	add	r1, sp, #128	; 0x80
  4057c0:	bf08      	it	eq
  4057c2:	1c5d      	addeq	r5, r3, #1
  4057c4:	9004      	str	r0, [sp, #16]
  4057c6:	9103      	str	r1, [sp, #12]
  4057c8:	a81f      	add	r0, sp, #124	; 0x7c
  4057ca:	2102      	movs	r1, #2
  4057cc:	463b      	mov	r3, r7
  4057ce:	9002      	str	r0, [sp, #8]
  4057d0:	9501      	str	r5, [sp, #4]
  4057d2:	9100      	str	r1, [sp, #0]
  4057d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057d6:	f001 faa3 	bl	406d20 <_dtoa_r>
  4057da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057dc:	2b67      	cmp	r3, #103	; 0x67
  4057de:	4606      	mov	r6, r0
  4057e0:	f040 81e0 	bne.w	405ba4 <_svfprintf_r+0x1288>
  4057e4:	f01b 0f01 	tst.w	fp, #1
  4057e8:	f000 8246 	beq.w	405c78 <_svfprintf_r+0x135c>
  4057ec:	1974      	adds	r4, r6, r5
  4057ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4057f0:	9808      	ldr	r0, [sp, #32]
  4057f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4057f4:	4639      	mov	r1, r7
  4057f6:	f004 fb4f 	bl	409e98 <__aeabi_dcmpeq>
  4057fa:	2800      	cmp	r0, #0
  4057fc:	f040 8165 	bne.w	405aca <_svfprintf_r+0x11ae>
  405800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405802:	42a3      	cmp	r3, r4
  405804:	d206      	bcs.n	405814 <_svfprintf_r+0xef8>
  405806:	2130      	movs	r1, #48	; 0x30
  405808:	1c5a      	adds	r2, r3, #1
  40580a:	9223      	str	r2, [sp, #140]	; 0x8c
  40580c:	7019      	strb	r1, [r3, #0]
  40580e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405810:	429c      	cmp	r4, r3
  405812:	d8f9      	bhi.n	405808 <_svfprintf_r+0xeec>
  405814:	1b9b      	subs	r3, r3, r6
  405816:	9313      	str	r3, [sp, #76]	; 0x4c
  405818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40581a:	2b47      	cmp	r3, #71	; 0x47
  40581c:	f000 80e9 	beq.w	4059f2 <_svfprintf_r+0x10d6>
  405820:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405822:	2b65      	cmp	r3, #101	; 0x65
  405824:	f340 81cd 	ble.w	405bc2 <_svfprintf_r+0x12a6>
  405828:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40582a:	2b66      	cmp	r3, #102	; 0x66
  40582c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40582e:	9312      	str	r3, [sp, #72]	; 0x48
  405830:	f000 819e 	beq.w	405b70 <_svfprintf_r+0x1254>
  405834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405836:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405838:	4619      	mov	r1, r3
  40583a:	4291      	cmp	r1, r2
  40583c:	f300 818a 	bgt.w	405b54 <_svfprintf_r+0x1238>
  405840:	f01b 0f01 	tst.w	fp, #1
  405844:	f040 8213 	bne.w	405c6e <_svfprintf_r+0x1352>
  405848:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40584c:	9308      	str	r3, [sp, #32]
  40584e:	2367      	movs	r3, #103	; 0x67
  405850:	920e      	str	r2, [sp, #56]	; 0x38
  405852:	9311      	str	r3, [sp, #68]	; 0x44
  405854:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405856:	2b00      	cmp	r3, #0
  405858:	f040 80c4 	bne.w	4059e4 <_svfprintf_r+0x10c8>
  40585c:	930a      	str	r3, [sp, #40]	; 0x28
  40585e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405862:	f7ff b973 	b.w	404b4c <_svfprintf_r+0x230>
  405866:	4635      	mov	r5, r6
  405868:	460c      	mov	r4, r1
  40586a:	4646      	mov	r6, r8
  40586c:	4690      	mov	r8, r2
  40586e:	3301      	adds	r3, #1
  405870:	443c      	add	r4, r7
  405872:	2b07      	cmp	r3, #7
  405874:	9427      	str	r4, [sp, #156]	; 0x9c
  405876:	9326      	str	r3, [sp, #152]	; 0x98
  405878:	e888 00a0 	stmia.w	r8, {r5, r7}
  40587c:	f73f aed1 	bgt.w	405622 <_svfprintf_r+0xd06>
  405880:	f108 0808 	add.w	r8, r8, #8
  405884:	e6d7      	b.n	405636 <_svfprintf_r+0xd1a>
  405886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405888:	6813      	ldr	r3, [r2, #0]
  40588a:	3204      	adds	r2, #4
  40588c:	920f      	str	r2, [sp, #60]	; 0x3c
  40588e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405890:	601a      	str	r2, [r3, #0]
  405892:	f7ff b86a 	b.w	40496a <_svfprintf_r+0x4e>
  405896:	aa25      	add	r2, sp, #148	; 0x94
  405898:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40589a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40589c:	f003 fc60 	bl	409160 <__ssprint_r>
  4058a0:	2800      	cmp	r0, #0
  4058a2:	f47f a90d 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4058a6:	46c8      	mov	r8, r9
  4058a8:	e48d      	b.n	4051c6 <_svfprintf_r+0x8aa>
  4058aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058ac:	4a27      	ldr	r2, [pc, #156]	; (40594c <_svfprintf_r+0x1030>)
  4058ae:	f8c8 2000 	str.w	r2, [r8]
  4058b2:	3301      	adds	r3, #1
  4058b4:	3401      	adds	r4, #1
  4058b6:	2201      	movs	r2, #1
  4058b8:	2b07      	cmp	r3, #7
  4058ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4058bc:	9326      	str	r3, [sp, #152]	; 0x98
  4058be:	f8c8 2004 	str.w	r2, [r8, #4]
  4058c2:	dc72      	bgt.n	4059aa <_svfprintf_r+0x108e>
  4058c4:	f108 0808 	add.w	r8, r8, #8
  4058c8:	b929      	cbnz	r1, 4058d6 <_svfprintf_r+0xfba>
  4058ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4058cc:	b91b      	cbnz	r3, 4058d6 <_svfprintf_r+0xfba>
  4058ce:	9b07      	ldr	r3, [sp, #28]
  4058d0:	07d8      	lsls	r0, r3, #31
  4058d2:	f57f aa03 	bpl.w	404cdc <_svfprintf_r+0x3c0>
  4058d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058d8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4058da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4058dc:	f8c8 2000 	str.w	r2, [r8]
  4058e0:	3301      	adds	r3, #1
  4058e2:	4602      	mov	r2, r0
  4058e4:	4422      	add	r2, r4
  4058e6:	2b07      	cmp	r3, #7
  4058e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4058ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4058ee:	9326      	str	r3, [sp, #152]	; 0x98
  4058f0:	f300 818d 	bgt.w	405c0e <_svfprintf_r+0x12f2>
  4058f4:	f108 0808 	add.w	r8, r8, #8
  4058f8:	2900      	cmp	r1, #0
  4058fa:	f2c0 8165 	blt.w	405bc8 <_svfprintf_r+0x12ac>
  4058fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405900:	f8c8 6000 	str.w	r6, [r8]
  405904:	3301      	adds	r3, #1
  405906:	188c      	adds	r4, r1, r2
  405908:	2b07      	cmp	r3, #7
  40590a:	9427      	str	r4, [sp, #156]	; 0x9c
  40590c:	9326      	str	r3, [sp, #152]	; 0x98
  40590e:	f8c8 1004 	str.w	r1, [r8, #4]
  405912:	f77f a9e1 	ble.w	404cd8 <_svfprintf_r+0x3bc>
  405916:	e52c      	b.n	405372 <_svfprintf_r+0xa56>
  405918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40591a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40591c:	6813      	ldr	r3, [r2, #0]
  40591e:	17cd      	asrs	r5, r1, #31
  405920:	4608      	mov	r0, r1
  405922:	3204      	adds	r2, #4
  405924:	4629      	mov	r1, r5
  405926:	920f      	str	r2, [sp, #60]	; 0x3c
  405928:	e9c3 0100 	strd	r0, r1, [r3]
  40592c:	f7ff b81d 	b.w	40496a <_svfprintf_r+0x4e>
  405930:	aa25      	add	r2, sp, #148	; 0x94
  405932:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405934:	980c      	ldr	r0, [sp, #48]	; 0x30
  405936:	f003 fc13 	bl	409160 <__ssprint_r>
  40593a:	2800      	cmp	r0, #0
  40593c:	f47f a8c0 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405940:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405942:	46c8      	mov	r8, r9
  405944:	e458      	b.n	4051f8 <_svfprintf_r+0x8dc>
  405946:	bf00      	nop
  405948:	0040a564 	.word	0x0040a564
  40594c:	0040a550 	.word	0x0040a550
  405950:	2140      	movs	r1, #64	; 0x40
  405952:	980c      	ldr	r0, [sp, #48]	; 0x30
  405954:	f7fe f8f6 	bl	403b44 <_malloc_r>
  405958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40595a:	6010      	str	r0, [r2, #0]
  40595c:	6110      	str	r0, [r2, #16]
  40595e:	2800      	cmp	r0, #0
  405960:	f000 81f2 	beq.w	405d48 <_svfprintf_r+0x142c>
  405964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405966:	2340      	movs	r3, #64	; 0x40
  405968:	6153      	str	r3, [r2, #20]
  40596a:	f7fe bfee 	b.w	40494a <_svfprintf_r+0x2e>
  40596e:	a823      	add	r0, sp, #140	; 0x8c
  405970:	a920      	add	r1, sp, #128	; 0x80
  405972:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405974:	9004      	str	r0, [sp, #16]
  405976:	9103      	str	r1, [sp, #12]
  405978:	a81f      	add	r0, sp, #124	; 0x7c
  40597a:	2103      	movs	r1, #3
  40597c:	9002      	str	r0, [sp, #8]
  40597e:	9a08      	ldr	r2, [sp, #32]
  405980:	9401      	str	r4, [sp, #4]
  405982:	463b      	mov	r3, r7
  405984:	9100      	str	r1, [sp, #0]
  405986:	980c      	ldr	r0, [sp, #48]	; 0x30
  405988:	f001 f9ca 	bl	406d20 <_dtoa_r>
  40598c:	4625      	mov	r5, r4
  40598e:	4606      	mov	r6, r0
  405990:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405992:	2b46      	cmp	r3, #70	; 0x46
  405994:	eb06 0405 	add.w	r4, r6, r5
  405998:	f47f af29 	bne.w	4057ee <_svfprintf_r+0xed2>
  40599c:	7833      	ldrb	r3, [r6, #0]
  40599e:	2b30      	cmp	r3, #48	; 0x30
  4059a0:	f000 8178 	beq.w	405c94 <_svfprintf_r+0x1378>
  4059a4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4059a6:	442c      	add	r4, r5
  4059a8:	e721      	b.n	4057ee <_svfprintf_r+0xed2>
  4059aa:	aa25      	add	r2, sp, #148	; 0x94
  4059ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059b0:	f003 fbd6 	bl	409160 <__ssprint_r>
  4059b4:	2800      	cmp	r0, #0
  4059b6:	f47f a883 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  4059ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4059bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4059be:	46c8      	mov	r8, r9
  4059c0:	e782      	b.n	4058c8 <_svfprintf_r+0xfac>
  4059c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059c4:	2b00      	cmp	r3, #0
  4059c6:	bf08      	it	eq
  4059c8:	2301      	moveq	r3, #1
  4059ca:	930a      	str	r3, [sp, #40]	; 0x28
  4059cc:	e6db      	b.n	405786 <_svfprintf_r+0xe6a>
  4059ce:	4630      	mov	r0, r6
  4059d0:	940a      	str	r4, [sp, #40]	; 0x28
  4059d2:	f7fe ff35 	bl	404840 <strlen>
  4059d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4059d8:	900e      	str	r0, [sp, #56]	; 0x38
  4059da:	f8cd b01c 	str.w	fp, [sp, #28]
  4059de:	4603      	mov	r3, r0
  4059e0:	f7ff b9f9 	b.w	404dd6 <_svfprintf_r+0x4ba>
  4059e4:	272d      	movs	r7, #45	; 0x2d
  4059e6:	2300      	movs	r3, #0
  4059e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4059ec:	930a      	str	r3, [sp, #40]	; 0x28
  4059ee:	f7ff b8ae 	b.w	404b4e <_svfprintf_r+0x232>
  4059f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4059f4:	9312      	str	r3, [sp, #72]	; 0x48
  4059f6:	461a      	mov	r2, r3
  4059f8:	3303      	adds	r3, #3
  4059fa:	db04      	blt.n	405a06 <_svfprintf_r+0x10ea>
  4059fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059fe:	4619      	mov	r1, r3
  405a00:	4291      	cmp	r1, r2
  405a02:	f6bf af17 	bge.w	405834 <_svfprintf_r+0xf18>
  405a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a08:	3b02      	subs	r3, #2
  405a0a:	9311      	str	r3, [sp, #68]	; 0x44
  405a0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405a10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a16:	3b01      	subs	r3, #1
  405a18:	2b00      	cmp	r3, #0
  405a1a:	931f      	str	r3, [sp, #124]	; 0x7c
  405a1c:	bfbd      	ittte	lt
  405a1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405a20:	f1c3 0301 	rsblt	r3, r3, #1
  405a24:	222d      	movlt	r2, #45	; 0x2d
  405a26:	222b      	movge	r2, #43	; 0x2b
  405a28:	2b09      	cmp	r3, #9
  405a2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405a2e:	f340 8116 	ble.w	405c5e <_svfprintf_r+0x1342>
  405a32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405a36:	4620      	mov	r0, r4
  405a38:	4dab      	ldr	r5, [pc, #684]	; (405ce8 <_svfprintf_r+0x13cc>)
  405a3a:	e000      	b.n	405a3e <_svfprintf_r+0x1122>
  405a3c:	4610      	mov	r0, r2
  405a3e:	fb85 1203 	smull	r1, r2, r5, r3
  405a42:	17d9      	asrs	r1, r3, #31
  405a44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405a48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405a4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405a50:	3230      	adds	r2, #48	; 0x30
  405a52:	2909      	cmp	r1, #9
  405a54:	f800 2c01 	strb.w	r2, [r0, #-1]
  405a58:	460b      	mov	r3, r1
  405a5a:	f100 32ff 	add.w	r2, r0, #4294967295
  405a5e:	dced      	bgt.n	405a3c <_svfprintf_r+0x1120>
  405a60:	3330      	adds	r3, #48	; 0x30
  405a62:	3802      	subs	r0, #2
  405a64:	b2d9      	uxtb	r1, r3
  405a66:	4284      	cmp	r4, r0
  405a68:	f802 1c01 	strb.w	r1, [r2, #-1]
  405a6c:	f240 8165 	bls.w	405d3a <_svfprintf_r+0x141e>
  405a70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405a74:	4613      	mov	r3, r2
  405a76:	e001      	b.n	405a7c <_svfprintf_r+0x1160>
  405a78:	f813 1b01 	ldrb.w	r1, [r3], #1
  405a7c:	f800 1b01 	strb.w	r1, [r0], #1
  405a80:	42a3      	cmp	r3, r4
  405a82:	d1f9      	bne.n	405a78 <_svfprintf_r+0x115c>
  405a84:	3301      	adds	r3, #1
  405a86:	1a9b      	subs	r3, r3, r2
  405a88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405a8c:	4413      	add	r3, r2
  405a8e:	aa21      	add	r2, sp, #132	; 0x84
  405a90:	1a9b      	subs	r3, r3, r2
  405a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405a94:	931b      	str	r3, [sp, #108]	; 0x6c
  405a96:	2a01      	cmp	r2, #1
  405a98:	4413      	add	r3, r2
  405a9a:	930e      	str	r3, [sp, #56]	; 0x38
  405a9c:	f340 8119 	ble.w	405cd2 <_svfprintf_r+0x13b6>
  405aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405aa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405aa4:	4413      	add	r3, r2
  405aa6:	930e      	str	r3, [sp, #56]	; 0x38
  405aa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405aac:	9308      	str	r3, [sp, #32]
  405aae:	2300      	movs	r3, #0
  405ab0:	9312      	str	r3, [sp, #72]	; 0x48
  405ab2:	e6cf      	b.n	405854 <_svfprintf_r+0xf38>
  405ab4:	aa25      	add	r2, sp, #148	; 0x94
  405ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ab8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aba:	f003 fb51 	bl	409160 <__ssprint_r>
  405abe:	2800      	cmp	r0, #0
  405ac0:	f47e affe 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405ac4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ac6:	46c8      	mov	r8, r9
  405ac8:	e4d7      	b.n	40547a <_svfprintf_r+0xb5e>
  405aca:	4623      	mov	r3, r4
  405acc:	e6a2      	b.n	405814 <_svfprintf_r+0xef8>
  405ace:	aa25      	add	r2, sp, #148	; 0x94
  405ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ad2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ad4:	f003 fb44 	bl	409160 <__ssprint_r>
  405ad8:	2800      	cmp	r0, #0
  405ada:	f47e aff1 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405ade:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405ae0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ae2:	46c8      	mov	r8, r9
  405ae4:	e5ae      	b.n	405644 <_svfprintf_r+0xd28>
  405ae6:	aa25      	add	r2, sp, #148	; 0x94
  405ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aea:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aec:	f003 fb38 	bl	409160 <__ssprint_r>
  405af0:	2800      	cmp	r0, #0
  405af2:	f47e afe5 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405af6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405afa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405afc:	1a9a      	subs	r2, r3, r2
  405afe:	46c8      	mov	r8, r9
  405b00:	e5b8      	b.n	405674 <_svfprintf_r+0xd58>
  405b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b04:	9612      	str	r6, [sp, #72]	; 0x48
  405b06:	2b06      	cmp	r3, #6
  405b08:	bf28      	it	cs
  405b0a:	2306      	movcs	r3, #6
  405b0c:	960a      	str	r6, [sp, #40]	; 0x28
  405b0e:	4637      	mov	r7, r6
  405b10:	9308      	str	r3, [sp, #32]
  405b12:	950f      	str	r5, [sp, #60]	; 0x3c
  405b14:	f8cd b01c 	str.w	fp, [sp, #28]
  405b18:	930e      	str	r3, [sp, #56]	; 0x38
  405b1a:	4e74      	ldr	r6, [pc, #464]	; (405cec <_svfprintf_r+0x13d0>)
  405b1c:	f7ff b816 	b.w	404b4c <_svfprintf_r+0x230>
  405b20:	a823      	add	r0, sp, #140	; 0x8c
  405b22:	a920      	add	r1, sp, #128	; 0x80
  405b24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405b26:	9004      	str	r0, [sp, #16]
  405b28:	9103      	str	r1, [sp, #12]
  405b2a:	a81f      	add	r0, sp, #124	; 0x7c
  405b2c:	2103      	movs	r1, #3
  405b2e:	9002      	str	r0, [sp, #8]
  405b30:	9a08      	ldr	r2, [sp, #32]
  405b32:	9501      	str	r5, [sp, #4]
  405b34:	463b      	mov	r3, r7
  405b36:	9100      	str	r1, [sp, #0]
  405b38:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b3a:	f001 f8f1 	bl	406d20 <_dtoa_r>
  405b3e:	4606      	mov	r6, r0
  405b40:	1944      	adds	r4, r0, r5
  405b42:	e72b      	b.n	40599c <_svfprintf_r+0x1080>
  405b44:	2306      	movs	r3, #6
  405b46:	930a      	str	r3, [sp, #40]	; 0x28
  405b48:	e61d      	b.n	405786 <_svfprintf_r+0xe6a>
  405b4a:	272d      	movs	r7, #45	; 0x2d
  405b4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405b50:	f7ff bacd 	b.w	4050ee <_svfprintf_r+0x7d2>
  405b54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b58:	4413      	add	r3, r2
  405b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405b5c:	930e      	str	r3, [sp, #56]	; 0x38
  405b5e:	2a00      	cmp	r2, #0
  405b60:	f340 80b0 	ble.w	405cc4 <_svfprintf_r+0x13a8>
  405b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405b68:	9308      	str	r3, [sp, #32]
  405b6a:	2367      	movs	r3, #103	; 0x67
  405b6c:	9311      	str	r3, [sp, #68]	; 0x44
  405b6e:	e671      	b.n	405854 <_svfprintf_r+0xf38>
  405b70:	2b00      	cmp	r3, #0
  405b72:	f340 80c3 	ble.w	405cfc <_svfprintf_r+0x13e0>
  405b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b78:	2a00      	cmp	r2, #0
  405b7a:	f040 8099 	bne.w	405cb0 <_svfprintf_r+0x1394>
  405b7e:	f01b 0f01 	tst.w	fp, #1
  405b82:	f040 8095 	bne.w	405cb0 <_svfprintf_r+0x1394>
  405b86:	9308      	str	r3, [sp, #32]
  405b88:	930e      	str	r3, [sp, #56]	; 0x38
  405b8a:	e663      	b.n	405854 <_svfprintf_r+0xf38>
  405b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b8e:	9308      	str	r3, [sp, #32]
  405b90:	930e      	str	r3, [sp, #56]	; 0x38
  405b92:	900a      	str	r0, [sp, #40]	; 0x28
  405b94:	950f      	str	r5, [sp, #60]	; 0x3c
  405b96:	f8cd b01c 	str.w	fp, [sp, #28]
  405b9a:	9012      	str	r0, [sp, #72]	; 0x48
  405b9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405ba0:	f7fe bfd4 	b.w	404b4c <_svfprintf_r+0x230>
  405ba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ba6:	2b47      	cmp	r3, #71	; 0x47
  405ba8:	f47f ae20 	bne.w	4057ec <_svfprintf_r+0xed0>
  405bac:	f01b 0f01 	tst.w	fp, #1
  405bb0:	f47f aeee 	bne.w	405990 <_svfprintf_r+0x1074>
  405bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405bb6:	1b9b      	subs	r3, r3, r6
  405bb8:	9313      	str	r3, [sp, #76]	; 0x4c
  405bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405bbc:	2b47      	cmp	r3, #71	; 0x47
  405bbe:	f43f af18 	beq.w	4059f2 <_svfprintf_r+0x10d6>
  405bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405bc4:	9312      	str	r3, [sp, #72]	; 0x48
  405bc6:	e721      	b.n	405a0c <_svfprintf_r+0x10f0>
  405bc8:	424f      	negs	r7, r1
  405bca:	3110      	adds	r1, #16
  405bcc:	4d48      	ldr	r5, [pc, #288]	; (405cf0 <_svfprintf_r+0x13d4>)
  405bce:	da2f      	bge.n	405c30 <_svfprintf_r+0x1314>
  405bd0:	2410      	movs	r4, #16
  405bd2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405bd6:	e004      	b.n	405be2 <_svfprintf_r+0x12c6>
  405bd8:	f108 0808 	add.w	r8, r8, #8
  405bdc:	3f10      	subs	r7, #16
  405bde:	2f10      	cmp	r7, #16
  405be0:	dd26      	ble.n	405c30 <_svfprintf_r+0x1314>
  405be2:	3301      	adds	r3, #1
  405be4:	3210      	adds	r2, #16
  405be6:	2b07      	cmp	r3, #7
  405be8:	9227      	str	r2, [sp, #156]	; 0x9c
  405bea:	9326      	str	r3, [sp, #152]	; 0x98
  405bec:	f8c8 5000 	str.w	r5, [r8]
  405bf0:	f8c8 4004 	str.w	r4, [r8, #4]
  405bf4:	ddf0      	ble.n	405bd8 <_svfprintf_r+0x12bc>
  405bf6:	aa25      	add	r2, sp, #148	; 0x94
  405bf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405bfa:	4658      	mov	r0, fp
  405bfc:	f003 fab0 	bl	409160 <__ssprint_r>
  405c00:	2800      	cmp	r0, #0
  405c02:	f47e af5d 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405c06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c0a:	46c8      	mov	r8, r9
  405c0c:	e7e6      	b.n	405bdc <_svfprintf_r+0x12c0>
  405c0e:	aa25      	add	r2, sp, #148	; 0x94
  405c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c14:	f003 faa4 	bl	409160 <__ssprint_r>
  405c18:	2800      	cmp	r0, #0
  405c1a:	f47e af51 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405c1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405c20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c24:	46c8      	mov	r8, r9
  405c26:	e667      	b.n	4058f8 <_svfprintf_r+0xfdc>
  405c28:	2000      	movs	r0, #0
  405c2a:	900a      	str	r0, [sp, #40]	; 0x28
  405c2c:	f7fe bed0 	b.w	4049d0 <_svfprintf_r+0xb4>
  405c30:	3301      	adds	r3, #1
  405c32:	443a      	add	r2, r7
  405c34:	2b07      	cmp	r3, #7
  405c36:	e888 00a0 	stmia.w	r8, {r5, r7}
  405c3a:	9227      	str	r2, [sp, #156]	; 0x9c
  405c3c:	9326      	str	r3, [sp, #152]	; 0x98
  405c3e:	f108 0808 	add.w	r8, r8, #8
  405c42:	f77f ae5c 	ble.w	4058fe <_svfprintf_r+0xfe2>
  405c46:	aa25      	add	r2, sp, #148	; 0x94
  405c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c4c:	f003 fa88 	bl	409160 <__ssprint_r>
  405c50:	2800      	cmp	r0, #0
  405c52:	f47e af35 	bne.w	404ac0 <_svfprintf_r+0x1a4>
  405c56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c5a:	46c8      	mov	r8, r9
  405c5c:	e64f      	b.n	4058fe <_svfprintf_r+0xfe2>
  405c5e:	3330      	adds	r3, #48	; 0x30
  405c60:	2230      	movs	r2, #48	; 0x30
  405c62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405c66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405c6a:	ab22      	add	r3, sp, #136	; 0x88
  405c6c:	e70f      	b.n	405a8e <_svfprintf_r+0x1172>
  405c6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405c72:	4413      	add	r3, r2
  405c74:	930e      	str	r3, [sp, #56]	; 0x38
  405c76:	e775      	b.n	405b64 <_svfprintf_r+0x1248>
  405c78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405c7a:	e5cb      	b.n	405814 <_svfprintf_r+0xef8>
  405c7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c7e:	4e1d      	ldr	r6, [pc, #116]	; (405cf4 <_svfprintf_r+0x13d8>)
  405c80:	2b00      	cmp	r3, #0
  405c82:	bfb6      	itet	lt
  405c84:	272d      	movlt	r7, #45	; 0x2d
  405c86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405c8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405c8e:	4b1a      	ldr	r3, [pc, #104]	; (405cf8 <_svfprintf_r+0x13dc>)
  405c90:	f7ff ba2f 	b.w	4050f2 <_svfprintf_r+0x7d6>
  405c94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405c96:	9808      	ldr	r0, [sp, #32]
  405c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405c9a:	4639      	mov	r1, r7
  405c9c:	f004 f8fc 	bl	409e98 <__aeabi_dcmpeq>
  405ca0:	2800      	cmp	r0, #0
  405ca2:	f47f ae7f 	bne.w	4059a4 <_svfprintf_r+0x1088>
  405ca6:	f1c5 0501 	rsb	r5, r5, #1
  405caa:	951f      	str	r5, [sp, #124]	; 0x7c
  405cac:	442c      	add	r4, r5
  405cae:	e59e      	b.n	4057ee <_svfprintf_r+0xed2>
  405cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405cb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405cb4:	4413      	add	r3, r2
  405cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405cb8:	441a      	add	r2, r3
  405cba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405cbe:	920e      	str	r2, [sp, #56]	; 0x38
  405cc0:	9308      	str	r3, [sp, #32]
  405cc2:	e5c7      	b.n	405854 <_svfprintf_r+0xf38>
  405cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405cc8:	f1c3 0301 	rsb	r3, r3, #1
  405ccc:	441a      	add	r2, r3
  405cce:	4613      	mov	r3, r2
  405cd0:	e7d0      	b.n	405c74 <_svfprintf_r+0x1358>
  405cd2:	f01b 0301 	ands.w	r3, fp, #1
  405cd6:	9312      	str	r3, [sp, #72]	; 0x48
  405cd8:	f47f aee2 	bne.w	405aa0 <_svfprintf_r+0x1184>
  405cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ce2:	9308      	str	r3, [sp, #32]
  405ce4:	e5b6      	b.n	405854 <_svfprintf_r+0xf38>
  405ce6:	bf00      	nop
  405ce8:	66666667 	.word	0x66666667
  405cec:	0040a548 	.word	0x0040a548
  405cf0:	0040a564 	.word	0x0040a564
  405cf4:	0040a51c 	.word	0x0040a51c
  405cf8:	0040a518 	.word	0x0040a518
  405cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cfe:	b913      	cbnz	r3, 405d06 <_svfprintf_r+0x13ea>
  405d00:	f01b 0f01 	tst.w	fp, #1
  405d04:	d002      	beq.n	405d0c <_svfprintf_r+0x13f0>
  405d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405d08:	3301      	adds	r3, #1
  405d0a:	e7d4      	b.n	405cb6 <_svfprintf_r+0x139a>
  405d0c:	2301      	movs	r3, #1
  405d0e:	e73a      	b.n	405b86 <_svfprintf_r+0x126a>
  405d10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405d12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405d16:	6828      	ldr	r0, [r5, #0]
  405d18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405d1c:	900a      	str	r0, [sp, #40]	; 0x28
  405d1e:	4628      	mov	r0, r5
  405d20:	3004      	adds	r0, #4
  405d22:	46a2      	mov	sl, r4
  405d24:	900f      	str	r0, [sp, #60]	; 0x3c
  405d26:	f7fe be51 	b.w	4049cc <_svfprintf_r+0xb0>
  405d2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d2e:	f7ff b867 	b.w	404e00 <_svfprintf_r+0x4e4>
  405d32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d36:	f7ff ba15 	b.w	405164 <_svfprintf_r+0x848>
  405d3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405d3e:	e6a6      	b.n	405a8e <_svfprintf_r+0x1172>
  405d40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d44:	f7ff b8eb 	b.w	404f1e <_svfprintf_r+0x602>
  405d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405d4a:	230c      	movs	r3, #12
  405d4c:	6013      	str	r3, [r2, #0]
  405d4e:	f04f 33ff 	mov.w	r3, #4294967295
  405d52:	9309      	str	r3, [sp, #36]	; 0x24
  405d54:	f7fe bebd 	b.w	404ad2 <_svfprintf_r+0x1b6>
  405d58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d5c:	f7ff b99a 	b.w	405094 <_svfprintf_r+0x778>
  405d60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d64:	f7ff b976 	b.w	405054 <_svfprintf_r+0x738>
  405d68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d6c:	f7ff b959 	b.w	405022 <_svfprintf_r+0x706>
  405d70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405d74:	f7ff b912 	b.w	404f9c <_svfprintf_r+0x680>

00405d78 <__sprint_r.part.0>:
  405d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d7c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405d7e:	049c      	lsls	r4, r3, #18
  405d80:	4693      	mov	fp, r2
  405d82:	d52f      	bpl.n	405de4 <__sprint_r.part.0+0x6c>
  405d84:	6893      	ldr	r3, [r2, #8]
  405d86:	6812      	ldr	r2, [r2, #0]
  405d88:	b353      	cbz	r3, 405de0 <__sprint_r.part.0+0x68>
  405d8a:	460e      	mov	r6, r1
  405d8c:	4607      	mov	r7, r0
  405d8e:	f102 0908 	add.w	r9, r2, #8
  405d92:	e919 0420 	ldmdb	r9, {r5, sl}
  405d96:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405d9a:	d017      	beq.n	405dcc <__sprint_r.part.0+0x54>
  405d9c:	3d04      	subs	r5, #4
  405d9e:	2400      	movs	r4, #0
  405da0:	e001      	b.n	405da6 <__sprint_r.part.0+0x2e>
  405da2:	45a0      	cmp	r8, r4
  405da4:	d010      	beq.n	405dc8 <__sprint_r.part.0+0x50>
  405da6:	4632      	mov	r2, r6
  405da8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405dac:	4638      	mov	r0, r7
  405dae:	f002 f87b 	bl	407ea8 <_fputwc_r>
  405db2:	1c43      	adds	r3, r0, #1
  405db4:	f104 0401 	add.w	r4, r4, #1
  405db8:	d1f3      	bne.n	405da2 <__sprint_r.part.0+0x2a>
  405dba:	2300      	movs	r3, #0
  405dbc:	f8cb 3008 	str.w	r3, [fp, #8]
  405dc0:	f8cb 3004 	str.w	r3, [fp, #4]
  405dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  405dcc:	f02a 0a03 	bic.w	sl, sl, #3
  405dd0:	eba3 030a 	sub.w	r3, r3, sl
  405dd4:	f8cb 3008 	str.w	r3, [fp, #8]
  405dd8:	f109 0908 	add.w	r9, r9, #8
  405ddc:	2b00      	cmp	r3, #0
  405dde:	d1d8      	bne.n	405d92 <__sprint_r.part.0+0x1a>
  405de0:	2000      	movs	r0, #0
  405de2:	e7ea      	b.n	405dba <__sprint_r.part.0+0x42>
  405de4:	f002 f9ca 	bl	40817c <__sfvwrite_r>
  405de8:	2300      	movs	r3, #0
  405dea:	f8cb 3008 	str.w	r3, [fp, #8]
  405dee:	f8cb 3004 	str.w	r3, [fp, #4]
  405df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405df6:	bf00      	nop

00405df8 <_vfiprintf_r>:
  405df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dfc:	b0ad      	sub	sp, #180	; 0xb4
  405dfe:	461d      	mov	r5, r3
  405e00:	468b      	mov	fp, r1
  405e02:	4690      	mov	r8, r2
  405e04:	9307      	str	r3, [sp, #28]
  405e06:	9006      	str	r0, [sp, #24]
  405e08:	b118      	cbz	r0, 405e12 <_vfiprintf_r+0x1a>
  405e0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405e0c:	2b00      	cmp	r3, #0
  405e0e:	f000 80f3 	beq.w	405ff8 <_vfiprintf_r+0x200>
  405e12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405e16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405e1a:	07df      	lsls	r7, r3, #31
  405e1c:	b281      	uxth	r1, r0
  405e1e:	d402      	bmi.n	405e26 <_vfiprintf_r+0x2e>
  405e20:	058e      	lsls	r6, r1, #22
  405e22:	f140 80fc 	bpl.w	40601e <_vfiprintf_r+0x226>
  405e26:	048c      	lsls	r4, r1, #18
  405e28:	d40a      	bmi.n	405e40 <_vfiprintf_r+0x48>
  405e2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405e2e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405e36:	f8ab 100c 	strh.w	r1, [fp, #12]
  405e3a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405e3e:	b289      	uxth	r1, r1
  405e40:	0708      	lsls	r0, r1, #28
  405e42:	f140 80b3 	bpl.w	405fac <_vfiprintf_r+0x1b4>
  405e46:	f8db 3010 	ldr.w	r3, [fp, #16]
  405e4a:	2b00      	cmp	r3, #0
  405e4c:	f000 80ae 	beq.w	405fac <_vfiprintf_r+0x1b4>
  405e50:	f001 031a 	and.w	r3, r1, #26
  405e54:	2b0a      	cmp	r3, #10
  405e56:	f000 80b5 	beq.w	405fc4 <_vfiprintf_r+0x1cc>
  405e5a:	2300      	movs	r3, #0
  405e5c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405e60:	930b      	str	r3, [sp, #44]	; 0x2c
  405e62:	9311      	str	r3, [sp, #68]	; 0x44
  405e64:	9310      	str	r3, [sp, #64]	; 0x40
  405e66:	9303      	str	r3, [sp, #12]
  405e68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405e6c:	46ca      	mov	sl, r9
  405e6e:	f8cd b010 	str.w	fp, [sp, #16]
  405e72:	f898 3000 	ldrb.w	r3, [r8]
  405e76:	4644      	mov	r4, r8
  405e78:	b1fb      	cbz	r3, 405eba <_vfiprintf_r+0xc2>
  405e7a:	2b25      	cmp	r3, #37	; 0x25
  405e7c:	d102      	bne.n	405e84 <_vfiprintf_r+0x8c>
  405e7e:	e01c      	b.n	405eba <_vfiprintf_r+0xc2>
  405e80:	2b25      	cmp	r3, #37	; 0x25
  405e82:	d003      	beq.n	405e8c <_vfiprintf_r+0x94>
  405e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405e88:	2b00      	cmp	r3, #0
  405e8a:	d1f9      	bne.n	405e80 <_vfiprintf_r+0x88>
  405e8c:	eba4 0508 	sub.w	r5, r4, r8
  405e90:	b19d      	cbz	r5, 405eba <_vfiprintf_r+0xc2>
  405e92:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e96:	f8ca 8000 	str.w	r8, [sl]
  405e9a:	3301      	adds	r3, #1
  405e9c:	442a      	add	r2, r5
  405e9e:	2b07      	cmp	r3, #7
  405ea0:	f8ca 5004 	str.w	r5, [sl, #4]
  405ea4:	9211      	str	r2, [sp, #68]	; 0x44
  405ea6:	9310      	str	r3, [sp, #64]	; 0x40
  405ea8:	dd7a      	ble.n	405fa0 <_vfiprintf_r+0x1a8>
  405eaa:	2a00      	cmp	r2, #0
  405eac:	f040 84b0 	bne.w	406810 <_vfiprintf_r+0xa18>
  405eb0:	9b03      	ldr	r3, [sp, #12]
  405eb2:	9210      	str	r2, [sp, #64]	; 0x40
  405eb4:	442b      	add	r3, r5
  405eb6:	46ca      	mov	sl, r9
  405eb8:	9303      	str	r3, [sp, #12]
  405eba:	7823      	ldrb	r3, [r4, #0]
  405ebc:	2b00      	cmp	r3, #0
  405ebe:	f000 83e0 	beq.w	406682 <_vfiprintf_r+0x88a>
  405ec2:	2000      	movs	r0, #0
  405ec4:	f04f 0300 	mov.w	r3, #0
  405ec8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405ecc:	f104 0801 	add.w	r8, r4, #1
  405ed0:	7862      	ldrb	r2, [r4, #1]
  405ed2:	4605      	mov	r5, r0
  405ed4:	4606      	mov	r6, r0
  405ed6:	4603      	mov	r3, r0
  405ed8:	f04f 34ff 	mov.w	r4, #4294967295
  405edc:	f108 0801 	add.w	r8, r8, #1
  405ee0:	f1a2 0120 	sub.w	r1, r2, #32
  405ee4:	2958      	cmp	r1, #88	; 0x58
  405ee6:	f200 82de 	bhi.w	4064a6 <_vfiprintf_r+0x6ae>
  405eea:	e8df f011 	tbh	[pc, r1, lsl #1]
  405eee:	0221      	.short	0x0221
  405ef0:	02dc02dc 	.word	0x02dc02dc
  405ef4:	02dc0229 	.word	0x02dc0229
  405ef8:	02dc02dc 	.word	0x02dc02dc
  405efc:	02dc02dc 	.word	0x02dc02dc
  405f00:	028902dc 	.word	0x028902dc
  405f04:	02dc0295 	.word	0x02dc0295
  405f08:	02bd00a2 	.word	0x02bd00a2
  405f0c:	019f02dc 	.word	0x019f02dc
  405f10:	01a401a4 	.word	0x01a401a4
  405f14:	01a401a4 	.word	0x01a401a4
  405f18:	01a401a4 	.word	0x01a401a4
  405f1c:	01a401a4 	.word	0x01a401a4
  405f20:	02dc01a4 	.word	0x02dc01a4
  405f24:	02dc02dc 	.word	0x02dc02dc
  405f28:	02dc02dc 	.word	0x02dc02dc
  405f2c:	02dc02dc 	.word	0x02dc02dc
  405f30:	02dc02dc 	.word	0x02dc02dc
  405f34:	01b202dc 	.word	0x01b202dc
  405f38:	02dc02dc 	.word	0x02dc02dc
  405f3c:	02dc02dc 	.word	0x02dc02dc
  405f40:	02dc02dc 	.word	0x02dc02dc
  405f44:	02dc02dc 	.word	0x02dc02dc
  405f48:	02dc02dc 	.word	0x02dc02dc
  405f4c:	02dc0197 	.word	0x02dc0197
  405f50:	02dc02dc 	.word	0x02dc02dc
  405f54:	02dc02dc 	.word	0x02dc02dc
  405f58:	02dc019b 	.word	0x02dc019b
  405f5c:	025302dc 	.word	0x025302dc
  405f60:	02dc02dc 	.word	0x02dc02dc
  405f64:	02dc02dc 	.word	0x02dc02dc
  405f68:	02dc02dc 	.word	0x02dc02dc
  405f6c:	02dc02dc 	.word	0x02dc02dc
  405f70:	02dc02dc 	.word	0x02dc02dc
  405f74:	021b025a 	.word	0x021b025a
  405f78:	02dc02dc 	.word	0x02dc02dc
  405f7c:	026e02dc 	.word	0x026e02dc
  405f80:	02dc021b 	.word	0x02dc021b
  405f84:	027302dc 	.word	0x027302dc
  405f88:	01f502dc 	.word	0x01f502dc
  405f8c:	02090182 	.word	0x02090182
  405f90:	02dc02d7 	.word	0x02dc02d7
  405f94:	02dc029a 	.word	0x02dc029a
  405f98:	02dc00a7 	.word	0x02dc00a7
  405f9c:	022e02dc 	.word	0x022e02dc
  405fa0:	f10a 0a08 	add.w	sl, sl, #8
  405fa4:	9b03      	ldr	r3, [sp, #12]
  405fa6:	442b      	add	r3, r5
  405fa8:	9303      	str	r3, [sp, #12]
  405faa:	e786      	b.n	405eba <_vfiprintf_r+0xc2>
  405fac:	4659      	mov	r1, fp
  405fae:	9806      	ldr	r0, [sp, #24]
  405fb0:	f000 fdac 	bl	406b0c <__swsetup_r>
  405fb4:	bb18      	cbnz	r0, 405ffe <_vfiprintf_r+0x206>
  405fb6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405fba:	f001 031a 	and.w	r3, r1, #26
  405fbe:	2b0a      	cmp	r3, #10
  405fc0:	f47f af4b 	bne.w	405e5a <_vfiprintf_r+0x62>
  405fc4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405fc8:	2b00      	cmp	r3, #0
  405fca:	f6ff af46 	blt.w	405e5a <_vfiprintf_r+0x62>
  405fce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405fd2:	07db      	lsls	r3, r3, #31
  405fd4:	d405      	bmi.n	405fe2 <_vfiprintf_r+0x1ea>
  405fd6:	058f      	lsls	r7, r1, #22
  405fd8:	d403      	bmi.n	405fe2 <_vfiprintf_r+0x1ea>
  405fda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405fde:	f002 fa91 	bl	408504 <__retarget_lock_release_recursive>
  405fe2:	462b      	mov	r3, r5
  405fe4:	4642      	mov	r2, r8
  405fe6:	4659      	mov	r1, fp
  405fe8:	9806      	ldr	r0, [sp, #24]
  405fea:	f000 fd4d 	bl	406a88 <__sbprintf>
  405fee:	9003      	str	r0, [sp, #12]
  405ff0:	9803      	ldr	r0, [sp, #12]
  405ff2:	b02d      	add	sp, #180	; 0xb4
  405ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff8:	f001 feb4 	bl	407d64 <__sinit>
  405ffc:	e709      	b.n	405e12 <_vfiprintf_r+0x1a>
  405ffe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406002:	07d9      	lsls	r1, r3, #31
  406004:	d404      	bmi.n	406010 <_vfiprintf_r+0x218>
  406006:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40600a:	059a      	lsls	r2, r3, #22
  40600c:	f140 84aa 	bpl.w	406964 <_vfiprintf_r+0xb6c>
  406010:	f04f 33ff 	mov.w	r3, #4294967295
  406014:	9303      	str	r3, [sp, #12]
  406016:	9803      	ldr	r0, [sp, #12]
  406018:	b02d      	add	sp, #180	; 0xb4
  40601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40601e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406022:	f002 fa6d 	bl	408500 <__retarget_lock_acquire_recursive>
  406026:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40602a:	b281      	uxth	r1, r0
  40602c:	e6fb      	b.n	405e26 <_vfiprintf_r+0x2e>
  40602e:	4276      	negs	r6, r6
  406030:	9207      	str	r2, [sp, #28]
  406032:	f043 0304 	orr.w	r3, r3, #4
  406036:	f898 2000 	ldrb.w	r2, [r8]
  40603a:	e74f      	b.n	405edc <_vfiprintf_r+0xe4>
  40603c:	9608      	str	r6, [sp, #32]
  40603e:	069e      	lsls	r6, r3, #26
  406040:	f100 8450 	bmi.w	4068e4 <_vfiprintf_r+0xaec>
  406044:	9907      	ldr	r1, [sp, #28]
  406046:	06dd      	lsls	r5, r3, #27
  406048:	460a      	mov	r2, r1
  40604a:	f100 83ef 	bmi.w	40682c <_vfiprintf_r+0xa34>
  40604e:	0658      	lsls	r0, r3, #25
  406050:	f140 83ec 	bpl.w	40682c <_vfiprintf_r+0xa34>
  406054:	880e      	ldrh	r6, [r1, #0]
  406056:	3104      	adds	r1, #4
  406058:	2700      	movs	r7, #0
  40605a:	2201      	movs	r2, #1
  40605c:	9107      	str	r1, [sp, #28]
  40605e:	f04f 0100 	mov.w	r1, #0
  406062:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  406066:	2500      	movs	r5, #0
  406068:	1c61      	adds	r1, r4, #1
  40606a:	f000 8116 	beq.w	40629a <_vfiprintf_r+0x4a2>
  40606e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406072:	9102      	str	r1, [sp, #8]
  406074:	ea56 0107 	orrs.w	r1, r6, r7
  406078:	f040 8114 	bne.w	4062a4 <_vfiprintf_r+0x4ac>
  40607c:	2c00      	cmp	r4, #0
  40607e:	f040 835c 	bne.w	40673a <_vfiprintf_r+0x942>
  406082:	2a00      	cmp	r2, #0
  406084:	f040 83b7 	bne.w	4067f6 <_vfiprintf_r+0x9fe>
  406088:	f013 0301 	ands.w	r3, r3, #1
  40608c:	9305      	str	r3, [sp, #20]
  40608e:	f000 8457 	beq.w	406940 <_vfiprintf_r+0xb48>
  406092:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406096:	2330      	movs	r3, #48	; 0x30
  406098:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40609c:	9b05      	ldr	r3, [sp, #20]
  40609e:	42a3      	cmp	r3, r4
  4060a0:	bfb8      	it	lt
  4060a2:	4623      	movlt	r3, r4
  4060a4:	9301      	str	r3, [sp, #4]
  4060a6:	b10d      	cbz	r5, 4060ac <_vfiprintf_r+0x2b4>
  4060a8:	3301      	adds	r3, #1
  4060aa:	9301      	str	r3, [sp, #4]
  4060ac:	9b02      	ldr	r3, [sp, #8]
  4060ae:	f013 0302 	ands.w	r3, r3, #2
  4060b2:	9309      	str	r3, [sp, #36]	; 0x24
  4060b4:	d002      	beq.n	4060bc <_vfiprintf_r+0x2c4>
  4060b6:	9b01      	ldr	r3, [sp, #4]
  4060b8:	3302      	adds	r3, #2
  4060ba:	9301      	str	r3, [sp, #4]
  4060bc:	9b02      	ldr	r3, [sp, #8]
  4060be:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4060c2:	930a      	str	r3, [sp, #40]	; 0x28
  4060c4:	f040 8217 	bne.w	4064f6 <_vfiprintf_r+0x6fe>
  4060c8:	9b08      	ldr	r3, [sp, #32]
  4060ca:	9a01      	ldr	r2, [sp, #4]
  4060cc:	1a9d      	subs	r5, r3, r2
  4060ce:	2d00      	cmp	r5, #0
  4060d0:	f340 8211 	ble.w	4064f6 <_vfiprintf_r+0x6fe>
  4060d4:	2d10      	cmp	r5, #16
  4060d6:	f340 8490 	ble.w	4069fa <_vfiprintf_r+0xc02>
  4060da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060de:	4ec4      	ldr	r6, [pc, #784]	; (4063f0 <_vfiprintf_r+0x5f8>)
  4060e0:	46d6      	mov	lr, sl
  4060e2:	2710      	movs	r7, #16
  4060e4:	46a2      	mov	sl, r4
  4060e6:	4619      	mov	r1, r3
  4060e8:	9c06      	ldr	r4, [sp, #24]
  4060ea:	e007      	b.n	4060fc <_vfiprintf_r+0x304>
  4060ec:	f101 0c02 	add.w	ip, r1, #2
  4060f0:	f10e 0e08 	add.w	lr, lr, #8
  4060f4:	4601      	mov	r1, r0
  4060f6:	3d10      	subs	r5, #16
  4060f8:	2d10      	cmp	r5, #16
  4060fa:	dd11      	ble.n	406120 <_vfiprintf_r+0x328>
  4060fc:	1c48      	adds	r0, r1, #1
  4060fe:	3210      	adds	r2, #16
  406100:	2807      	cmp	r0, #7
  406102:	9211      	str	r2, [sp, #68]	; 0x44
  406104:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406108:	9010      	str	r0, [sp, #64]	; 0x40
  40610a:	ddef      	ble.n	4060ec <_vfiprintf_r+0x2f4>
  40610c:	2a00      	cmp	r2, #0
  40610e:	f040 81e4 	bne.w	4064da <_vfiprintf_r+0x6e2>
  406112:	3d10      	subs	r5, #16
  406114:	2d10      	cmp	r5, #16
  406116:	4611      	mov	r1, r2
  406118:	f04f 0c01 	mov.w	ip, #1
  40611c:	46ce      	mov	lr, r9
  40611e:	dced      	bgt.n	4060fc <_vfiprintf_r+0x304>
  406120:	4654      	mov	r4, sl
  406122:	4661      	mov	r1, ip
  406124:	46f2      	mov	sl, lr
  406126:	442a      	add	r2, r5
  406128:	2907      	cmp	r1, #7
  40612a:	9211      	str	r2, [sp, #68]	; 0x44
  40612c:	f8ca 6000 	str.w	r6, [sl]
  406130:	f8ca 5004 	str.w	r5, [sl, #4]
  406134:	9110      	str	r1, [sp, #64]	; 0x40
  406136:	f300 82ec 	bgt.w	406712 <_vfiprintf_r+0x91a>
  40613a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40613e:	f10a 0a08 	add.w	sl, sl, #8
  406142:	1c48      	adds	r0, r1, #1
  406144:	2d00      	cmp	r5, #0
  406146:	f040 81de 	bne.w	406506 <_vfiprintf_r+0x70e>
  40614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40614c:	2b00      	cmp	r3, #0
  40614e:	f000 81f8 	beq.w	406542 <_vfiprintf_r+0x74a>
  406152:	3202      	adds	r2, #2
  406154:	a90e      	add	r1, sp, #56	; 0x38
  406156:	2302      	movs	r3, #2
  406158:	2807      	cmp	r0, #7
  40615a:	9211      	str	r2, [sp, #68]	; 0x44
  40615c:	9010      	str	r0, [sp, #64]	; 0x40
  40615e:	e88a 000a 	stmia.w	sl, {r1, r3}
  406162:	f340 81ea 	ble.w	40653a <_vfiprintf_r+0x742>
  406166:	2a00      	cmp	r2, #0
  406168:	f040 838c 	bne.w	406884 <_vfiprintf_r+0xa8c>
  40616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40616e:	2b80      	cmp	r3, #128	; 0x80
  406170:	f04f 0001 	mov.w	r0, #1
  406174:	4611      	mov	r1, r2
  406176:	46ca      	mov	sl, r9
  406178:	f040 81e7 	bne.w	40654a <_vfiprintf_r+0x752>
  40617c:	9b08      	ldr	r3, [sp, #32]
  40617e:	9d01      	ldr	r5, [sp, #4]
  406180:	1b5e      	subs	r6, r3, r5
  406182:	2e00      	cmp	r6, #0
  406184:	f340 81e1 	ble.w	40654a <_vfiprintf_r+0x752>
  406188:	2e10      	cmp	r6, #16
  40618a:	4d9a      	ldr	r5, [pc, #616]	; (4063f4 <_vfiprintf_r+0x5fc>)
  40618c:	f340 8450 	ble.w	406a30 <_vfiprintf_r+0xc38>
  406190:	46d4      	mov	ip, sl
  406192:	2710      	movs	r7, #16
  406194:	46a2      	mov	sl, r4
  406196:	9c06      	ldr	r4, [sp, #24]
  406198:	e007      	b.n	4061aa <_vfiprintf_r+0x3b2>
  40619a:	f101 0e02 	add.w	lr, r1, #2
  40619e:	f10c 0c08 	add.w	ip, ip, #8
  4061a2:	4601      	mov	r1, r0
  4061a4:	3e10      	subs	r6, #16
  4061a6:	2e10      	cmp	r6, #16
  4061a8:	dd11      	ble.n	4061ce <_vfiprintf_r+0x3d6>
  4061aa:	1c48      	adds	r0, r1, #1
  4061ac:	3210      	adds	r2, #16
  4061ae:	2807      	cmp	r0, #7
  4061b0:	9211      	str	r2, [sp, #68]	; 0x44
  4061b2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4061b6:	9010      	str	r0, [sp, #64]	; 0x40
  4061b8:	ddef      	ble.n	40619a <_vfiprintf_r+0x3a2>
  4061ba:	2a00      	cmp	r2, #0
  4061bc:	f040 829d 	bne.w	4066fa <_vfiprintf_r+0x902>
  4061c0:	3e10      	subs	r6, #16
  4061c2:	2e10      	cmp	r6, #16
  4061c4:	f04f 0e01 	mov.w	lr, #1
  4061c8:	4611      	mov	r1, r2
  4061ca:	46cc      	mov	ip, r9
  4061cc:	dced      	bgt.n	4061aa <_vfiprintf_r+0x3b2>
  4061ce:	4654      	mov	r4, sl
  4061d0:	46e2      	mov	sl, ip
  4061d2:	4432      	add	r2, r6
  4061d4:	f1be 0f07 	cmp.w	lr, #7
  4061d8:	9211      	str	r2, [sp, #68]	; 0x44
  4061da:	e88a 0060 	stmia.w	sl, {r5, r6}
  4061de:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4061e2:	f300 8369 	bgt.w	4068b8 <_vfiprintf_r+0xac0>
  4061e6:	f10a 0a08 	add.w	sl, sl, #8
  4061ea:	f10e 0001 	add.w	r0, lr, #1
  4061ee:	4671      	mov	r1, lr
  4061f0:	e1ab      	b.n	40654a <_vfiprintf_r+0x752>
  4061f2:	9608      	str	r6, [sp, #32]
  4061f4:	f013 0220 	ands.w	r2, r3, #32
  4061f8:	f040 838c 	bne.w	406914 <_vfiprintf_r+0xb1c>
  4061fc:	f013 0110 	ands.w	r1, r3, #16
  406200:	f040 831a 	bne.w	406838 <_vfiprintf_r+0xa40>
  406204:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406208:	f000 8316 	beq.w	406838 <_vfiprintf_r+0xa40>
  40620c:	9807      	ldr	r0, [sp, #28]
  40620e:	460a      	mov	r2, r1
  406210:	4601      	mov	r1, r0
  406212:	3104      	adds	r1, #4
  406214:	8806      	ldrh	r6, [r0, #0]
  406216:	9107      	str	r1, [sp, #28]
  406218:	2700      	movs	r7, #0
  40621a:	e720      	b.n	40605e <_vfiprintf_r+0x266>
  40621c:	9608      	str	r6, [sp, #32]
  40621e:	f043 0310 	orr.w	r3, r3, #16
  406222:	e7e7      	b.n	4061f4 <_vfiprintf_r+0x3fc>
  406224:	9608      	str	r6, [sp, #32]
  406226:	f043 0310 	orr.w	r3, r3, #16
  40622a:	e708      	b.n	40603e <_vfiprintf_r+0x246>
  40622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406230:	f898 2000 	ldrb.w	r2, [r8]
  406234:	e652      	b.n	405edc <_vfiprintf_r+0xe4>
  406236:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40623a:	2600      	movs	r6, #0
  40623c:	f818 2b01 	ldrb.w	r2, [r8], #1
  406240:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406244:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406248:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40624c:	2909      	cmp	r1, #9
  40624e:	d9f5      	bls.n	40623c <_vfiprintf_r+0x444>
  406250:	e646      	b.n	405ee0 <_vfiprintf_r+0xe8>
  406252:	9608      	str	r6, [sp, #32]
  406254:	2800      	cmp	r0, #0
  406256:	f040 8408 	bne.w	406a6a <_vfiprintf_r+0xc72>
  40625a:	f043 0310 	orr.w	r3, r3, #16
  40625e:	069e      	lsls	r6, r3, #26
  406260:	f100 834c 	bmi.w	4068fc <_vfiprintf_r+0xb04>
  406264:	06dd      	lsls	r5, r3, #27
  406266:	f100 82f3 	bmi.w	406850 <_vfiprintf_r+0xa58>
  40626a:	0658      	lsls	r0, r3, #25
  40626c:	f140 82f0 	bpl.w	406850 <_vfiprintf_r+0xa58>
  406270:	9d07      	ldr	r5, [sp, #28]
  406272:	f9b5 6000 	ldrsh.w	r6, [r5]
  406276:	462a      	mov	r2, r5
  406278:	17f7      	asrs	r7, r6, #31
  40627a:	3204      	adds	r2, #4
  40627c:	4630      	mov	r0, r6
  40627e:	4639      	mov	r1, r7
  406280:	9207      	str	r2, [sp, #28]
  406282:	2800      	cmp	r0, #0
  406284:	f171 0200 	sbcs.w	r2, r1, #0
  406288:	f2c0 835d 	blt.w	406946 <_vfiprintf_r+0xb4e>
  40628c:	1c61      	adds	r1, r4, #1
  40628e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406292:	f04f 0201 	mov.w	r2, #1
  406296:	f47f aeea 	bne.w	40606e <_vfiprintf_r+0x276>
  40629a:	ea56 0107 	orrs.w	r1, r6, r7
  40629e:	f000 824d 	beq.w	40673c <_vfiprintf_r+0x944>
  4062a2:	9302      	str	r3, [sp, #8]
  4062a4:	2a01      	cmp	r2, #1
  4062a6:	f000 828c 	beq.w	4067c2 <_vfiprintf_r+0x9ca>
  4062aa:	2a02      	cmp	r2, #2
  4062ac:	f040 825c 	bne.w	406768 <_vfiprintf_r+0x970>
  4062b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4062b2:	46cb      	mov	fp, r9
  4062b4:	0933      	lsrs	r3, r6, #4
  4062b6:	f006 010f 	and.w	r1, r6, #15
  4062ba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4062be:	093a      	lsrs	r2, r7, #4
  4062c0:	461e      	mov	r6, r3
  4062c2:	4617      	mov	r7, r2
  4062c4:	5c43      	ldrb	r3, [r0, r1]
  4062c6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4062ca:	ea56 0307 	orrs.w	r3, r6, r7
  4062ce:	d1f1      	bne.n	4062b4 <_vfiprintf_r+0x4bc>
  4062d0:	eba9 030b 	sub.w	r3, r9, fp
  4062d4:	9305      	str	r3, [sp, #20]
  4062d6:	e6e1      	b.n	40609c <_vfiprintf_r+0x2a4>
  4062d8:	2800      	cmp	r0, #0
  4062da:	f040 83c0 	bne.w	406a5e <_vfiprintf_r+0xc66>
  4062de:	0699      	lsls	r1, r3, #26
  4062e0:	f100 8367 	bmi.w	4069b2 <_vfiprintf_r+0xbba>
  4062e4:	06da      	lsls	r2, r3, #27
  4062e6:	f100 80f1 	bmi.w	4064cc <_vfiprintf_r+0x6d4>
  4062ea:	065b      	lsls	r3, r3, #25
  4062ec:	f140 80ee 	bpl.w	4064cc <_vfiprintf_r+0x6d4>
  4062f0:	9a07      	ldr	r2, [sp, #28]
  4062f2:	6813      	ldr	r3, [r2, #0]
  4062f4:	3204      	adds	r2, #4
  4062f6:	9207      	str	r2, [sp, #28]
  4062f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4062fc:	801a      	strh	r2, [r3, #0]
  4062fe:	e5b8      	b.n	405e72 <_vfiprintf_r+0x7a>
  406300:	9807      	ldr	r0, [sp, #28]
  406302:	4a3d      	ldr	r2, [pc, #244]	; (4063f8 <_vfiprintf_r+0x600>)
  406304:	9608      	str	r6, [sp, #32]
  406306:	920b      	str	r2, [sp, #44]	; 0x2c
  406308:	6806      	ldr	r6, [r0, #0]
  40630a:	2278      	movs	r2, #120	; 0x78
  40630c:	2130      	movs	r1, #48	; 0x30
  40630e:	3004      	adds	r0, #4
  406310:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406314:	f043 0302 	orr.w	r3, r3, #2
  406318:	9007      	str	r0, [sp, #28]
  40631a:	2700      	movs	r7, #0
  40631c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406320:	2202      	movs	r2, #2
  406322:	e69c      	b.n	40605e <_vfiprintf_r+0x266>
  406324:	9608      	str	r6, [sp, #32]
  406326:	2800      	cmp	r0, #0
  406328:	d099      	beq.n	40625e <_vfiprintf_r+0x466>
  40632a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40632e:	e796      	b.n	40625e <_vfiprintf_r+0x466>
  406330:	f898 2000 	ldrb.w	r2, [r8]
  406334:	2d00      	cmp	r5, #0
  406336:	f47f add1 	bne.w	405edc <_vfiprintf_r+0xe4>
  40633a:	2001      	movs	r0, #1
  40633c:	2520      	movs	r5, #32
  40633e:	e5cd      	b.n	405edc <_vfiprintf_r+0xe4>
  406340:	f043 0301 	orr.w	r3, r3, #1
  406344:	f898 2000 	ldrb.w	r2, [r8]
  406348:	e5c8      	b.n	405edc <_vfiprintf_r+0xe4>
  40634a:	9608      	str	r6, [sp, #32]
  40634c:	2800      	cmp	r0, #0
  40634e:	f040 8393 	bne.w	406a78 <_vfiprintf_r+0xc80>
  406352:	4929      	ldr	r1, [pc, #164]	; (4063f8 <_vfiprintf_r+0x600>)
  406354:	910b      	str	r1, [sp, #44]	; 0x2c
  406356:	069f      	lsls	r7, r3, #26
  406358:	f100 82e8 	bmi.w	40692c <_vfiprintf_r+0xb34>
  40635c:	9807      	ldr	r0, [sp, #28]
  40635e:	06de      	lsls	r6, r3, #27
  406360:	4601      	mov	r1, r0
  406362:	f100 8270 	bmi.w	406846 <_vfiprintf_r+0xa4e>
  406366:	065d      	lsls	r5, r3, #25
  406368:	f140 826d 	bpl.w	406846 <_vfiprintf_r+0xa4e>
  40636c:	3104      	adds	r1, #4
  40636e:	8806      	ldrh	r6, [r0, #0]
  406370:	9107      	str	r1, [sp, #28]
  406372:	2700      	movs	r7, #0
  406374:	07d8      	lsls	r0, r3, #31
  406376:	f140 8222 	bpl.w	4067be <_vfiprintf_r+0x9c6>
  40637a:	ea56 0107 	orrs.w	r1, r6, r7
  40637e:	f000 821e 	beq.w	4067be <_vfiprintf_r+0x9c6>
  406382:	2130      	movs	r1, #48	; 0x30
  406384:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406388:	f043 0302 	orr.w	r3, r3, #2
  40638c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406390:	2202      	movs	r2, #2
  406392:	e664      	b.n	40605e <_vfiprintf_r+0x266>
  406394:	9608      	str	r6, [sp, #32]
  406396:	2800      	cmp	r0, #0
  406398:	f040 836b 	bne.w	406a72 <_vfiprintf_r+0xc7a>
  40639c:	4917      	ldr	r1, [pc, #92]	; (4063fc <_vfiprintf_r+0x604>)
  40639e:	910b      	str	r1, [sp, #44]	; 0x2c
  4063a0:	e7d9      	b.n	406356 <_vfiprintf_r+0x55e>
  4063a2:	9907      	ldr	r1, [sp, #28]
  4063a4:	9608      	str	r6, [sp, #32]
  4063a6:	680a      	ldr	r2, [r1, #0]
  4063a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4063ac:	f04f 0000 	mov.w	r0, #0
  4063b0:	460a      	mov	r2, r1
  4063b2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4063b6:	3204      	adds	r2, #4
  4063b8:	2001      	movs	r0, #1
  4063ba:	9001      	str	r0, [sp, #4]
  4063bc:	9207      	str	r2, [sp, #28]
  4063be:	9005      	str	r0, [sp, #20]
  4063c0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4063c4:	9302      	str	r3, [sp, #8]
  4063c6:	2400      	movs	r4, #0
  4063c8:	e670      	b.n	4060ac <_vfiprintf_r+0x2b4>
  4063ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4063ce:	f898 2000 	ldrb.w	r2, [r8]
  4063d2:	e583      	b.n	405edc <_vfiprintf_r+0xe4>
  4063d4:	f898 2000 	ldrb.w	r2, [r8]
  4063d8:	2a6c      	cmp	r2, #108	; 0x6c
  4063da:	bf03      	ittte	eq
  4063dc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4063e0:	f043 0320 	orreq.w	r3, r3, #32
  4063e4:	f108 0801 	addeq.w	r8, r8, #1
  4063e8:	f043 0310 	orrne.w	r3, r3, #16
  4063ec:	e576      	b.n	405edc <_vfiprintf_r+0xe4>
  4063ee:	bf00      	nop
  4063f0:	0040a574 	.word	0x0040a574
  4063f4:	0040a584 	.word	0x0040a584
  4063f8:	0040a534 	.word	0x0040a534
  4063fc:	0040a520 	.word	0x0040a520
  406400:	9907      	ldr	r1, [sp, #28]
  406402:	680e      	ldr	r6, [r1, #0]
  406404:	460a      	mov	r2, r1
  406406:	2e00      	cmp	r6, #0
  406408:	f102 0204 	add.w	r2, r2, #4
  40640c:	f6ff ae0f 	blt.w	40602e <_vfiprintf_r+0x236>
  406410:	9207      	str	r2, [sp, #28]
  406412:	f898 2000 	ldrb.w	r2, [r8]
  406416:	e561      	b.n	405edc <_vfiprintf_r+0xe4>
  406418:	f898 2000 	ldrb.w	r2, [r8]
  40641c:	2001      	movs	r0, #1
  40641e:	252b      	movs	r5, #43	; 0x2b
  406420:	e55c      	b.n	405edc <_vfiprintf_r+0xe4>
  406422:	9907      	ldr	r1, [sp, #28]
  406424:	9608      	str	r6, [sp, #32]
  406426:	f8d1 b000 	ldr.w	fp, [r1]
  40642a:	f04f 0200 	mov.w	r2, #0
  40642e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406432:	1d0e      	adds	r6, r1, #4
  406434:	f1bb 0f00 	cmp.w	fp, #0
  406438:	f000 82e5 	beq.w	406a06 <_vfiprintf_r+0xc0e>
  40643c:	1c67      	adds	r7, r4, #1
  40643e:	f000 82c4 	beq.w	4069ca <_vfiprintf_r+0xbd2>
  406442:	4622      	mov	r2, r4
  406444:	2100      	movs	r1, #0
  406446:	4658      	mov	r0, fp
  406448:	9301      	str	r3, [sp, #4]
  40644a:	f002 f8f1 	bl	408630 <memchr>
  40644e:	9b01      	ldr	r3, [sp, #4]
  406450:	2800      	cmp	r0, #0
  406452:	f000 82e5 	beq.w	406a20 <_vfiprintf_r+0xc28>
  406456:	eba0 020b 	sub.w	r2, r0, fp
  40645a:	9205      	str	r2, [sp, #20]
  40645c:	9607      	str	r6, [sp, #28]
  40645e:	9302      	str	r3, [sp, #8]
  406460:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406464:	2400      	movs	r4, #0
  406466:	e619      	b.n	40609c <_vfiprintf_r+0x2a4>
  406468:	f898 2000 	ldrb.w	r2, [r8]
  40646c:	2a2a      	cmp	r2, #42	; 0x2a
  40646e:	f108 0701 	add.w	r7, r8, #1
  406472:	f000 82e9 	beq.w	406a48 <_vfiprintf_r+0xc50>
  406476:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40647a:	2909      	cmp	r1, #9
  40647c:	46b8      	mov	r8, r7
  40647e:	f04f 0400 	mov.w	r4, #0
  406482:	f63f ad2d 	bhi.w	405ee0 <_vfiprintf_r+0xe8>
  406486:	f818 2b01 	ldrb.w	r2, [r8], #1
  40648a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40648e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406492:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406496:	2909      	cmp	r1, #9
  406498:	d9f5      	bls.n	406486 <_vfiprintf_r+0x68e>
  40649a:	e521      	b.n	405ee0 <_vfiprintf_r+0xe8>
  40649c:	f043 0320 	orr.w	r3, r3, #32
  4064a0:	f898 2000 	ldrb.w	r2, [r8]
  4064a4:	e51a      	b.n	405edc <_vfiprintf_r+0xe4>
  4064a6:	9608      	str	r6, [sp, #32]
  4064a8:	2800      	cmp	r0, #0
  4064aa:	f040 82db 	bne.w	406a64 <_vfiprintf_r+0xc6c>
  4064ae:	2a00      	cmp	r2, #0
  4064b0:	f000 80e7 	beq.w	406682 <_vfiprintf_r+0x88a>
  4064b4:	2101      	movs	r1, #1
  4064b6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4064ba:	f04f 0200 	mov.w	r2, #0
  4064be:	9101      	str	r1, [sp, #4]
  4064c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4064c4:	9105      	str	r1, [sp, #20]
  4064c6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4064ca:	e77b      	b.n	4063c4 <_vfiprintf_r+0x5cc>
  4064cc:	9a07      	ldr	r2, [sp, #28]
  4064ce:	6813      	ldr	r3, [r2, #0]
  4064d0:	3204      	adds	r2, #4
  4064d2:	9207      	str	r2, [sp, #28]
  4064d4:	9a03      	ldr	r2, [sp, #12]
  4064d6:	601a      	str	r2, [r3, #0]
  4064d8:	e4cb      	b.n	405e72 <_vfiprintf_r+0x7a>
  4064da:	aa0f      	add	r2, sp, #60	; 0x3c
  4064dc:	9904      	ldr	r1, [sp, #16]
  4064de:	4620      	mov	r0, r4
  4064e0:	f7ff fc4a 	bl	405d78 <__sprint_r.part.0>
  4064e4:	2800      	cmp	r0, #0
  4064e6:	f040 8139 	bne.w	40675c <_vfiprintf_r+0x964>
  4064ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064ee:	f101 0c01 	add.w	ip, r1, #1
  4064f2:	46ce      	mov	lr, r9
  4064f4:	e5ff      	b.n	4060f6 <_vfiprintf_r+0x2fe>
  4064f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064fa:	1c48      	adds	r0, r1, #1
  4064fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406500:	2d00      	cmp	r5, #0
  406502:	f43f ae22 	beq.w	40614a <_vfiprintf_r+0x352>
  406506:	3201      	adds	r2, #1
  406508:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40650c:	2101      	movs	r1, #1
  40650e:	2807      	cmp	r0, #7
  406510:	9211      	str	r2, [sp, #68]	; 0x44
  406512:	9010      	str	r0, [sp, #64]	; 0x40
  406514:	f8ca 5000 	str.w	r5, [sl]
  406518:	f8ca 1004 	str.w	r1, [sl, #4]
  40651c:	f340 8108 	ble.w	406730 <_vfiprintf_r+0x938>
  406520:	2a00      	cmp	r2, #0
  406522:	f040 81bc 	bne.w	40689e <_vfiprintf_r+0xaa6>
  406526:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406528:	2b00      	cmp	r3, #0
  40652a:	f43f ae1f 	beq.w	40616c <_vfiprintf_r+0x374>
  40652e:	ab0e      	add	r3, sp, #56	; 0x38
  406530:	2202      	movs	r2, #2
  406532:	4608      	mov	r0, r1
  406534:	931c      	str	r3, [sp, #112]	; 0x70
  406536:	921d      	str	r2, [sp, #116]	; 0x74
  406538:	46ca      	mov	sl, r9
  40653a:	4601      	mov	r1, r0
  40653c:	f10a 0a08 	add.w	sl, sl, #8
  406540:	3001      	adds	r0, #1
  406542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406544:	2b80      	cmp	r3, #128	; 0x80
  406546:	f43f ae19 	beq.w	40617c <_vfiprintf_r+0x384>
  40654a:	9b05      	ldr	r3, [sp, #20]
  40654c:	1ae4      	subs	r4, r4, r3
  40654e:	2c00      	cmp	r4, #0
  406550:	dd2e      	ble.n	4065b0 <_vfiprintf_r+0x7b8>
  406552:	2c10      	cmp	r4, #16
  406554:	4db3      	ldr	r5, [pc, #716]	; (406824 <_vfiprintf_r+0xa2c>)
  406556:	dd1e      	ble.n	406596 <_vfiprintf_r+0x79e>
  406558:	46d6      	mov	lr, sl
  40655a:	2610      	movs	r6, #16
  40655c:	9f06      	ldr	r7, [sp, #24]
  40655e:	f8dd a010 	ldr.w	sl, [sp, #16]
  406562:	e006      	b.n	406572 <_vfiprintf_r+0x77a>
  406564:	1c88      	adds	r0, r1, #2
  406566:	f10e 0e08 	add.w	lr, lr, #8
  40656a:	4619      	mov	r1, r3
  40656c:	3c10      	subs	r4, #16
  40656e:	2c10      	cmp	r4, #16
  406570:	dd10      	ble.n	406594 <_vfiprintf_r+0x79c>
  406572:	1c4b      	adds	r3, r1, #1
  406574:	3210      	adds	r2, #16
  406576:	2b07      	cmp	r3, #7
  406578:	9211      	str	r2, [sp, #68]	; 0x44
  40657a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40657e:	9310      	str	r3, [sp, #64]	; 0x40
  406580:	ddf0      	ble.n	406564 <_vfiprintf_r+0x76c>
  406582:	2a00      	cmp	r2, #0
  406584:	d165      	bne.n	406652 <_vfiprintf_r+0x85a>
  406586:	3c10      	subs	r4, #16
  406588:	2c10      	cmp	r4, #16
  40658a:	f04f 0001 	mov.w	r0, #1
  40658e:	4611      	mov	r1, r2
  406590:	46ce      	mov	lr, r9
  406592:	dcee      	bgt.n	406572 <_vfiprintf_r+0x77a>
  406594:	46f2      	mov	sl, lr
  406596:	4422      	add	r2, r4
  406598:	2807      	cmp	r0, #7
  40659a:	9211      	str	r2, [sp, #68]	; 0x44
  40659c:	f8ca 5000 	str.w	r5, [sl]
  4065a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4065a4:	9010      	str	r0, [sp, #64]	; 0x40
  4065a6:	f300 8085 	bgt.w	4066b4 <_vfiprintf_r+0x8bc>
  4065aa:	f10a 0a08 	add.w	sl, sl, #8
  4065ae:	3001      	adds	r0, #1
  4065b0:	9905      	ldr	r1, [sp, #20]
  4065b2:	f8ca b000 	str.w	fp, [sl]
  4065b6:	440a      	add	r2, r1
  4065b8:	2807      	cmp	r0, #7
  4065ba:	9211      	str	r2, [sp, #68]	; 0x44
  4065bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4065c0:	9010      	str	r0, [sp, #64]	; 0x40
  4065c2:	f340 8082 	ble.w	4066ca <_vfiprintf_r+0x8d2>
  4065c6:	2a00      	cmp	r2, #0
  4065c8:	f040 8118 	bne.w	4067fc <_vfiprintf_r+0xa04>
  4065cc:	9b02      	ldr	r3, [sp, #8]
  4065ce:	9210      	str	r2, [sp, #64]	; 0x40
  4065d0:	0758      	lsls	r0, r3, #29
  4065d2:	d535      	bpl.n	406640 <_vfiprintf_r+0x848>
  4065d4:	9b08      	ldr	r3, [sp, #32]
  4065d6:	9901      	ldr	r1, [sp, #4]
  4065d8:	1a5c      	subs	r4, r3, r1
  4065da:	2c00      	cmp	r4, #0
  4065dc:	f340 80e7 	ble.w	4067ae <_vfiprintf_r+0x9b6>
  4065e0:	46ca      	mov	sl, r9
  4065e2:	2c10      	cmp	r4, #16
  4065e4:	f340 8218 	ble.w	406a18 <_vfiprintf_r+0xc20>
  4065e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065ea:	4e8f      	ldr	r6, [pc, #572]	; (406828 <_vfiprintf_r+0xa30>)
  4065ec:	9f06      	ldr	r7, [sp, #24]
  4065ee:	f8dd b010 	ldr.w	fp, [sp, #16]
  4065f2:	2510      	movs	r5, #16
  4065f4:	e006      	b.n	406604 <_vfiprintf_r+0x80c>
  4065f6:	1c88      	adds	r0, r1, #2
  4065f8:	f10a 0a08 	add.w	sl, sl, #8
  4065fc:	4619      	mov	r1, r3
  4065fe:	3c10      	subs	r4, #16
  406600:	2c10      	cmp	r4, #16
  406602:	dd11      	ble.n	406628 <_vfiprintf_r+0x830>
  406604:	1c4b      	adds	r3, r1, #1
  406606:	3210      	adds	r2, #16
  406608:	2b07      	cmp	r3, #7
  40660a:	9211      	str	r2, [sp, #68]	; 0x44
  40660c:	f8ca 6000 	str.w	r6, [sl]
  406610:	f8ca 5004 	str.w	r5, [sl, #4]
  406614:	9310      	str	r3, [sp, #64]	; 0x40
  406616:	ddee      	ble.n	4065f6 <_vfiprintf_r+0x7fe>
  406618:	bb42      	cbnz	r2, 40666c <_vfiprintf_r+0x874>
  40661a:	3c10      	subs	r4, #16
  40661c:	2c10      	cmp	r4, #16
  40661e:	f04f 0001 	mov.w	r0, #1
  406622:	4611      	mov	r1, r2
  406624:	46ca      	mov	sl, r9
  406626:	dced      	bgt.n	406604 <_vfiprintf_r+0x80c>
  406628:	4422      	add	r2, r4
  40662a:	2807      	cmp	r0, #7
  40662c:	9211      	str	r2, [sp, #68]	; 0x44
  40662e:	f8ca 6000 	str.w	r6, [sl]
  406632:	f8ca 4004 	str.w	r4, [sl, #4]
  406636:	9010      	str	r0, [sp, #64]	; 0x40
  406638:	dd51      	ble.n	4066de <_vfiprintf_r+0x8e6>
  40663a:	2a00      	cmp	r2, #0
  40663c:	f040 819b 	bne.w	406976 <_vfiprintf_r+0xb7e>
  406640:	9b03      	ldr	r3, [sp, #12]
  406642:	9a08      	ldr	r2, [sp, #32]
  406644:	9901      	ldr	r1, [sp, #4]
  406646:	428a      	cmp	r2, r1
  406648:	bfac      	ite	ge
  40664a:	189b      	addge	r3, r3, r2
  40664c:	185b      	addlt	r3, r3, r1
  40664e:	9303      	str	r3, [sp, #12]
  406650:	e04e      	b.n	4066f0 <_vfiprintf_r+0x8f8>
  406652:	aa0f      	add	r2, sp, #60	; 0x3c
  406654:	4651      	mov	r1, sl
  406656:	4638      	mov	r0, r7
  406658:	f7ff fb8e 	bl	405d78 <__sprint_r.part.0>
  40665c:	2800      	cmp	r0, #0
  40665e:	f040 813f 	bne.w	4068e0 <_vfiprintf_r+0xae8>
  406662:	9910      	ldr	r1, [sp, #64]	; 0x40
  406664:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406666:	1c48      	adds	r0, r1, #1
  406668:	46ce      	mov	lr, r9
  40666a:	e77f      	b.n	40656c <_vfiprintf_r+0x774>
  40666c:	aa0f      	add	r2, sp, #60	; 0x3c
  40666e:	4659      	mov	r1, fp
  406670:	4638      	mov	r0, r7
  406672:	f7ff fb81 	bl	405d78 <__sprint_r.part.0>
  406676:	b960      	cbnz	r0, 406692 <_vfiprintf_r+0x89a>
  406678:	9910      	ldr	r1, [sp, #64]	; 0x40
  40667a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40667c:	1c48      	adds	r0, r1, #1
  40667e:	46ca      	mov	sl, r9
  406680:	e7bd      	b.n	4065fe <_vfiprintf_r+0x806>
  406682:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406684:	f8dd b010 	ldr.w	fp, [sp, #16]
  406688:	2b00      	cmp	r3, #0
  40668a:	f040 81d4 	bne.w	406a36 <_vfiprintf_r+0xc3e>
  40668e:	2300      	movs	r3, #0
  406690:	9310      	str	r3, [sp, #64]	; 0x40
  406692:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406696:	f013 0f01 	tst.w	r3, #1
  40669a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40669e:	d102      	bne.n	4066a6 <_vfiprintf_r+0x8ae>
  4066a0:	059a      	lsls	r2, r3, #22
  4066a2:	f140 80de 	bpl.w	406862 <_vfiprintf_r+0xa6a>
  4066a6:	065b      	lsls	r3, r3, #25
  4066a8:	f53f acb2 	bmi.w	406010 <_vfiprintf_r+0x218>
  4066ac:	9803      	ldr	r0, [sp, #12]
  4066ae:	b02d      	add	sp, #180	; 0xb4
  4066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066b4:	2a00      	cmp	r2, #0
  4066b6:	f040 8106 	bne.w	4068c6 <_vfiprintf_r+0xace>
  4066ba:	9a05      	ldr	r2, [sp, #20]
  4066bc:	921d      	str	r2, [sp, #116]	; 0x74
  4066be:	2301      	movs	r3, #1
  4066c0:	9211      	str	r2, [sp, #68]	; 0x44
  4066c2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4066c6:	9310      	str	r3, [sp, #64]	; 0x40
  4066c8:	46ca      	mov	sl, r9
  4066ca:	f10a 0a08 	add.w	sl, sl, #8
  4066ce:	9b02      	ldr	r3, [sp, #8]
  4066d0:	0759      	lsls	r1, r3, #29
  4066d2:	d504      	bpl.n	4066de <_vfiprintf_r+0x8e6>
  4066d4:	9b08      	ldr	r3, [sp, #32]
  4066d6:	9901      	ldr	r1, [sp, #4]
  4066d8:	1a5c      	subs	r4, r3, r1
  4066da:	2c00      	cmp	r4, #0
  4066dc:	dc81      	bgt.n	4065e2 <_vfiprintf_r+0x7ea>
  4066de:	9b03      	ldr	r3, [sp, #12]
  4066e0:	9908      	ldr	r1, [sp, #32]
  4066e2:	9801      	ldr	r0, [sp, #4]
  4066e4:	4281      	cmp	r1, r0
  4066e6:	bfac      	ite	ge
  4066e8:	185b      	addge	r3, r3, r1
  4066ea:	181b      	addlt	r3, r3, r0
  4066ec:	9303      	str	r3, [sp, #12]
  4066ee:	bb72      	cbnz	r2, 40674e <_vfiprintf_r+0x956>
  4066f0:	2300      	movs	r3, #0
  4066f2:	9310      	str	r3, [sp, #64]	; 0x40
  4066f4:	46ca      	mov	sl, r9
  4066f6:	f7ff bbbc 	b.w	405e72 <_vfiprintf_r+0x7a>
  4066fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4066fc:	9904      	ldr	r1, [sp, #16]
  4066fe:	4620      	mov	r0, r4
  406700:	f7ff fb3a 	bl	405d78 <__sprint_r.part.0>
  406704:	bb50      	cbnz	r0, 40675c <_vfiprintf_r+0x964>
  406706:	9910      	ldr	r1, [sp, #64]	; 0x40
  406708:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40670a:	f101 0e01 	add.w	lr, r1, #1
  40670e:	46cc      	mov	ip, r9
  406710:	e548      	b.n	4061a4 <_vfiprintf_r+0x3ac>
  406712:	2a00      	cmp	r2, #0
  406714:	f040 8140 	bne.w	406998 <_vfiprintf_r+0xba0>
  406718:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40671c:	2900      	cmp	r1, #0
  40671e:	f000 811b 	beq.w	406958 <_vfiprintf_r+0xb60>
  406722:	2201      	movs	r2, #1
  406724:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406728:	4610      	mov	r0, r2
  40672a:	921d      	str	r2, [sp, #116]	; 0x74
  40672c:	911c      	str	r1, [sp, #112]	; 0x70
  40672e:	46ca      	mov	sl, r9
  406730:	4601      	mov	r1, r0
  406732:	f10a 0a08 	add.w	sl, sl, #8
  406736:	3001      	adds	r0, #1
  406738:	e507      	b.n	40614a <_vfiprintf_r+0x352>
  40673a:	9b02      	ldr	r3, [sp, #8]
  40673c:	2a01      	cmp	r2, #1
  40673e:	f000 8098 	beq.w	406872 <_vfiprintf_r+0xa7a>
  406742:	2a02      	cmp	r2, #2
  406744:	d10d      	bne.n	406762 <_vfiprintf_r+0x96a>
  406746:	9302      	str	r3, [sp, #8]
  406748:	2600      	movs	r6, #0
  40674a:	2700      	movs	r7, #0
  40674c:	e5b0      	b.n	4062b0 <_vfiprintf_r+0x4b8>
  40674e:	aa0f      	add	r2, sp, #60	; 0x3c
  406750:	9904      	ldr	r1, [sp, #16]
  406752:	9806      	ldr	r0, [sp, #24]
  406754:	f7ff fb10 	bl	405d78 <__sprint_r.part.0>
  406758:	2800      	cmp	r0, #0
  40675a:	d0c9      	beq.n	4066f0 <_vfiprintf_r+0x8f8>
  40675c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406760:	e797      	b.n	406692 <_vfiprintf_r+0x89a>
  406762:	9302      	str	r3, [sp, #8]
  406764:	2600      	movs	r6, #0
  406766:	2700      	movs	r7, #0
  406768:	4649      	mov	r1, r9
  40676a:	e000      	b.n	40676e <_vfiprintf_r+0x976>
  40676c:	4659      	mov	r1, fp
  40676e:	08f2      	lsrs	r2, r6, #3
  406770:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406774:	08f8      	lsrs	r0, r7, #3
  406776:	f006 0307 	and.w	r3, r6, #7
  40677a:	4607      	mov	r7, r0
  40677c:	4616      	mov	r6, r2
  40677e:	3330      	adds	r3, #48	; 0x30
  406780:	ea56 0207 	orrs.w	r2, r6, r7
  406784:	f801 3c01 	strb.w	r3, [r1, #-1]
  406788:	f101 3bff 	add.w	fp, r1, #4294967295
  40678c:	d1ee      	bne.n	40676c <_vfiprintf_r+0x974>
  40678e:	9a02      	ldr	r2, [sp, #8]
  406790:	07d6      	lsls	r6, r2, #31
  406792:	f57f ad9d 	bpl.w	4062d0 <_vfiprintf_r+0x4d8>
  406796:	2b30      	cmp	r3, #48	; 0x30
  406798:	f43f ad9a 	beq.w	4062d0 <_vfiprintf_r+0x4d8>
  40679c:	3902      	subs	r1, #2
  40679e:	2330      	movs	r3, #48	; 0x30
  4067a0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4067a4:	eba9 0301 	sub.w	r3, r9, r1
  4067a8:	9305      	str	r3, [sp, #20]
  4067aa:	468b      	mov	fp, r1
  4067ac:	e476      	b.n	40609c <_vfiprintf_r+0x2a4>
  4067ae:	9b03      	ldr	r3, [sp, #12]
  4067b0:	9a08      	ldr	r2, [sp, #32]
  4067b2:	428a      	cmp	r2, r1
  4067b4:	bfac      	ite	ge
  4067b6:	189b      	addge	r3, r3, r2
  4067b8:	185b      	addlt	r3, r3, r1
  4067ba:	9303      	str	r3, [sp, #12]
  4067bc:	e798      	b.n	4066f0 <_vfiprintf_r+0x8f8>
  4067be:	2202      	movs	r2, #2
  4067c0:	e44d      	b.n	40605e <_vfiprintf_r+0x266>
  4067c2:	2f00      	cmp	r7, #0
  4067c4:	bf08      	it	eq
  4067c6:	2e0a      	cmpeq	r6, #10
  4067c8:	d352      	bcc.n	406870 <_vfiprintf_r+0xa78>
  4067ca:	46cb      	mov	fp, r9
  4067cc:	4630      	mov	r0, r6
  4067ce:	4639      	mov	r1, r7
  4067d0:	220a      	movs	r2, #10
  4067d2:	2300      	movs	r3, #0
  4067d4:	f003 fbd0 	bl	409f78 <__aeabi_uldivmod>
  4067d8:	3230      	adds	r2, #48	; 0x30
  4067da:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4067de:	4630      	mov	r0, r6
  4067e0:	4639      	mov	r1, r7
  4067e2:	2300      	movs	r3, #0
  4067e4:	220a      	movs	r2, #10
  4067e6:	f003 fbc7 	bl	409f78 <__aeabi_uldivmod>
  4067ea:	4606      	mov	r6, r0
  4067ec:	460f      	mov	r7, r1
  4067ee:	ea56 0307 	orrs.w	r3, r6, r7
  4067f2:	d1eb      	bne.n	4067cc <_vfiprintf_r+0x9d4>
  4067f4:	e56c      	b.n	4062d0 <_vfiprintf_r+0x4d8>
  4067f6:	9405      	str	r4, [sp, #20]
  4067f8:	46cb      	mov	fp, r9
  4067fa:	e44f      	b.n	40609c <_vfiprintf_r+0x2a4>
  4067fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4067fe:	9904      	ldr	r1, [sp, #16]
  406800:	9806      	ldr	r0, [sp, #24]
  406802:	f7ff fab9 	bl	405d78 <__sprint_r.part.0>
  406806:	2800      	cmp	r0, #0
  406808:	d1a8      	bne.n	40675c <_vfiprintf_r+0x964>
  40680a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40680c:	46ca      	mov	sl, r9
  40680e:	e75e      	b.n	4066ce <_vfiprintf_r+0x8d6>
  406810:	aa0f      	add	r2, sp, #60	; 0x3c
  406812:	9904      	ldr	r1, [sp, #16]
  406814:	9806      	ldr	r0, [sp, #24]
  406816:	f7ff faaf 	bl	405d78 <__sprint_r.part.0>
  40681a:	2800      	cmp	r0, #0
  40681c:	d19e      	bne.n	40675c <_vfiprintf_r+0x964>
  40681e:	46ca      	mov	sl, r9
  406820:	f7ff bbc0 	b.w	405fa4 <_vfiprintf_r+0x1ac>
  406824:	0040a584 	.word	0x0040a584
  406828:	0040a574 	.word	0x0040a574
  40682c:	3104      	adds	r1, #4
  40682e:	6816      	ldr	r6, [r2, #0]
  406830:	9107      	str	r1, [sp, #28]
  406832:	2201      	movs	r2, #1
  406834:	2700      	movs	r7, #0
  406836:	e412      	b.n	40605e <_vfiprintf_r+0x266>
  406838:	9807      	ldr	r0, [sp, #28]
  40683a:	4601      	mov	r1, r0
  40683c:	3104      	adds	r1, #4
  40683e:	6806      	ldr	r6, [r0, #0]
  406840:	9107      	str	r1, [sp, #28]
  406842:	2700      	movs	r7, #0
  406844:	e40b      	b.n	40605e <_vfiprintf_r+0x266>
  406846:	680e      	ldr	r6, [r1, #0]
  406848:	3104      	adds	r1, #4
  40684a:	9107      	str	r1, [sp, #28]
  40684c:	2700      	movs	r7, #0
  40684e:	e591      	b.n	406374 <_vfiprintf_r+0x57c>
  406850:	9907      	ldr	r1, [sp, #28]
  406852:	680e      	ldr	r6, [r1, #0]
  406854:	460a      	mov	r2, r1
  406856:	17f7      	asrs	r7, r6, #31
  406858:	3204      	adds	r2, #4
  40685a:	9207      	str	r2, [sp, #28]
  40685c:	4630      	mov	r0, r6
  40685e:	4639      	mov	r1, r7
  406860:	e50f      	b.n	406282 <_vfiprintf_r+0x48a>
  406862:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406866:	f001 fe4d 	bl	408504 <__retarget_lock_release_recursive>
  40686a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40686e:	e71a      	b.n	4066a6 <_vfiprintf_r+0x8ae>
  406870:	9b02      	ldr	r3, [sp, #8]
  406872:	9302      	str	r3, [sp, #8]
  406874:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406878:	3630      	adds	r6, #48	; 0x30
  40687a:	2301      	movs	r3, #1
  40687c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406880:	9305      	str	r3, [sp, #20]
  406882:	e40b      	b.n	40609c <_vfiprintf_r+0x2a4>
  406884:	aa0f      	add	r2, sp, #60	; 0x3c
  406886:	9904      	ldr	r1, [sp, #16]
  406888:	9806      	ldr	r0, [sp, #24]
  40688a:	f7ff fa75 	bl	405d78 <__sprint_r.part.0>
  40688e:	2800      	cmp	r0, #0
  406890:	f47f af64 	bne.w	40675c <_vfiprintf_r+0x964>
  406894:	9910      	ldr	r1, [sp, #64]	; 0x40
  406896:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406898:	1c48      	adds	r0, r1, #1
  40689a:	46ca      	mov	sl, r9
  40689c:	e651      	b.n	406542 <_vfiprintf_r+0x74a>
  40689e:	aa0f      	add	r2, sp, #60	; 0x3c
  4068a0:	9904      	ldr	r1, [sp, #16]
  4068a2:	9806      	ldr	r0, [sp, #24]
  4068a4:	f7ff fa68 	bl	405d78 <__sprint_r.part.0>
  4068a8:	2800      	cmp	r0, #0
  4068aa:	f47f af57 	bne.w	40675c <_vfiprintf_r+0x964>
  4068ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4068b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068b2:	1c48      	adds	r0, r1, #1
  4068b4:	46ca      	mov	sl, r9
  4068b6:	e448      	b.n	40614a <_vfiprintf_r+0x352>
  4068b8:	2a00      	cmp	r2, #0
  4068ba:	f040 8091 	bne.w	4069e0 <_vfiprintf_r+0xbe8>
  4068be:	2001      	movs	r0, #1
  4068c0:	4611      	mov	r1, r2
  4068c2:	46ca      	mov	sl, r9
  4068c4:	e641      	b.n	40654a <_vfiprintf_r+0x752>
  4068c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4068c8:	9904      	ldr	r1, [sp, #16]
  4068ca:	9806      	ldr	r0, [sp, #24]
  4068cc:	f7ff fa54 	bl	405d78 <__sprint_r.part.0>
  4068d0:	2800      	cmp	r0, #0
  4068d2:	f47f af43 	bne.w	40675c <_vfiprintf_r+0x964>
  4068d6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4068d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068da:	3001      	adds	r0, #1
  4068dc:	46ca      	mov	sl, r9
  4068de:	e667      	b.n	4065b0 <_vfiprintf_r+0x7b8>
  4068e0:	46d3      	mov	fp, sl
  4068e2:	e6d6      	b.n	406692 <_vfiprintf_r+0x89a>
  4068e4:	9e07      	ldr	r6, [sp, #28]
  4068e6:	3607      	adds	r6, #7
  4068e8:	f026 0207 	bic.w	r2, r6, #7
  4068ec:	f102 0108 	add.w	r1, r2, #8
  4068f0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4068f4:	9107      	str	r1, [sp, #28]
  4068f6:	2201      	movs	r2, #1
  4068f8:	f7ff bbb1 	b.w	40605e <_vfiprintf_r+0x266>
  4068fc:	9e07      	ldr	r6, [sp, #28]
  4068fe:	3607      	adds	r6, #7
  406900:	f026 0607 	bic.w	r6, r6, #7
  406904:	e9d6 0100 	ldrd	r0, r1, [r6]
  406908:	f106 0208 	add.w	r2, r6, #8
  40690c:	9207      	str	r2, [sp, #28]
  40690e:	4606      	mov	r6, r0
  406910:	460f      	mov	r7, r1
  406912:	e4b6      	b.n	406282 <_vfiprintf_r+0x48a>
  406914:	9e07      	ldr	r6, [sp, #28]
  406916:	3607      	adds	r6, #7
  406918:	f026 0207 	bic.w	r2, r6, #7
  40691c:	f102 0108 	add.w	r1, r2, #8
  406920:	e9d2 6700 	ldrd	r6, r7, [r2]
  406924:	9107      	str	r1, [sp, #28]
  406926:	2200      	movs	r2, #0
  406928:	f7ff bb99 	b.w	40605e <_vfiprintf_r+0x266>
  40692c:	9e07      	ldr	r6, [sp, #28]
  40692e:	3607      	adds	r6, #7
  406930:	f026 0107 	bic.w	r1, r6, #7
  406934:	f101 0008 	add.w	r0, r1, #8
  406938:	9007      	str	r0, [sp, #28]
  40693a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40693e:	e519      	b.n	406374 <_vfiprintf_r+0x57c>
  406940:	46cb      	mov	fp, r9
  406942:	f7ff bbab 	b.w	40609c <_vfiprintf_r+0x2a4>
  406946:	252d      	movs	r5, #45	; 0x2d
  406948:	4276      	negs	r6, r6
  40694a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40694e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406952:	2201      	movs	r2, #1
  406954:	f7ff bb88 	b.w	406068 <_vfiprintf_r+0x270>
  406958:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40695a:	b9b3      	cbnz	r3, 40698a <_vfiprintf_r+0xb92>
  40695c:	4611      	mov	r1, r2
  40695e:	2001      	movs	r0, #1
  406960:	46ca      	mov	sl, r9
  406962:	e5f2      	b.n	40654a <_vfiprintf_r+0x752>
  406964:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406968:	f001 fdcc 	bl	408504 <__retarget_lock_release_recursive>
  40696c:	f04f 33ff 	mov.w	r3, #4294967295
  406970:	9303      	str	r3, [sp, #12]
  406972:	f7ff bb50 	b.w	406016 <_vfiprintf_r+0x21e>
  406976:	aa0f      	add	r2, sp, #60	; 0x3c
  406978:	9904      	ldr	r1, [sp, #16]
  40697a:	9806      	ldr	r0, [sp, #24]
  40697c:	f7ff f9fc 	bl	405d78 <__sprint_r.part.0>
  406980:	2800      	cmp	r0, #0
  406982:	f47f aeeb 	bne.w	40675c <_vfiprintf_r+0x964>
  406986:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406988:	e6a9      	b.n	4066de <_vfiprintf_r+0x8e6>
  40698a:	ab0e      	add	r3, sp, #56	; 0x38
  40698c:	2202      	movs	r2, #2
  40698e:	931c      	str	r3, [sp, #112]	; 0x70
  406990:	921d      	str	r2, [sp, #116]	; 0x74
  406992:	2001      	movs	r0, #1
  406994:	46ca      	mov	sl, r9
  406996:	e5d0      	b.n	40653a <_vfiprintf_r+0x742>
  406998:	aa0f      	add	r2, sp, #60	; 0x3c
  40699a:	9904      	ldr	r1, [sp, #16]
  40699c:	9806      	ldr	r0, [sp, #24]
  40699e:	f7ff f9eb 	bl	405d78 <__sprint_r.part.0>
  4069a2:	2800      	cmp	r0, #0
  4069a4:	f47f aeda 	bne.w	40675c <_vfiprintf_r+0x964>
  4069a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069ac:	1c48      	adds	r0, r1, #1
  4069ae:	46ca      	mov	sl, r9
  4069b0:	e5a4      	b.n	4064fc <_vfiprintf_r+0x704>
  4069b2:	9a07      	ldr	r2, [sp, #28]
  4069b4:	9903      	ldr	r1, [sp, #12]
  4069b6:	6813      	ldr	r3, [r2, #0]
  4069b8:	17cd      	asrs	r5, r1, #31
  4069ba:	4608      	mov	r0, r1
  4069bc:	3204      	adds	r2, #4
  4069be:	4629      	mov	r1, r5
  4069c0:	9207      	str	r2, [sp, #28]
  4069c2:	e9c3 0100 	strd	r0, r1, [r3]
  4069c6:	f7ff ba54 	b.w	405e72 <_vfiprintf_r+0x7a>
  4069ca:	4658      	mov	r0, fp
  4069cc:	9607      	str	r6, [sp, #28]
  4069ce:	9302      	str	r3, [sp, #8]
  4069d0:	f7fd ff36 	bl	404840 <strlen>
  4069d4:	2400      	movs	r4, #0
  4069d6:	9005      	str	r0, [sp, #20]
  4069d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069dc:	f7ff bb5e 	b.w	40609c <_vfiprintf_r+0x2a4>
  4069e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4069e2:	9904      	ldr	r1, [sp, #16]
  4069e4:	9806      	ldr	r0, [sp, #24]
  4069e6:	f7ff f9c7 	bl	405d78 <__sprint_r.part.0>
  4069ea:	2800      	cmp	r0, #0
  4069ec:	f47f aeb6 	bne.w	40675c <_vfiprintf_r+0x964>
  4069f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069f4:	1c48      	adds	r0, r1, #1
  4069f6:	46ca      	mov	sl, r9
  4069f8:	e5a7      	b.n	40654a <_vfiprintf_r+0x752>
  4069fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069fe:	4e20      	ldr	r6, [pc, #128]	; (406a80 <_vfiprintf_r+0xc88>)
  406a00:	3101      	adds	r1, #1
  406a02:	f7ff bb90 	b.w	406126 <_vfiprintf_r+0x32e>
  406a06:	2c06      	cmp	r4, #6
  406a08:	bf28      	it	cs
  406a0a:	2406      	movcs	r4, #6
  406a0c:	9405      	str	r4, [sp, #20]
  406a0e:	9607      	str	r6, [sp, #28]
  406a10:	9401      	str	r4, [sp, #4]
  406a12:	f8df b070 	ldr.w	fp, [pc, #112]	; 406a84 <_vfiprintf_r+0xc8c>
  406a16:	e4d5      	b.n	4063c4 <_vfiprintf_r+0x5cc>
  406a18:	9810      	ldr	r0, [sp, #64]	; 0x40
  406a1a:	4e19      	ldr	r6, [pc, #100]	; (406a80 <_vfiprintf_r+0xc88>)
  406a1c:	3001      	adds	r0, #1
  406a1e:	e603      	b.n	406628 <_vfiprintf_r+0x830>
  406a20:	9405      	str	r4, [sp, #20]
  406a22:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406a26:	9607      	str	r6, [sp, #28]
  406a28:	9302      	str	r3, [sp, #8]
  406a2a:	4604      	mov	r4, r0
  406a2c:	f7ff bb36 	b.w	40609c <_vfiprintf_r+0x2a4>
  406a30:	4686      	mov	lr, r0
  406a32:	f7ff bbce 	b.w	4061d2 <_vfiprintf_r+0x3da>
  406a36:	9806      	ldr	r0, [sp, #24]
  406a38:	aa0f      	add	r2, sp, #60	; 0x3c
  406a3a:	4659      	mov	r1, fp
  406a3c:	f7ff f99c 	bl	405d78 <__sprint_r.part.0>
  406a40:	2800      	cmp	r0, #0
  406a42:	f43f ae24 	beq.w	40668e <_vfiprintf_r+0x896>
  406a46:	e624      	b.n	406692 <_vfiprintf_r+0x89a>
  406a48:	9907      	ldr	r1, [sp, #28]
  406a4a:	f898 2001 	ldrb.w	r2, [r8, #1]
  406a4e:	680c      	ldr	r4, [r1, #0]
  406a50:	3104      	adds	r1, #4
  406a52:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406a56:	46b8      	mov	r8, r7
  406a58:	9107      	str	r1, [sp, #28]
  406a5a:	f7ff ba3f 	b.w	405edc <_vfiprintf_r+0xe4>
  406a5e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a62:	e43c      	b.n	4062de <_vfiprintf_r+0x4e6>
  406a64:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a68:	e521      	b.n	4064ae <_vfiprintf_r+0x6b6>
  406a6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a6e:	f7ff bbf4 	b.w	40625a <_vfiprintf_r+0x462>
  406a72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a76:	e491      	b.n	40639c <_vfiprintf_r+0x5a4>
  406a78:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a7c:	e469      	b.n	406352 <_vfiprintf_r+0x55a>
  406a7e:	bf00      	nop
  406a80:	0040a574 	.word	0x0040a574
  406a84:	0040a548 	.word	0x0040a548

00406a88 <__sbprintf>:
  406a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a8c:	460c      	mov	r4, r1
  406a8e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406a92:	8989      	ldrh	r1, [r1, #12]
  406a94:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406a96:	89e5      	ldrh	r5, [r4, #14]
  406a98:	9619      	str	r6, [sp, #100]	; 0x64
  406a9a:	f021 0102 	bic.w	r1, r1, #2
  406a9e:	4606      	mov	r6, r0
  406aa0:	69e0      	ldr	r0, [r4, #28]
  406aa2:	f8ad 100c 	strh.w	r1, [sp, #12]
  406aa6:	4617      	mov	r7, r2
  406aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406aac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406aae:	f8ad 500e 	strh.w	r5, [sp, #14]
  406ab2:	4698      	mov	r8, r3
  406ab4:	ad1a      	add	r5, sp, #104	; 0x68
  406ab6:	2300      	movs	r3, #0
  406ab8:	9007      	str	r0, [sp, #28]
  406aba:	a816      	add	r0, sp, #88	; 0x58
  406abc:	9209      	str	r2, [sp, #36]	; 0x24
  406abe:	9306      	str	r3, [sp, #24]
  406ac0:	9500      	str	r5, [sp, #0]
  406ac2:	9504      	str	r5, [sp, #16]
  406ac4:	9102      	str	r1, [sp, #8]
  406ac6:	9105      	str	r1, [sp, #20]
  406ac8:	f001 fd16 	bl	4084f8 <__retarget_lock_init_recursive>
  406acc:	4643      	mov	r3, r8
  406ace:	463a      	mov	r2, r7
  406ad0:	4669      	mov	r1, sp
  406ad2:	4630      	mov	r0, r6
  406ad4:	f7ff f990 	bl	405df8 <_vfiprintf_r>
  406ad8:	1e05      	subs	r5, r0, #0
  406ada:	db07      	blt.n	406aec <__sbprintf+0x64>
  406adc:	4630      	mov	r0, r6
  406ade:	4669      	mov	r1, sp
  406ae0:	f001 f8e8 	bl	407cb4 <_fflush_r>
  406ae4:	2800      	cmp	r0, #0
  406ae6:	bf18      	it	ne
  406ae8:	f04f 35ff 	movne.w	r5, #4294967295
  406aec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406af0:	065b      	lsls	r3, r3, #25
  406af2:	d503      	bpl.n	406afc <__sbprintf+0x74>
  406af4:	89a3      	ldrh	r3, [r4, #12]
  406af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406afa:	81a3      	strh	r3, [r4, #12]
  406afc:	9816      	ldr	r0, [sp, #88]	; 0x58
  406afe:	f001 fcfd 	bl	4084fc <__retarget_lock_close_recursive>
  406b02:	4628      	mov	r0, r5
  406b04:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406b0c <__swsetup_r>:
  406b0c:	b538      	push	{r3, r4, r5, lr}
  406b0e:	4b30      	ldr	r3, [pc, #192]	; (406bd0 <__swsetup_r+0xc4>)
  406b10:	681b      	ldr	r3, [r3, #0]
  406b12:	4605      	mov	r5, r0
  406b14:	460c      	mov	r4, r1
  406b16:	b113      	cbz	r3, 406b1e <__swsetup_r+0x12>
  406b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406b1a:	2a00      	cmp	r2, #0
  406b1c:	d038      	beq.n	406b90 <__swsetup_r+0x84>
  406b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b22:	b293      	uxth	r3, r2
  406b24:	0718      	lsls	r0, r3, #28
  406b26:	d50c      	bpl.n	406b42 <__swsetup_r+0x36>
  406b28:	6920      	ldr	r0, [r4, #16]
  406b2a:	b1a8      	cbz	r0, 406b58 <__swsetup_r+0x4c>
  406b2c:	f013 0201 	ands.w	r2, r3, #1
  406b30:	d01e      	beq.n	406b70 <__swsetup_r+0x64>
  406b32:	6963      	ldr	r3, [r4, #20]
  406b34:	2200      	movs	r2, #0
  406b36:	425b      	negs	r3, r3
  406b38:	61a3      	str	r3, [r4, #24]
  406b3a:	60a2      	str	r2, [r4, #8]
  406b3c:	b1f0      	cbz	r0, 406b7c <__swsetup_r+0x70>
  406b3e:	2000      	movs	r0, #0
  406b40:	bd38      	pop	{r3, r4, r5, pc}
  406b42:	06d9      	lsls	r1, r3, #27
  406b44:	d53c      	bpl.n	406bc0 <__swsetup_r+0xb4>
  406b46:	0758      	lsls	r0, r3, #29
  406b48:	d426      	bmi.n	406b98 <__swsetup_r+0x8c>
  406b4a:	6920      	ldr	r0, [r4, #16]
  406b4c:	f042 0308 	orr.w	r3, r2, #8
  406b50:	81a3      	strh	r3, [r4, #12]
  406b52:	b29b      	uxth	r3, r3
  406b54:	2800      	cmp	r0, #0
  406b56:	d1e9      	bne.n	406b2c <__swsetup_r+0x20>
  406b58:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406b5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406b60:	d0e4      	beq.n	406b2c <__swsetup_r+0x20>
  406b62:	4628      	mov	r0, r5
  406b64:	4621      	mov	r1, r4
  406b66:	f001 fcfd 	bl	408564 <__smakebuf_r>
  406b6a:	89a3      	ldrh	r3, [r4, #12]
  406b6c:	6920      	ldr	r0, [r4, #16]
  406b6e:	e7dd      	b.n	406b2c <__swsetup_r+0x20>
  406b70:	0799      	lsls	r1, r3, #30
  406b72:	bf58      	it	pl
  406b74:	6962      	ldrpl	r2, [r4, #20]
  406b76:	60a2      	str	r2, [r4, #8]
  406b78:	2800      	cmp	r0, #0
  406b7a:	d1e0      	bne.n	406b3e <__swsetup_r+0x32>
  406b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b80:	061a      	lsls	r2, r3, #24
  406b82:	d5dd      	bpl.n	406b40 <__swsetup_r+0x34>
  406b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b88:	81a3      	strh	r3, [r4, #12]
  406b8a:	f04f 30ff 	mov.w	r0, #4294967295
  406b8e:	bd38      	pop	{r3, r4, r5, pc}
  406b90:	4618      	mov	r0, r3
  406b92:	f001 f8e7 	bl	407d64 <__sinit>
  406b96:	e7c2      	b.n	406b1e <__swsetup_r+0x12>
  406b98:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406b9a:	b151      	cbz	r1, 406bb2 <__swsetup_r+0xa6>
  406b9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406ba0:	4299      	cmp	r1, r3
  406ba2:	d004      	beq.n	406bae <__swsetup_r+0xa2>
  406ba4:	4628      	mov	r0, r5
  406ba6:	f001 fa03 	bl	407fb0 <_free_r>
  406baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406bae:	2300      	movs	r3, #0
  406bb0:	6323      	str	r3, [r4, #48]	; 0x30
  406bb2:	2300      	movs	r3, #0
  406bb4:	6920      	ldr	r0, [r4, #16]
  406bb6:	6063      	str	r3, [r4, #4]
  406bb8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406bbc:	6020      	str	r0, [r4, #0]
  406bbe:	e7c5      	b.n	406b4c <__swsetup_r+0x40>
  406bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406bc4:	2309      	movs	r3, #9
  406bc6:	602b      	str	r3, [r5, #0]
  406bc8:	f04f 30ff 	mov.w	r0, #4294967295
  406bcc:	81a2      	strh	r2, [r4, #12]
  406bce:	bd38      	pop	{r3, r4, r5, pc}
  406bd0:	2040000c 	.word	0x2040000c

00406bd4 <register_fini>:
  406bd4:	4b02      	ldr	r3, [pc, #8]	; (406be0 <register_fini+0xc>)
  406bd6:	b113      	cbz	r3, 406bde <register_fini+0xa>
  406bd8:	4802      	ldr	r0, [pc, #8]	; (406be4 <register_fini+0x10>)
  406bda:	f000 b805 	b.w	406be8 <atexit>
  406bde:	4770      	bx	lr
  406be0:	00000000 	.word	0x00000000
  406be4:	00407dd5 	.word	0x00407dd5

00406be8 <atexit>:
  406be8:	2300      	movs	r3, #0
  406bea:	4601      	mov	r1, r0
  406bec:	461a      	mov	r2, r3
  406bee:	4618      	mov	r0, r3
  406bf0:	f002 bbda 	b.w	4093a8 <__register_exitproc>

00406bf4 <quorem>:
  406bf4:	6902      	ldr	r2, [r0, #16]
  406bf6:	690b      	ldr	r3, [r1, #16]
  406bf8:	4293      	cmp	r3, r2
  406bfa:	f300 808d 	bgt.w	406d18 <quorem+0x124>
  406bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c02:	f103 38ff 	add.w	r8, r3, #4294967295
  406c06:	f101 0714 	add.w	r7, r1, #20
  406c0a:	f100 0b14 	add.w	fp, r0, #20
  406c0e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406c12:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406c16:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406c1a:	b083      	sub	sp, #12
  406c1c:	3201      	adds	r2, #1
  406c1e:	fbb3 f9f2 	udiv	r9, r3, r2
  406c22:	eb0b 0304 	add.w	r3, fp, r4
  406c26:	9400      	str	r4, [sp, #0]
  406c28:	eb07 0a04 	add.w	sl, r7, r4
  406c2c:	9301      	str	r3, [sp, #4]
  406c2e:	f1b9 0f00 	cmp.w	r9, #0
  406c32:	d039      	beq.n	406ca8 <quorem+0xb4>
  406c34:	2500      	movs	r5, #0
  406c36:	462e      	mov	r6, r5
  406c38:	46bc      	mov	ip, r7
  406c3a:	46de      	mov	lr, fp
  406c3c:	f85c 4b04 	ldr.w	r4, [ip], #4
  406c40:	f8de 3000 	ldr.w	r3, [lr]
  406c44:	b2a2      	uxth	r2, r4
  406c46:	fb09 5502 	mla	r5, r9, r2, r5
  406c4a:	0c22      	lsrs	r2, r4, #16
  406c4c:	0c2c      	lsrs	r4, r5, #16
  406c4e:	fb09 4202 	mla	r2, r9, r2, r4
  406c52:	b2ad      	uxth	r5, r5
  406c54:	1b75      	subs	r5, r6, r5
  406c56:	b296      	uxth	r6, r2
  406c58:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406c5c:	fa15 f383 	uxtah	r3, r5, r3
  406c60:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406c64:	b29b      	uxth	r3, r3
  406c66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406c6a:	45e2      	cmp	sl, ip
  406c6c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406c70:	f84e 3b04 	str.w	r3, [lr], #4
  406c74:	ea4f 4626 	mov.w	r6, r6, asr #16
  406c78:	d2e0      	bcs.n	406c3c <quorem+0x48>
  406c7a:	9b00      	ldr	r3, [sp, #0]
  406c7c:	f85b 3003 	ldr.w	r3, [fp, r3]
  406c80:	b993      	cbnz	r3, 406ca8 <quorem+0xb4>
  406c82:	9c01      	ldr	r4, [sp, #4]
  406c84:	1f23      	subs	r3, r4, #4
  406c86:	459b      	cmp	fp, r3
  406c88:	d20c      	bcs.n	406ca4 <quorem+0xb0>
  406c8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406c8e:	b94b      	cbnz	r3, 406ca4 <quorem+0xb0>
  406c90:	f1a4 0308 	sub.w	r3, r4, #8
  406c94:	e002      	b.n	406c9c <quorem+0xa8>
  406c96:	681a      	ldr	r2, [r3, #0]
  406c98:	3b04      	subs	r3, #4
  406c9a:	b91a      	cbnz	r2, 406ca4 <quorem+0xb0>
  406c9c:	459b      	cmp	fp, r3
  406c9e:	f108 38ff 	add.w	r8, r8, #4294967295
  406ca2:	d3f8      	bcc.n	406c96 <quorem+0xa2>
  406ca4:	f8c0 8010 	str.w	r8, [r0, #16]
  406ca8:	4604      	mov	r4, r0
  406caa:	f001 ff73 	bl	408b94 <__mcmp>
  406cae:	2800      	cmp	r0, #0
  406cb0:	db2e      	blt.n	406d10 <quorem+0x11c>
  406cb2:	f109 0901 	add.w	r9, r9, #1
  406cb6:	465d      	mov	r5, fp
  406cb8:	2300      	movs	r3, #0
  406cba:	f857 1b04 	ldr.w	r1, [r7], #4
  406cbe:	6828      	ldr	r0, [r5, #0]
  406cc0:	b28a      	uxth	r2, r1
  406cc2:	1a9a      	subs	r2, r3, r2
  406cc4:	0c0b      	lsrs	r3, r1, #16
  406cc6:	fa12 f280 	uxtah	r2, r2, r0
  406cca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  406cce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406cd2:	b292      	uxth	r2, r2
  406cd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406cd8:	45ba      	cmp	sl, r7
  406cda:	f845 2b04 	str.w	r2, [r5], #4
  406cde:	ea4f 4323 	mov.w	r3, r3, asr #16
  406ce2:	d2ea      	bcs.n	406cba <quorem+0xc6>
  406ce4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406ce8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406cec:	b982      	cbnz	r2, 406d10 <quorem+0x11c>
  406cee:	1f1a      	subs	r2, r3, #4
  406cf0:	4593      	cmp	fp, r2
  406cf2:	d20b      	bcs.n	406d0c <quorem+0x118>
  406cf4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406cf8:	b942      	cbnz	r2, 406d0c <quorem+0x118>
  406cfa:	3b08      	subs	r3, #8
  406cfc:	e002      	b.n	406d04 <quorem+0x110>
  406cfe:	681a      	ldr	r2, [r3, #0]
  406d00:	3b04      	subs	r3, #4
  406d02:	b91a      	cbnz	r2, 406d0c <quorem+0x118>
  406d04:	459b      	cmp	fp, r3
  406d06:	f108 38ff 	add.w	r8, r8, #4294967295
  406d0a:	d3f8      	bcc.n	406cfe <quorem+0x10a>
  406d0c:	f8c4 8010 	str.w	r8, [r4, #16]
  406d10:	4648      	mov	r0, r9
  406d12:	b003      	add	sp, #12
  406d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d18:	2000      	movs	r0, #0
  406d1a:	4770      	bx	lr
  406d1c:	0000      	movs	r0, r0
	...

00406d20 <_dtoa_r>:
  406d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d24:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406d26:	b09b      	sub	sp, #108	; 0x6c
  406d28:	4604      	mov	r4, r0
  406d2a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406d2c:	4692      	mov	sl, r2
  406d2e:	469b      	mov	fp, r3
  406d30:	b141      	cbz	r1, 406d44 <_dtoa_r+0x24>
  406d32:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406d34:	604a      	str	r2, [r1, #4]
  406d36:	2301      	movs	r3, #1
  406d38:	4093      	lsls	r3, r2
  406d3a:	608b      	str	r3, [r1, #8]
  406d3c:	f001 fd52 	bl	4087e4 <_Bfree>
  406d40:	2300      	movs	r3, #0
  406d42:	6423      	str	r3, [r4, #64]	; 0x40
  406d44:	f1bb 0f00 	cmp.w	fp, #0
  406d48:	465d      	mov	r5, fp
  406d4a:	db35      	blt.n	406db8 <_dtoa_r+0x98>
  406d4c:	2300      	movs	r3, #0
  406d4e:	6033      	str	r3, [r6, #0]
  406d50:	4b9d      	ldr	r3, [pc, #628]	; (406fc8 <_dtoa_r+0x2a8>)
  406d52:	43ab      	bics	r3, r5
  406d54:	d015      	beq.n	406d82 <_dtoa_r+0x62>
  406d56:	4650      	mov	r0, sl
  406d58:	4659      	mov	r1, fp
  406d5a:	2200      	movs	r2, #0
  406d5c:	2300      	movs	r3, #0
  406d5e:	f003 f89b 	bl	409e98 <__aeabi_dcmpeq>
  406d62:	4680      	mov	r8, r0
  406d64:	2800      	cmp	r0, #0
  406d66:	d02d      	beq.n	406dc4 <_dtoa_r+0xa4>
  406d68:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d6a:	2301      	movs	r3, #1
  406d6c:	6013      	str	r3, [r2, #0]
  406d6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406d70:	2b00      	cmp	r3, #0
  406d72:	f000 80bd 	beq.w	406ef0 <_dtoa_r+0x1d0>
  406d76:	4895      	ldr	r0, [pc, #596]	; (406fcc <_dtoa_r+0x2ac>)
  406d78:	6018      	str	r0, [r3, #0]
  406d7a:	3801      	subs	r0, #1
  406d7c:	b01b      	add	sp, #108	; 0x6c
  406d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d82:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d84:	f242 730f 	movw	r3, #9999	; 0x270f
  406d88:	6013      	str	r3, [r2, #0]
  406d8a:	f1ba 0f00 	cmp.w	sl, #0
  406d8e:	d10d      	bne.n	406dac <_dtoa_r+0x8c>
  406d90:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406d94:	b955      	cbnz	r5, 406dac <_dtoa_r+0x8c>
  406d96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406d98:	488d      	ldr	r0, [pc, #564]	; (406fd0 <_dtoa_r+0x2b0>)
  406d9a:	2b00      	cmp	r3, #0
  406d9c:	d0ee      	beq.n	406d7c <_dtoa_r+0x5c>
  406d9e:	f100 0308 	add.w	r3, r0, #8
  406da2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  406da4:	6013      	str	r3, [r2, #0]
  406da6:	b01b      	add	sp, #108	; 0x6c
  406da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406dae:	4889      	ldr	r0, [pc, #548]	; (406fd4 <_dtoa_r+0x2b4>)
  406db0:	2b00      	cmp	r3, #0
  406db2:	d0e3      	beq.n	406d7c <_dtoa_r+0x5c>
  406db4:	1cc3      	adds	r3, r0, #3
  406db6:	e7f4      	b.n	406da2 <_dtoa_r+0x82>
  406db8:	2301      	movs	r3, #1
  406dba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406dbe:	6033      	str	r3, [r6, #0]
  406dc0:	46ab      	mov	fp, r5
  406dc2:	e7c5      	b.n	406d50 <_dtoa_r+0x30>
  406dc4:	aa18      	add	r2, sp, #96	; 0x60
  406dc6:	ab19      	add	r3, sp, #100	; 0x64
  406dc8:	9201      	str	r2, [sp, #4]
  406dca:	9300      	str	r3, [sp, #0]
  406dcc:	4652      	mov	r2, sl
  406dce:	465b      	mov	r3, fp
  406dd0:	4620      	mov	r0, r4
  406dd2:	f001 ff7f 	bl	408cd4 <__d2b>
  406dd6:	0d2b      	lsrs	r3, r5, #20
  406dd8:	4681      	mov	r9, r0
  406dda:	d071      	beq.n	406ec0 <_dtoa_r+0x1a0>
  406ddc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406de0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  406de4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406de6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406dea:	4650      	mov	r0, sl
  406dec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406df0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406df4:	2200      	movs	r2, #0
  406df6:	4b78      	ldr	r3, [pc, #480]	; (406fd8 <_dtoa_r+0x2b8>)
  406df8:	f002 fc32 	bl	409660 <__aeabi_dsub>
  406dfc:	a36c      	add	r3, pc, #432	; (adr r3, 406fb0 <_dtoa_r+0x290>)
  406dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e02:	f002 fde1 	bl	4099c8 <__aeabi_dmul>
  406e06:	a36c      	add	r3, pc, #432	; (adr r3, 406fb8 <_dtoa_r+0x298>)
  406e08:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e0c:	f002 fc2a 	bl	409664 <__adddf3>
  406e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406e14:	4630      	mov	r0, r6
  406e16:	f002 fd71 	bl	4098fc <__aeabi_i2d>
  406e1a:	a369      	add	r3, pc, #420	; (adr r3, 406fc0 <_dtoa_r+0x2a0>)
  406e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e20:	f002 fdd2 	bl	4099c8 <__aeabi_dmul>
  406e24:	4602      	mov	r2, r0
  406e26:	460b      	mov	r3, r1
  406e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406e2c:	f002 fc1a 	bl	409664 <__adddf3>
  406e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406e34:	f003 f878 	bl	409f28 <__aeabi_d2iz>
  406e38:	2200      	movs	r2, #0
  406e3a:	9002      	str	r0, [sp, #8]
  406e3c:	2300      	movs	r3, #0
  406e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406e42:	f003 f833 	bl	409eac <__aeabi_dcmplt>
  406e46:	2800      	cmp	r0, #0
  406e48:	f040 8173 	bne.w	407132 <_dtoa_r+0x412>
  406e4c:	9d02      	ldr	r5, [sp, #8]
  406e4e:	2d16      	cmp	r5, #22
  406e50:	f200 815d 	bhi.w	40710e <_dtoa_r+0x3ee>
  406e54:	4b61      	ldr	r3, [pc, #388]	; (406fdc <_dtoa_r+0x2bc>)
  406e56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
  406e5e:	4652      	mov	r2, sl
  406e60:	465b      	mov	r3, fp
  406e62:	f003 f841 	bl	409ee8 <__aeabi_dcmpgt>
  406e66:	2800      	cmp	r0, #0
  406e68:	f000 81c5 	beq.w	4071f6 <_dtoa_r+0x4d6>
  406e6c:	1e6b      	subs	r3, r5, #1
  406e6e:	9302      	str	r3, [sp, #8]
  406e70:	2300      	movs	r3, #0
  406e72:	930e      	str	r3, [sp, #56]	; 0x38
  406e74:	1bbf      	subs	r7, r7, r6
  406e76:	1e7b      	subs	r3, r7, #1
  406e78:	9306      	str	r3, [sp, #24]
  406e7a:	f100 8154 	bmi.w	407126 <_dtoa_r+0x406>
  406e7e:	2300      	movs	r3, #0
  406e80:	9308      	str	r3, [sp, #32]
  406e82:	9b02      	ldr	r3, [sp, #8]
  406e84:	2b00      	cmp	r3, #0
  406e86:	f2c0 8145 	blt.w	407114 <_dtoa_r+0x3f4>
  406e8a:	9a06      	ldr	r2, [sp, #24]
  406e8c:	930d      	str	r3, [sp, #52]	; 0x34
  406e8e:	4611      	mov	r1, r2
  406e90:	4419      	add	r1, r3
  406e92:	2300      	movs	r3, #0
  406e94:	9106      	str	r1, [sp, #24]
  406e96:	930c      	str	r3, [sp, #48]	; 0x30
  406e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e9a:	2b09      	cmp	r3, #9
  406e9c:	d82a      	bhi.n	406ef4 <_dtoa_r+0x1d4>
  406e9e:	2b05      	cmp	r3, #5
  406ea0:	f340 865b 	ble.w	407b5a <_dtoa_r+0xe3a>
  406ea4:	3b04      	subs	r3, #4
  406ea6:	9324      	str	r3, [sp, #144]	; 0x90
  406ea8:	2500      	movs	r5, #0
  406eaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406eac:	3b02      	subs	r3, #2
  406eae:	2b03      	cmp	r3, #3
  406eb0:	f200 8642 	bhi.w	407b38 <_dtoa_r+0xe18>
  406eb4:	e8df f013 	tbh	[pc, r3, lsl #1]
  406eb8:	02c903d4 	.word	0x02c903d4
  406ebc:	046103df 	.word	0x046103df
  406ec0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406ec2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406ec4:	443e      	add	r6, r7
  406ec6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406eca:	2b20      	cmp	r3, #32
  406ecc:	f340 818e 	ble.w	4071ec <_dtoa_r+0x4cc>
  406ed0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406ed4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406ed8:	409d      	lsls	r5, r3
  406eda:	fa2a f000 	lsr.w	r0, sl, r0
  406ede:	4328      	orrs	r0, r5
  406ee0:	f002 fcfc 	bl	4098dc <__aeabi_ui2d>
  406ee4:	2301      	movs	r3, #1
  406ee6:	3e01      	subs	r6, #1
  406ee8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406eec:	9314      	str	r3, [sp, #80]	; 0x50
  406eee:	e781      	b.n	406df4 <_dtoa_r+0xd4>
  406ef0:	483b      	ldr	r0, [pc, #236]	; (406fe0 <_dtoa_r+0x2c0>)
  406ef2:	e743      	b.n	406d7c <_dtoa_r+0x5c>
  406ef4:	2100      	movs	r1, #0
  406ef6:	6461      	str	r1, [r4, #68]	; 0x44
  406ef8:	4620      	mov	r0, r4
  406efa:	9125      	str	r1, [sp, #148]	; 0x94
  406efc:	f001 fc4c 	bl	408798 <_Balloc>
  406f00:	f04f 33ff 	mov.w	r3, #4294967295
  406f04:	930a      	str	r3, [sp, #40]	; 0x28
  406f06:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406f08:	930f      	str	r3, [sp, #60]	; 0x3c
  406f0a:	2301      	movs	r3, #1
  406f0c:	9004      	str	r0, [sp, #16]
  406f0e:	6420      	str	r0, [r4, #64]	; 0x40
  406f10:	9224      	str	r2, [sp, #144]	; 0x90
  406f12:	930b      	str	r3, [sp, #44]	; 0x2c
  406f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406f16:	2b00      	cmp	r3, #0
  406f18:	f2c0 80d9 	blt.w	4070ce <_dtoa_r+0x3ae>
  406f1c:	9a02      	ldr	r2, [sp, #8]
  406f1e:	2a0e      	cmp	r2, #14
  406f20:	f300 80d5 	bgt.w	4070ce <_dtoa_r+0x3ae>
  406f24:	4b2d      	ldr	r3, [pc, #180]	; (406fdc <_dtoa_r+0x2bc>)
  406f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406f32:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406f34:	2b00      	cmp	r3, #0
  406f36:	f2c0 83ba 	blt.w	4076ae <_dtoa_r+0x98e>
  406f3a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406f3e:	4650      	mov	r0, sl
  406f40:	462a      	mov	r2, r5
  406f42:	4633      	mov	r3, r6
  406f44:	4659      	mov	r1, fp
  406f46:	f002 fe69 	bl	409c1c <__aeabi_ddiv>
  406f4a:	f002 ffed 	bl	409f28 <__aeabi_d2iz>
  406f4e:	4680      	mov	r8, r0
  406f50:	f002 fcd4 	bl	4098fc <__aeabi_i2d>
  406f54:	462a      	mov	r2, r5
  406f56:	4633      	mov	r3, r6
  406f58:	f002 fd36 	bl	4099c8 <__aeabi_dmul>
  406f5c:	460b      	mov	r3, r1
  406f5e:	4602      	mov	r2, r0
  406f60:	4659      	mov	r1, fp
  406f62:	4650      	mov	r0, sl
  406f64:	f002 fb7c 	bl	409660 <__aeabi_dsub>
  406f68:	9d04      	ldr	r5, [sp, #16]
  406f6a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406f6e:	702b      	strb	r3, [r5, #0]
  406f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406f72:	2b01      	cmp	r3, #1
  406f74:	4606      	mov	r6, r0
  406f76:	460f      	mov	r7, r1
  406f78:	f105 0501 	add.w	r5, r5, #1
  406f7c:	d068      	beq.n	407050 <_dtoa_r+0x330>
  406f7e:	2200      	movs	r2, #0
  406f80:	4b18      	ldr	r3, [pc, #96]	; (406fe4 <_dtoa_r+0x2c4>)
  406f82:	f002 fd21 	bl	4099c8 <__aeabi_dmul>
  406f86:	2200      	movs	r2, #0
  406f88:	2300      	movs	r3, #0
  406f8a:	4606      	mov	r6, r0
  406f8c:	460f      	mov	r7, r1
  406f8e:	f002 ff83 	bl	409e98 <__aeabi_dcmpeq>
  406f92:	2800      	cmp	r0, #0
  406f94:	f040 8088 	bne.w	4070a8 <_dtoa_r+0x388>
  406f98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406f9c:	f04f 0a00 	mov.w	sl, #0
  406fa0:	f8df b040 	ldr.w	fp, [pc, #64]	; 406fe4 <_dtoa_r+0x2c4>
  406fa4:	940c      	str	r4, [sp, #48]	; 0x30
  406fa6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406faa:	e028      	b.n	406ffe <_dtoa_r+0x2de>
  406fac:	f3af 8000 	nop.w
  406fb0:	636f4361 	.word	0x636f4361
  406fb4:	3fd287a7 	.word	0x3fd287a7
  406fb8:	8b60c8b3 	.word	0x8b60c8b3
  406fbc:	3fc68a28 	.word	0x3fc68a28
  406fc0:	509f79fb 	.word	0x509f79fb
  406fc4:	3fd34413 	.word	0x3fd34413
  406fc8:	7ff00000 	.word	0x7ff00000
  406fcc:	0040a551 	.word	0x0040a551
  406fd0:	0040a594 	.word	0x0040a594
  406fd4:	0040a5a0 	.word	0x0040a5a0
  406fd8:	3ff80000 	.word	0x3ff80000
  406fdc:	0040a5e0 	.word	0x0040a5e0
  406fe0:	0040a550 	.word	0x0040a550
  406fe4:	40240000 	.word	0x40240000
  406fe8:	f002 fcee 	bl	4099c8 <__aeabi_dmul>
  406fec:	2200      	movs	r2, #0
  406fee:	2300      	movs	r3, #0
  406ff0:	4606      	mov	r6, r0
  406ff2:	460f      	mov	r7, r1
  406ff4:	f002 ff50 	bl	409e98 <__aeabi_dcmpeq>
  406ff8:	2800      	cmp	r0, #0
  406ffa:	f040 83c1 	bne.w	407780 <_dtoa_r+0xa60>
  406ffe:	4642      	mov	r2, r8
  407000:	464b      	mov	r3, r9
  407002:	4630      	mov	r0, r6
  407004:	4639      	mov	r1, r7
  407006:	f002 fe09 	bl	409c1c <__aeabi_ddiv>
  40700a:	f002 ff8d 	bl	409f28 <__aeabi_d2iz>
  40700e:	4604      	mov	r4, r0
  407010:	f002 fc74 	bl	4098fc <__aeabi_i2d>
  407014:	4642      	mov	r2, r8
  407016:	464b      	mov	r3, r9
  407018:	f002 fcd6 	bl	4099c8 <__aeabi_dmul>
  40701c:	4602      	mov	r2, r0
  40701e:	460b      	mov	r3, r1
  407020:	4630      	mov	r0, r6
  407022:	4639      	mov	r1, r7
  407024:	f002 fb1c 	bl	409660 <__aeabi_dsub>
  407028:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40702c:	9e04      	ldr	r6, [sp, #16]
  40702e:	f805 eb01 	strb.w	lr, [r5], #1
  407032:	eba5 0e06 	sub.w	lr, r5, r6
  407036:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407038:	45b6      	cmp	lr, r6
  40703a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40703e:	4652      	mov	r2, sl
  407040:	465b      	mov	r3, fp
  407042:	d1d1      	bne.n	406fe8 <_dtoa_r+0x2c8>
  407044:	46a0      	mov	r8, r4
  407046:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40704a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40704c:	4606      	mov	r6, r0
  40704e:	460f      	mov	r7, r1
  407050:	4632      	mov	r2, r6
  407052:	463b      	mov	r3, r7
  407054:	4630      	mov	r0, r6
  407056:	4639      	mov	r1, r7
  407058:	f002 fb04 	bl	409664 <__adddf3>
  40705c:	4606      	mov	r6, r0
  40705e:	460f      	mov	r7, r1
  407060:	4602      	mov	r2, r0
  407062:	460b      	mov	r3, r1
  407064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407068:	f002 ff20 	bl	409eac <__aeabi_dcmplt>
  40706c:	b948      	cbnz	r0, 407082 <_dtoa_r+0x362>
  40706e:	4632      	mov	r2, r6
  407070:	463b      	mov	r3, r7
  407072:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407076:	f002 ff0f 	bl	409e98 <__aeabi_dcmpeq>
  40707a:	b1a8      	cbz	r0, 4070a8 <_dtoa_r+0x388>
  40707c:	f018 0f01 	tst.w	r8, #1
  407080:	d012      	beq.n	4070a8 <_dtoa_r+0x388>
  407082:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407086:	9a04      	ldr	r2, [sp, #16]
  407088:	1e6b      	subs	r3, r5, #1
  40708a:	e004      	b.n	407096 <_dtoa_r+0x376>
  40708c:	429a      	cmp	r2, r3
  40708e:	f000 8401 	beq.w	407894 <_dtoa_r+0xb74>
  407092:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407096:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40709a:	f103 0501 	add.w	r5, r3, #1
  40709e:	d0f5      	beq.n	40708c <_dtoa_r+0x36c>
  4070a0:	f108 0801 	add.w	r8, r8, #1
  4070a4:	f883 8000 	strb.w	r8, [r3]
  4070a8:	4649      	mov	r1, r9
  4070aa:	4620      	mov	r0, r4
  4070ac:	f001 fb9a 	bl	4087e4 <_Bfree>
  4070b0:	2200      	movs	r2, #0
  4070b2:	9b02      	ldr	r3, [sp, #8]
  4070b4:	702a      	strb	r2, [r5, #0]
  4070b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4070b8:	3301      	adds	r3, #1
  4070ba:	6013      	str	r3, [r2, #0]
  4070bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4070be:	2b00      	cmp	r3, #0
  4070c0:	f000 839e 	beq.w	407800 <_dtoa_r+0xae0>
  4070c4:	9804      	ldr	r0, [sp, #16]
  4070c6:	601d      	str	r5, [r3, #0]
  4070c8:	b01b      	add	sp, #108	; 0x6c
  4070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4070d0:	2a00      	cmp	r2, #0
  4070d2:	d03e      	beq.n	407152 <_dtoa_r+0x432>
  4070d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4070d6:	2a01      	cmp	r2, #1
  4070d8:	f340 8311 	ble.w	4076fe <_dtoa_r+0x9de>
  4070dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4070e0:	1e5f      	subs	r7, r3, #1
  4070e2:	42ba      	cmp	r2, r7
  4070e4:	f2c0 838f 	blt.w	407806 <_dtoa_r+0xae6>
  4070e8:	1bd7      	subs	r7, r2, r7
  4070ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070ec:	2b00      	cmp	r3, #0
  4070ee:	f2c0 848b 	blt.w	407a08 <_dtoa_r+0xce8>
  4070f2:	9d08      	ldr	r5, [sp, #32]
  4070f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070f6:	9a08      	ldr	r2, [sp, #32]
  4070f8:	441a      	add	r2, r3
  4070fa:	9208      	str	r2, [sp, #32]
  4070fc:	9a06      	ldr	r2, [sp, #24]
  4070fe:	2101      	movs	r1, #1
  407100:	441a      	add	r2, r3
  407102:	4620      	mov	r0, r4
  407104:	9206      	str	r2, [sp, #24]
  407106:	f001 fc07 	bl	408918 <__i2b>
  40710a:	4606      	mov	r6, r0
  40710c:	e024      	b.n	407158 <_dtoa_r+0x438>
  40710e:	2301      	movs	r3, #1
  407110:	930e      	str	r3, [sp, #56]	; 0x38
  407112:	e6af      	b.n	406e74 <_dtoa_r+0x154>
  407114:	9a08      	ldr	r2, [sp, #32]
  407116:	9b02      	ldr	r3, [sp, #8]
  407118:	1ad2      	subs	r2, r2, r3
  40711a:	425b      	negs	r3, r3
  40711c:	930c      	str	r3, [sp, #48]	; 0x30
  40711e:	2300      	movs	r3, #0
  407120:	9208      	str	r2, [sp, #32]
  407122:	930d      	str	r3, [sp, #52]	; 0x34
  407124:	e6b8      	b.n	406e98 <_dtoa_r+0x178>
  407126:	f1c7 0301 	rsb	r3, r7, #1
  40712a:	9308      	str	r3, [sp, #32]
  40712c:	2300      	movs	r3, #0
  40712e:	9306      	str	r3, [sp, #24]
  407130:	e6a7      	b.n	406e82 <_dtoa_r+0x162>
  407132:	9d02      	ldr	r5, [sp, #8]
  407134:	4628      	mov	r0, r5
  407136:	f002 fbe1 	bl	4098fc <__aeabi_i2d>
  40713a:	4602      	mov	r2, r0
  40713c:	460b      	mov	r3, r1
  40713e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407142:	f002 fea9 	bl	409e98 <__aeabi_dcmpeq>
  407146:	2800      	cmp	r0, #0
  407148:	f47f ae80 	bne.w	406e4c <_dtoa_r+0x12c>
  40714c:	1e6b      	subs	r3, r5, #1
  40714e:	9302      	str	r3, [sp, #8]
  407150:	e67c      	b.n	406e4c <_dtoa_r+0x12c>
  407152:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407154:	9d08      	ldr	r5, [sp, #32]
  407156:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407158:	2d00      	cmp	r5, #0
  40715a:	dd0c      	ble.n	407176 <_dtoa_r+0x456>
  40715c:	9906      	ldr	r1, [sp, #24]
  40715e:	2900      	cmp	r1, #0
  407160:	460b      	mov	r3, r1
  407162:	dd08      	ble.n	407176 <_dtoa_r+0x456>
  407164:	42a9      	cmp	r1, r5
  407166:	9a08      	ldr	r2, [sp, #32]
  407168:	bfa8      	it	ge
  40716a:	462b      	movge	r3, r5
  40716c:	1ad2      	subs	r2, r2, r3
  40716e:	1aed      	subs	r5, r5, r3
  407170:	1acb      	subs	r3, r1, r3
  407172:	9208      	str	r2, [sp, #32]
  407174:	9306      	str	r3, [sp, #24]
  407176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407178:	b1d3      	cbz	r3, 4071b0 <_dtoa_r+0x490>
  40717a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40717c:	2b00      	cmp	r3, #0
  40717e:	f000 82b7 	beq.w	4076f0 <_dtoa_r+0x9d0>
  407182:	2f00      	cmp	r7, #0
  407184:	dd10      	ble.n	4071a8 <_dtoa_r+0x488>
  407186:	4631      	mov	r1, r6
  407188:	463a      	mov	r2, r7
  40718a:	4620      	mov	r0, r4
  40718c:	f001 fc60 	bl	408a50 <__pow5mult>
  407190:	464a      	mov	r2, r9
  407192:	4601      	mov	r1, r0
  407194:	4606      	mov	r6, r0
  407196:	4620      	mov	r0, r4
  407198:	f001 fbc8 	bl	40892c <__multiply>
  40719c:	4649      	mov	r1, r9
  40719e:	4680      	mov	r8, r0
  4071a0:	4620      	mov	r0, r4
  4071a2:	f001 fb1f 	bl	4087e4 <_Bfree>
  4071a6:	46c1      	mov	r9, r8
  4071a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4071aa:	1bda      	subs	r2, r3, r7
  4071ac:	f040 82a1 	bne.w	4076f2 <_dtoa_r+0x9d2>
  4071b0:	2101      	movs	r1, #1
  4071b2:	4620      	mov	r0, r4
  4071b4:	f001 fbb0 	bl	408918 <__i2b>
  4071b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4071ba:	2b00      	cmp	r3, #0
  4071bc:	4680      	mov	r8, r0
  4071be:	dd1c      	ble.n	4071fa <_dtoa_r+0x4da>
  4071c0:	4601      	mov	r1, r0
  4071c2:	461a      	mov	r2, r3
  4071c4:	4620      	mov	r0, r4
  4071c6:	f001 fc43 	bl	408a50 <__pow5mult>
  4071ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071cc:	2b01      	cmp	r3, #1
  4071ce:	4680      	mov	r8, r0
  4071d0:	f340 8254 	ble.w	40767c <_dtoa_r+0x95c>
  4071d4:	2300      	movs	r3, #0
  4071d6:	930c      	str	r3, [sp, #48]	; 0x30
  4071d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4071dc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4071e0:	6918      	ldr	r0, [r3, #16]
  4071e2:	f001 fb49 	bl	408878 <__hi0bits>
  4071e6:	f1c0 0020 	rsb	r0, r0, #32
  4071ea:	e010      	b.n	40720e <_dtoa_r+0x4ee>
  4071ec:	f1c3 0520 	rsb	r5, r3, #32
  4071f0:	fa0a f005 	lsl.w	r0, sl, r5
  4071f4:	e674      	b.n	406ee0 <_dtoa_r+0x1c0>
  4071f6:	900e      	str	r0, [sp, #56]	; 0x38
  4071f8:	e63c      	b.n	406e74 <_dtoa_r+0x154>
  4071fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071fc:	2b01      	cmp	r3, #1
  4071fe:	f340 8287 	ble.w	407710 <_dtoa_r+0x9f0>
  407202:	2300      	movs	r3, #0
  407204:	930c      	str	r3, [sp, #48]	; 0x30
  407206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407208:	2001      	movs	r0, #1
  40720a:	2b00      	cmp	r3, #0
  40720c:	d1e4      	bne.n	4071d8 <_dtoa_r+0x4b8>
  40720e:	9a06      	ldr	r2, [sp, #24]
  407210:	4410      	add	r0, r2
  407212:	f010 001f 	ands.w	r0, r0, #31
  407216:	f000 80a1 	beq.w	40735c <_dtoa_r+0x63c>
  40721a:	f1c0 0320 	rsb	r3, r0, #32
  40721e:	2b04      	cmp	r3, #4
  407220:	f340 849e 	ble.w	407b60 <_dtoa_r+0xe40>
  407224:	9b08      	ldr	r3, [sp, #32]
  407226:	f1c0 001c 	rsb	r0, r0, #28
  40722a:	4403      	add	r3, r0
  40722c:	9308      	str	r3, [sp, #32]
  40722e:	4613      	mov	r3, r2
  407230:	4403      	add	r3, r0
  407232:	4405      	add	r5, r0
  407234:	9306      	str	r3, [sp, #24]
  407236:	9b08      	ldr	r3, [sp, #32]
  407238:	2b00      	cmp	r3, #0
  40723a:	dd05      	ble.n	407248 <_dtoa_r+0x528>
  40723c:	4649      	mov	r1, r9
  40723e:	461a      	mov	r2, r3
  407240:	4620      	mov	r0, r4
  407242:	f001 fc55 	bl	408af0 <__lshift>
  407246:	4681      	mov	r9, r0
  407248:	9b06      	ldr	r3, [sp, #24]
  40724a:	2b00      	cmp	r3, #0
  40724c:	dd05      	ble.n	40725a <_dtoa_r+0x53a>
  40724e:	4641      	mov	r1, r8
  407250:	461a      	mov	r2, r3
  407252:	4620      	mov	r0, r4
  407254:	f001 fc4c 	bl	408af0 <__lshift>
  407258:	4680      	mov	r8, r0
  40725a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40725c:	2b00      	cmp	r3, #0
  40725e:	f040 8086 	bne.w	40736e <_dtoa_r+0x64e>
  407262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407264:	2b00      	cmp	r3, #0
  407266:	f340 8266 	ble.w	407736 <_dtoa_r+0xa16>
  40726a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40726c:	2b00      	cmp	r3, #0
  40726e:	f000 8098 	beq.w	4073a2 <_dtoa_r+0x682>
  407272:	2d00      	cmp	r5, #0
  407274:	dd05      	ble.n	407282 <_dtoa_r+0x562>
  407276:	4631      	mov	r1, r6
  407278:	462a      	mov	r2, r5
  40727a:	4620      	mov	r0, r4
  40727c:	f001 fc38 	bl	408af0 <__lshift>
  407280:	4606      	mov	r6, r0
  407282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407284:	2b00      	cmp	r3, #0
  407286:	f040 8337 	bne.w	4078f8 <_dtoa_r+0xbd8>
  40728a:	9606      	str	r6, [sp, #24]
  40728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40728e:	9a04      	ldr	r2, [sp, #16]
  407290:	f8dd b018 	ldr.w	fp, [sp, #24]
  407294:	3b01      	subs	r3, #1
  407296:	18d3      	adds	r3, r2, r3
  407298:	930b      	str	r3, [sp, #44]	; 0x2c
  40729a:	f00a 0301 	and.w	r3, sl, #1
  40729e:	930c      	str	r3, [sp, #48]	; 0x30
  4072a0:	4617      	mov	r7, r2
  4072a2:	46c2      	mov	sl, r8
  4072a4:	4651      	mov	r1, sl
  4072a6:	4648      	mov	r0, r9
  4072a8:	f7ff fca4 	bl	406bf4 <quorem>
  4072ac:	4631      	mov	r1, r6
  4072ae:	4605      	mov	r5, r0
  4072b0:	4648      	mov	r0, r9
  4072b2:	f001 fc6f 	bl	408b94 <__mcmp>
  4072b6:	465a      	mov	r2, fp
  4072b8:	900a      	str	r0, [sp, #40]	; 0x28
  4072ba:	4651      	mov	r1, sl
  4072bc:	4620      	mov	r0, r4
  4072be:	f001 fc85 	bl	408bcc <__mdiff>
  4072c2:	68c2      	ldr	r2, [r0, #12]
  4072c4:	4680      	mov	r8, r0
  4072c6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4072ca:	2a00      	cmp	r2, #0
  4072cc:	f040 822b 	bne.w	407726 <_dtoa_r+0xa06>
  4072d0:	4601      	mov	r1, r0
  4072d2:	4648      	mov	r0, r9
  4072d4:	9308      	str	r3, [sp, #32]
  4072d6:	f001 fc5d 	bl	408b94 <__mcmp>
  4072da:	4641      	mov	r1, r8
  4072dc:	9006      	str	r0, [sp, #24]
  4072de:	4620      	mov	r0, r4
  4072e0:	f001 fa80 	bl	4087e4 <_Bfree>
  4072e4:	9a06      	ldr	r2, [sp, #24]
  4072e6:	9b08      	ldr	r3, [sp, #32]
  4072e8:	b932      	cbnz	r2, 4072f8 <_dtoa_r+0x5d8>
  4072ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4072ec:	b921      	cbnz	r1, 4072f8 <_dtoa_r+0x5d8>
  4072ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4072f0:	2a00      	cmp	r2, #0
  4072f2:	f000 83ef 	beq.w	407ad4 <_dtoa_r+0xdb4>
  4072f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4072f8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4072fa:	2900      	cmp	r1, #0
  4072fc:	f2c0 829f 	blt.w	40783e <_dtoa_r+0xb1e>
  407300:	d105      	bne.n	40730e <_dtoa_r+0x5ee>
  407302:	9924      	ldr	r1, [sp, #144]	; 0x90
  407304:	b919      	cbnz	r1, 40730e <_dtoa_r+0x5ee>
  407306:	990c      	ldr	r1, [sp, #48]	; 0x30
  407308:	2900      	cmp	r1, #0
  40730a:	f000 8298 	beq.w	40783e <_dtoa_r+0xb1e>
  40730e:	2a00      	cmp	r2, #0
  407310:	f300 8306 	bgt.w	407920 <_dtoa_r+0xc00>
  407314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407316:	703b      	strb	r3, [r7, #0]
  407318:	f107 0801 	add.w	r8, r7, #1
  40731c:	4297      	cmp	r7, r2
  40731e:	4645      	mov	r5, r8
  407320:	f000 830c 	beq.w	40793c <_dtoa_r+0xc1c>
  407324:	4649      	mov	r1, r9
  407326:	2300      	movs	r3, #0
  407328:	220a      	movs	r2, #10
  40732a:	4620      	mov	r0, r4
  40732c:	f001 fa64 	bl	4087f8 <__multadd>
  407330:	455e      	cmp	r6, fp
  407332:	4681      	mov	r9, r0
  407334:	4631      	mov	r1, r6
  407336:	f04f 0300 	mov.w	r3, #0
  40733a:	f04f 020a 	mov.w	r2, #10
  40733e:	4620      	mov	r0, r4
  407340:	f000 81eb 	beq.w	40771a <_dtoa_r+0x9fa>
  407344:	f001 fa58 	bl	4087f8 <__multadd>
  407348:	4659      	mov	r1, fp
  40734a:	4606      	mov	r6, r0
  40734c:	2300      	movs	r3, #0
  40734e:	220a      	movs	r2, #10
  407350:	4620      	mov	r0, r4
  407352:	f001 fa51 	bl	4087f8 <__multadd>
  407356:	4647      	mov	r7, r8
  407358:	4683      	mov	fp, r0
  40735a:	e7a3      	b.n	4072a4 <_dtoa_r+0x584>
  40735c:	201c      	movs	r0, #28
  40735e:	9b08      	ldr	r3, [sp, #32]
  407360:	4403      	add	r3, r0
  407362:	9308      	str	r3, [sp, #32]
  407364:	9b06      	ldr	r3, [sp, #24]
  407366:	4403      	add	r3, r0
  407368:	4405      	add	r5, r0
  40736a:	9306      	str	r3, [sp, #24]
  40736c:	e763      	b.n	407236 <_dtoa_r+0x516>
  40736e:	4641      	mov	r1, r8
  407370:	4648      	mov	r0, r9
  407372:	f001 fc0f 	bl	408b94 <__mcmp>
  407376:	2800      	cmp	r0, #0
  407378:	f6bf af73 	bge.w	407262 <_dtoa_r+0x542>
  40737c:	9f02      	ldr	r7, [sp, #8]
  40737e:	4649      	mov	r1, r9
  407380:	2300      	movs	r3, #0
  407382:	220a      	movs	r2, #10
  407384:	4620      	mov	r0, r4
  407386:	3f01      	subs	r7, #1
  407388:	9702      	str	r7, [sp, #8]
  40738a:	f001 fa35 	bl	4087f8 <__multadd>
  40738e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407390:	4681      	mov	r9, r0
  407392:	2b00      	cmp	r3, #0
  407394:	f040 83b6 	bne.w	407b04 <_dtoa_r+0xde4>
  407398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40739a:	2b00      	cmp	r3, #0
  40739c:	f340 83bf 	ble.w	407b1e <_dtoa_r+0xdfe>
  4073a0:	930a      	str	r3, [sp, #40]	; 0x28
  4073a2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4073a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4073a8:	465d      	mov	r5, fp
  4073aa:	e002      	b.n	4073b2 <_dtoa_r+0x692>
  4073ac:	f001 fa24 	bl	4087f8 <__multadd>
  4073b0:	4681      	mov	r9, r0
  4073b2:	4641      	mov	r1, r8
  4073b4:	4648      	mov	r0, r9
  4073b6:	f7ff fc1d 	bl	406bf4 <quorem>
  4073ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4073be:	f805 ab01 	strb.w	sl, [r5], #1
  4073c2:	eba5 030b 	sub.w	r3, r5, fp
  4073c6:	42bb      	cmp	r3, r7
  4073c8:	f04f 020a 	mov.w	r2, #10
  4073cc:	f04f 0300 	mov.w	r3, #0
  4073d0:	4649      	mov	r1, r9
  4073d2:	4620      	mov	r0, r4
  4073d4:	dbea      	blt.n	4073ac <_dtoa_r+0x68c>
  4073d6:	9b04      	ldr	r3, [sp, #16]
  4073d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4073da:	2a01      	cmp	r2, #1
  4073dc:	bfac      	ite	ge
  4073de:	189b      	addge	r3, r3, r2
  4073e0:	3301      	addlt	r3, #1
  4073e2:	461d      	mov	r5, r3
  4073e4:	f04f 0b00 	mov.w	fp, #0
  4073e8:	4649      	mov	r1, r9
  4073ea:	2201      	movs	r2, #1
  4073ec:	4620      	mov	r0, r4
  4073ee:	f001 fb7f 	bl	408af0 <__lshift>
  4073f2:	4641      	mov	r1, r8
  4073f4:	4681      	mov	r9, r0
  4073f6:	f001 fbcd 	bl	408b94 <__mcmp>
  4073fa:	2800      	cmp	r0, #0
  4073fc:	f340 823d 	ble.w	40787a <_dtoa_r+0xb5a>
  407400:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407404:	9904      	ldr	r1, [sp, #16]
  407406:	1e6b      	subs	r3, r5, #1
  407408:	e004      	b.n	407414 <_dtoa_r+0x6f4>
  40740a:	428b      	cmp	r3, r1
  40740c:	f000 81ae 	beq.w	40776c <_dtoa_r+0xa4c>
  407410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407414:	2a39      	cmp	r2, #57	; 0x39
  407416:	f103 0501 	add.w	r5, r3, #1
  40741a:	d0f6      	beq.n	40740a <_dtoa_r+0x6ea>
  40741c:	3201      	adds	r2, #1
  40741e:	701a      	strb	r2, [r3, #0]
  407420:	4641      	mov	r1, r8
  407422:	4620      	mov	r0, r4
  407424:	f001 f9de 	bl	4087e4 <_Bfree>
  407428:	2e00      	cmp	r6, #0
  40742a:	f43f ae3d 	beq.w	4070a8 <_dtoa_r+0x388>
  40742e:	f1bb 0f00 	cmp.w	fp, #0
  407432:	d005      	beq.n	407440 <_dtoa_r+0x720>
  407434:	45b3      	cmp	fp, r6
  407436:	d003      	beq.n	407440 <_dtoa_r+0x720>
  407438:	4659      	mov	r1, fp
  40743a:	4620      	mov	r0, r4
  40743c:	f001 f9d2 	bl	4087e4 <_Bfree>
  407440:	4631      	mov	r1, r6
  407442:	4620      	mov	r0, r4
  407444:	f001 f9ce 	bl	4087e4 <_Bfree>
  407448:	e62e      	b.n	4070a8 <_dtoa_r+0x388>
  40744a:	2300      	movs	r3, #0
  40744c:	930b      	str	r3, [sp, #44]	; 0x2c
  40744e:	9b02      	ldr	r3, [sp, #8]
  407450:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407452:	4413      	add	r3, r2
  407454:	930f      	str	r3, [sp, #60]	; 0x3c
  407456:	3301      	adds	r3, #1
  407458:	2b01      	cmp	r3, #1
  40745a:	461f      	mov	r7, r3
  40745c:	461e      	mov	r6, r3
  40745e:	930a      	str	r3, [sp, #40]	; 0x28
  407460:	bfb8      	it	lt
  407462:	2701      	movlt	r7, #1
  407464:	2100      	movs	r1, #0
  407466:	2f17      	cmp	r7, #23
  407468:	6461      	str	r1, [r4, #68]	; 0x44
  40746a:	d90a      	bls.n	407482 <_dtoa_r+0x762>
  40746c:	2201      	movs	r2, #1
  40746e:	2304      	movs	r3, #4
  407470:	005b      	lsls	r3, r3, #1
  407472:	f103 0014 	add.w	r0, r3, #20
  407476:	4287      	cmp	r7, r0
  407478:	4611      	mov	r1, r2
  40747a:	f102 0201 	add.w	r2, r2, #1
  40747e:	d2f7      	bcs.n	407470 <_dtoa_r+0x750>
  407480:	6461      	str	r1, [r4, #68]	; 0x44
  407482:	4620      	mov	r0, r4
  407484:	f001 f988 	bl	408798 <_Balloc>
  407488:	2e0e      	cmp	r6, #14
  40748a:	9004      	str	r0, [sp, #16]
  40748c:	6420      	str	r0, [r4, #64]	; 0x40
  40748e:	f63f ad41 	bhi.w	406f14 <_dtoa_r+0x1f4>
  407492:	2d00      	cmp	r5, #0
  407494:	f43f ad3e 	beq.w	406f14 <_dtoa_r+0x1f4>
  407498:	9902      	ldr	r1, [sp, #8]
  40749a:	2900      	cmp	r1, #0
  40749c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4074a0:	f340 8202 	ble.w	4078a8 <_dtoa_r+0xb88>
  4074a4:	4bb8      	ldr	r3, [pc, #736]	; (407788 <_dtoa_r+0xa68>)
  4074a6:	f001 020f 	and.w	r2, r1, #15
  4074aa:	110d      	asrs	r5, r1, #4
  4074ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4074b0:	06e9      	lsls	r1, r5, #27
  4074b2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4074b6:	f140 81ae 	bpl.w	407816 <_dtoa_r+0xaf6>
  4074ba:	4bb4      	ldr	r3, [pc, #720]	; (40778c <_dtoa_r+0xa6c>)
  4074bc:	4650      	mov	r0, sl
  4074be:	4659      	mov	r1, fp
  4074c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4074c4:	f002 fbaa 	bl	409c1c <__aeabi_ddiv>
  4074c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4074cc:	f005 050f 	and.w	r5, r5, #15
  4074d0:	f04f 0a03 	mov.w	sl, #3
  4074d4:	b18d      	cbz	r5, 4074fa <_dtoa_r+0x7da>
  4074d6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40778c <_dtoa_r+0xa6c>
  4074da:	07ea      	lsls	r2, r5, #31
  4074dc:	d509      	bpl.n	4074f2 <_dtoa_r+0x7d2>
  4074de:	4630      	mov	r0, r6
  4074e0:	4639      	mov	r1, r7
  4074e2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4074e6:	f002 fa6f 	bl	4099c8 <__aeabi_dmul>
  4074ea:	f10a 0a01 	add.w	sl, sl, #1
  4074ee:	4606      	mov	r6, r0
  4074f0:	460f      	mov	r7, r1
  4074f2:	106d      	asrs	r5, r5, #1
  4074f4:	f108 0808 	add.w	r8, r8, #8
  4074f8:	d1ef      	bne.n	4074da <_dtoa_r+0x7ba>
  4074fa:	463b      	mov	r3, r7
  4074fc:	4632      	mov	r2, r6
  4074fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407502:	f002 fb8b 	bl	409c1c <__aeabi_ddiv>
  407506:	4607      	mov	r7, r0
  407508:	4688      	mov	r8, r1
  40750a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40750c:	b143      	cbz	r3, 407520 <_dtoa_r+0x800>
  40750e:	2200      	movs	r2, #0
  407510:	4b9f      	ldr	r3, [pc, #636]	; (407790 <_dtoa_r+0xa70>)
  407512:	4638      	mov	r0, r7
  407514:	4641      	mov	r1, r8
  407516:	f002 fcc9 	bl	409eac <__aeabi_dcmplt>
  40751a:	2800      	cmp	r0, #0
  40751c:	f040 8286 	bne.w	407a2c <_dtoa_r+0xd0c>
  407520:	4650      	mov	r0, sl
  407522:	f002 f9eb 	bl	4098fc <__aeabi_i2d>
  407526:	463a      	mov	r2, r7
  407528:	4643      	mov	r3, r8
  40752a:	f002 fa4d 	bl	4099c8 <__aeabi_dmul>
  40752e:	4b99      	ldr	r3, [pc, #612]	; (407794 <_dtoa_r+0xa74>)
  407530:	2200      	movs	r2, #0
  407532:	f002 f897 	bl	409664 <__adddf3>
  407536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407538:	4605      	mov	r5, r0
  40753a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40753e:	2b00      	cmp	r3, #0
  407540:	f000 813e 	beq.w	4077c0 <_dtoa_r+0xaa0>
  407544:	9b02      	ldr	r3, [sp, #8]
  407546:	9315      	str	r3, [sp, #84]	; 0x54
  407548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40754a:	9312      	str	r3, [sp, #72]	; 0x48
  40754c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40754e:	2b00      	cmp	r3, #0
  407550:	f000 81fa 	beq.w	407948 <_dtoa_r+0xc28>
  407554:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407556:	4b8c      	ldr	r3, [pc, #560]	; (407788 <_dtoa_r+0xa68>)
  407558:	498f      	ldr	r1, [pc, #572]	; (407798 <_dtoa_r+0xa78>)
  40755a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40755e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407562:	2000      	movs	r0, #0
  407564:	f002 fb5a 	bl	409c1c <__aeabi_ddiv>
  407568:	462a      	mov	r2, r5
  40756a:	4633      	mov	r3, r6
  40756c:	f002 f878 	bl	409660 <__aeabi_dsub>
  407570:	4682      	mov	sl, r0
  407572:	468b      	mov	fp, r1
  407574:	4638      	mov	r0, r7
  407576:	4641      	mov	r1, r8
  407578:	f002 fcd6 	bl	409f28 <__aeabi_d2iz>
  40757c:	4605      	mov	r5, r0
  40757e:	f002 f9bd 	bl	4098fc <__aeabi_i2d>
  407582:	4602      	mov	r2, r0
  407584:	460b      	mov	r3, r1
  407586:	4638      	mov	r0, r7
  407588:	4641      	mov	r1, r8
  40758a:	f002 f869 	bl	409660 <__aeabi_dsub>
  40758e:	3530      	adds	r5, #48	; 0x30
  407590:	fa5f f885 	uxtb.w	r8, r5
  407594:	9d04      	ldr	r5, [sp, #16]
  407596:	4606      	mov	r6, r0
  407598:	460f      	mov	r7, r1
  40759a:	f885 8000 	strb.w	r8, [r5]
  40759e:	4602      	mov	r2, r0
  4075a0:	460b      	mov	r3, r1
  4075a2:	4650      	mov	r0, sl
  4075a4:	4659      	mov	r1, fp
  4075a6:	3501      	adds	r5, #1
  4075a8:	f002 fc9e 	bl	409ee8 <__aeabi_dcmpgt>
  4075ac:	2800      	cmp	r0, #0
  4075ae:	d154      	bne.n	40765a <_dtoa_r+0x93a>
  4075b0:	4632      	mov	r2, r6
  4075b2:	463b      	mov	r3, r7
  4075b4:	2000      	movs	r0, #0
  4075b6:	4976      	ldr	r1, [pc, #472]	; (407790 <_dtoa_r+0xa70>)
  4075b8:	f002 f852 	bl	409660 <__aeabi_dsub>
  4075bc:	4602      	mov	r2, r0
  4075be:	460b      	mov	r3, r1
  4075c0:	4650      	mov	r0, sl
  4075c2:	4659      	mov	r1, fp
  4075c4:	f002 fc90 	bl	409ee8 <__aeabi_dcmpgt>
  4075c8:	2800      	cmp	r0, #0
  4075ca:	f040 8270 	bne.w	407aae <_dtoa_r+0xd8e>
  4075ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4075d0:	2a01      	cmp	r2, #1
  4075d2:	f000 8111 	beq.w	4077f8 <_dtoa_r+0xad8>
  4075d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4075d8:	9a04      	ldr	r2, [sp, #16]
  4075da:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4075de:	4413      	add	r3, r2
  4075e0:	4699      	mov	r9, r3
  4075e2:	e00d      	b.n	407600 <_dtoa_r+0x8e0>
  4075e4:	2000      	movs	r0, #0
  4075e6:	496a      	ldr	r1, [pc, #424]	; (407790 <_dtoa_r+0xa70>)
  4075e8:	f002 f83a 	bl	409660 <__aeabi_dsub>
  4075ec:	4652      	mov	r2, sl
  4075ee:	465b      	mov	r3, fp
  4075f0:	f002 fc5c 	bl	409eac <__aeabi_dcmplt>
  4075f4:	2800      	cmp	r0, #0
  4075f6:	f040 8258 	bne.w	407aaa <_dtoa_r+0xd8a>
  4075fa:	454d      	cmp	r5, r9
  4075fc:	f000 80fa 	beq.w	4077f4 <_dtoa_r+0xad4>
  407600:	4650      	mov	r0, sl
  407602:	4659      	mov	r1, fp
  407604:	2200      	movs	r2, #0
  407606:	4b65      	ldr	r3, [pc, #404]	; (40779c <_dtoa_r+0xa7c>)
  407608:	f002 f9de 	bl	4099c8 <__aeabi_dmul>
  40760c:	2200      	movs	r2, #0
  40760e:	4b63      	ldr	r3, [pc, #396]	; (40779c <_dtoa_r+0xa7c>)
  407610:	4682      	mov	sl, r0
  407612:	468b      	mov	fp, r1
  407614:	4630      	mov	r0, r6
  407616:	4639      	mov	r1, r7
  407618:	f002 f9d6 	bl	4099c8 <__aeabi_dmul>
  40761c:	460f      	mov	r7, r1
  40761e:	4606      	mov	r6, r0
  407620:	f002 fc82 	bl	409f28 <__aeabi_d2iz>
  407624:	4680      	mov	r8, r0
  407626:	f002 f969 	bl	4098fc <__aeabi_i2d>
  40762a:	4602      	mov	r2, r0
  40762c:	460b      	mov	r3, r1
  40762e:	4630      	mov	r0, r6
  407630:	4639      	mov	r1, r7
  407632:	f002 f815 	bl	409660 <__aeabi_dsub>
  407636:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40763a:	fa5f f888 	uxtb.w	r8, r8
  40763e:	4652      	mov	r2, sl
  407640:	465b      	mov	r3, fp
  407642:	f805 8b01 	strb.w	r8, [r5], #1
  407646:	4606      	mov	r6, r0
  407648:	460f      	mov	r7, r1
  40764a:	f002 fc2f 	bl	409eac <__aeabi_dcmplt>
  40764e:	4632      	mov	r2, r6
  407650:	463b      	mov	r3, r7
  407652:	2800      	cmp	r0, #0
  407654:	d0c6      	beq.n	4075e4 <_dtoa_r+0x8c4>
  407656:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40765a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40765c:	9302      	str	r3, [sp, #8]
  40765e:	e523      	b.n	4070a8 <_dtoa_r+0x388>
  407660:	2300      	movs	r3, #0
  407662:	930b      	str	r3, [sp, #44]	; 0x2c
  407664:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407666:	2b00      	cmp	r3, #0
  407668:	f340 80dc 	ble.w	407824 <_dtoa_r+0xb04>
  40766c:	461f      	mov	r7, r3
  40766e:	461e      	mov	r6, r3
  407670:	930f      	str	r3, [sp, #60]	; 0x3c
  407672:	930a      	str	r3, [sp, #40]	; 0x28
  407674:	e6f6      	b.n	407464 <_dtoa_r+0x744>
  407676:	2301      	movs	r3, #1
  407678:	930b      	str	r3, [sp, #44]	; 0x2c
  40767a:	e7f3      	b.n	407664 <_dtoa_r+0x944>
  40767c:	f1ba 0f00 	cmp.w	sl, #0
  407680:	f47f ada8 	bne.w	4071d4 <_dtoa_r+0x4b4>
  407684:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407688:	2b00      	cmp	r3, #0
  40768a:	f47f adba 	bne.w	407202 <_dtoa_r+0x4e2>
  40768e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407692:	0d3f      	lsrs	r7, r7, #20
  407694:	053f      	lsls	r7, r7, #20
  407696:	2f00      	cmp	r7, #0
  407698:	f000 820d 	beq.w	407ab6 <_dtoa_r+0xd96>
  40769c:	9b08      	ldr	r3, [sp, #32]
  40769e:	3301      	adds	r3, #1
  4076a0:	9308      	str	r3, [sp, #32]
  4076a2:	9b06      	ldr	r3, [sp, #24]
  4076a4:	3301      	adds	r3, #1
  4076a6:	9306      	str	r3, [sp, #24]
  4076a8:	2301      	movs	r3, #1
  4076aa:	930c      	str	r3, [sp, #48]	; 0x30
  4076ac:	e5ab      	b.n	407206 <_dtoa_r+0x4e6>
  4076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4076b0:	2b00      	cmp	r3, #0
  4076b2:	f73f ac42 	bgt.w	406f3a <_dtoa_r+0x21a>
  4076b6:	f040 8221 	bne.w	407afc <_dtoa_r+0xddc>
  4076ba:	2200      	movs	r2, #0
  4076bc:	4b38      	ldr	r3, [pc, #224]	; (4077a0 <_dtoa_r+0xa80>)
  4076be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4076c2:	f002 f981 	bl	4099c8 <__aeabi_dmul>
  4076c6:	4652      	mov	r2, sl
  4076c8:	465b      	mov	r3, fp
  4076ca:	f002 fc03 	bl	409ed4 <__aeabi_dcmpge>
  4076ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4076d2:	4646      	mov	r6, r8
  4076d4:	2800      	cmp	r0, #0
  4076d6:	d041      	beq.n	40775c <_dtoa_r+0xa3c>
  4076d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4076da:	9d04      	ldr	r5, [sp, #16]
  4076dc:	43db      	mvns	r3, r3
  4076de:	9302      	str	r3, [sp, #8]
  4076e0:	4641      	mov	r1, r8
  4076e2:	4620      	mov	r0, r4
  4076e4:	f001 f87e 	bl	4087e4 <_Bfree>
  4076e8:	2e00      	cmp	r6, #0
  4076ea:	f43f acdd 	beq.w	4070a8 <_dtoa_r+0x388>
  4076ee:	e6a7      	b.n	407440 <_dtoa_r+0x720>
  4076f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4076f2:	4649      	mov	r1, r9
  4076f4:	4620      	mov	r0, r4
  4076f6:	f001 f9ab 	bl	408a50 <__pow5mult>
  4076fa:	4681      	mov	r9, r0
  4076fc:	e558      	b.n	4071b0 <_dtoa_r+0x490>
  4076fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407700:	2a00      	cmp	r2, #0
  407702:	f000 8187 	beq.w	407a14 <_dtoa_r+0xcf4>
  407706:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40770a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40770c:	9d08      	ldr	r5, [sp, #32]
  40770e:	e4f2      	b.n	4070f6 <_dtoa_r+0x3d6>
  407710:	f1ba 0f00 	cmp.w	sl, #0
  407714:	f47f ad75 	bne.w	407202 <_dtoa_r+0x4e2>
  407718:	e7b4      	b.n	407684 <_dtoa_r+0x964>
  40771a:	f001 f86d 	bl	4087f8 <__multadd>
  40771e:	4647      	mov	r7, r8
  407720:	4606      	mov	r6, r0
  407722:	4683      	mov	fp, r0
  407724:	e5be      	b.n	4072a4 <_dtoa_r+0x584>
  407726:	4601      	mov	r1, r0
  407728:	4620      	mov	r0, r4
  40772a:	9306      	str	r3, [sp, #24]
  40772c:	f001 f85a 	bl	4087e4 <_Bfree>
  407730:	2201      	movs	r2, #1
  407732:	9b06      	ldr	r3, [sp, #24]
  407734:	e5e0      	b.n	4072f8 <_dtoa_r+0x5d8>
  407736:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407738:	2b02      	cmp	r3, #2
  40773a:	f77f ad96 	ble.w	40726a <_dtoa_r+0x54a>
  40773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407740:	2b00      	cmp	r3, #0
  407742:	d1c9      	bne.n	4076d8 <_dtoa_r+0x9b8>
  407744:	4641      	mov	r1, r8
  407746:	2205      	movs	r2, #5
  407748:	4620      	mov	r0, r4
  40774a:	f001 f855 	bl	4087f8 <__multadd>
  40774e:	4601      	mov	r1, r0
  407750:	4680      	mov	r8, r0
  407752:	4648      	mov	r0, r9
  407754:	f001 fa1e 	bl	408b94 <__mcmp>
  407758:	2800      	cmp	r0, #0
  40775a:	ddbd      	ble.n	4076d8 <_dtoa_r+0x9b8>
  40775c:	9a02      	ldr	r2, [sp, #8]
  40775e:	9904      	ldr	r1, [sp, #16]
  407760:	2331      	movs	r3, #49	; 0x31
  407762:	3201      	adds	r2, #1
  407764:	9202      	str	r2, [sp, #8]
  407766:	700b      	strb	r3, [r1, #0]
  407768:	1c4d      	adds	r5, r1, #1
  40776a:	e7b9      	b.n	4076e0 <_dtoa_r+0x9c0>
  40776c:	9a02      	ldr	r2, [sp, #8]
  40776e:	3201      	adds	r2, #1
  407770:	9202      	str	r2, [sp, #8]
  407772:	9a04      	ldr	r2, [sp, #16]
  407774:	2331      	movs	r3, #49	; 0x31
  407776:	7013      	strb	r3, [r2, #0]
  407778:	e652      	b.n	407420 <_dtoa_r+0x700>
  40777a:	2301      	movs	r3, #1
  40777c:	930b      	str	r3, [sp, #44]	; 0x2c
  40777e:	e666      	b.n	40744e <_dtoa_r+0x72e>
  407780:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407784:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407786:	e48f      	b.n	4070a8 <_dtoa_r+0x388>
  407788:	0040a5e0 	.word	0x0040a5e0
  40778c:	0040a5b8 	.word	0x0040a5b8
  407790:	3ff00000 	.word	0x3ff00000
  407794:	401c0000 	.word	0x401c0000
  407798:	3fe00000 	.word	0x3fe00000
  40779c:	40240000 	.word	0x40240000
  4077a0:	40140000 	.word	0x40140000
  4077a4:	4650      	mov	r0, sl
  4077a6:	f002 f8a9 	bl	4098fc <__aeabi_i2d>
  4077aa:	463a      	mov	r2, r7
  4077ac:	4643      	mov	r3, r8
  4077ae:	f002 f90b 	bl	4099c8 <__aeabi_dmul>
  4077b2:	2200      	movs	r2, #0
  4077b4:	4bc1      	ldr	r3, [pc, #772]	; (407abc <_dtoa_r+0xd9c>)
  4077b6:	f001 ff55 	bl	409664 <__adddf3>
  4077ba:	4605      	mov	r5, r0
  4077bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4077c0:	4641      	mov	r1, r8
  4077c2:	2200      	movs	r2, #0
  4077c4:	4bbe      	ldr	r3, [pc, #760]	; (407ac0 <_dtoa_r+0xda0>)
  4077c6:	4638      	mov	r0, r7
  4077c8:	f001 ff4a 	bl	409660 <__aeabi_dsub>
  4077cc:	462a      	mov	r2, r5
  4077ce:	4633      	mov	r3, r6
  4077d0:	4682      	mov	sl, r0
  4077d2:	468b      	mov	fp, r1
  4077d4:	f002 fb88 	bl	409ee8 <__aeabi_dcmpgt>
  4077d8:	4680      	mov	r8, r0
  4077da:	2800      	cmp	r0, #0
  4077dc:	f040 8110 	bne.w	407a00 <_dtoa_r+0xce0>
  4077e0:	462a      	mov	r2, r5
  4077e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4077e6:	4650      	mov	r0, sl
  4077e8:	4659      	mov	r1, fp
  4077ea:	f002 fb5f 	bl	409eac <__aeabi_dcmplt>
  4077ee:	b118      	cbz	r0, 4077f8 <_dtoa_r+0xad8>
  4077f0:	4646      	mov	r6, r8
  4077f2:	e771      	b.n	4076d8 <_dtoa_r+0x9b8>
  4077f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4077f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4077fc:	f7ff bb8a 	b.w	406f14 <_dtoa_r+0x1f4>
  407800:	9804      	ldr	r0, [sp, #16]
  407802:	f7ff babb 	b.w	406d7c <_dtoa_r+0x5c>
  407806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40780a:	970c      	str	r7, [sp, #48]	; 0x30
  40780c:	1afb      	subs	r3, r7, r3
  40780e:	441a      	add	r2, r3
  407810:	920d      	str	r2, [sp, #52]	; 0x34
  407812:	2700      	movs	r7, #0
  407814:	e469      	b.n	4070ea <_dtoa_r+0x3ca>
  407816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40781a:	f04f 0a02 	mov.w	sl, #2
  40781e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407822:	e657      	b.n	4074d4 <_dtoa_r+0x7b4>
  407824:	2100      	movs	r1, #0
  407826:	2301      	movs	r3, #1
  407828:	6461      	str	r1, [r4, #68]	; 0x44
  40782a:	4620      	mov	r0, r4
  40782c:	9325      	str	r3, [sp, #148]	; 0x94
  40782e:	f000 ffb3 	bl	408798 <_Balloc>
  407832:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407834:	9004      	str	r0, [sp, #16]
  407836:	6420      	str	r0, [r4, #64]	; 0x40
  407838:	930a      	str	r3, [sp, #40]	; 0x28
  40783a:	930f      	str	r3, [sp, #60]	; 0x3c
  40783c:	e629      	b.n	407492 <_dtoa_r+0x772>
  40783e:	2a00      	cmp	r2, #0
  407840:	46d0      	mov	r8, sl
  407842:	f8cd b018 	str.w	fp, [sp, #24]
  407846:	469a      	mov	sl, r3
  407848:	dd11      	ble.n	40786e <_dtoa_r+0xb4e>
  40784a:	4649      	mov	r1, r9
  40784c:	2201      	movs	r2, #1
  40784e:	4620      	mov	r0, r4
  407850:	f001 f94e 	bl	408af0 <__lshift>
  407854:	4641      	mov	r1, r8
  407856:	4681      	mov	r9, r0
  407858:	f001 f99c 	bl	408b94 <__mcmp>
  40785c:	2800      	cmp	r0, #0
  40785e:	f340 8146 	ble.w	407aee <_dtoa_r+0xdce>
  407862:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407866:	f000 8106 	beq.w	407a76 <_dtoa_r+0xd56>
  40786a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40786e:	46b3      	mov	fp, r6
  407870:	f887 a000 	strb.w	sl, [r7]
  407874:	1c7d      	adds	r5, r7, #1
  407876:	9e06      	ldr	r6, [sp, #24]
  407878:	e5d2      	b.n	407420 <_dtoa_r+0x700>
  40787a:	d104      	bne.n	407886 <_dtoa_r+0xb66>
  40787c:	f01a 0f01 	tst.w	sl, #1
  407880:	d001      	beq.n	407886 <_dtoa_r+0xb66>
  407882:	e5bd      	b.n	407400 <_dtoa_r+0x6e0>
  407884:	4615      	mov	r5, r2
  407886:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40788a:	2b30      	cmp	r3, #48	; 0x30
  40788c:	f105 32ff 	add.w	r2, r5, #4294967295
  407890:	d0f8      	beq.n	407884 <_dtoa_r+0xb64>
  407892:	e5c5      	b.n	407420 <_dtoa_r+0x700>
  407894:	9904      	ldr	r1, [sp, #16]
  407896:	2230      	movs	r2, #48	; 0x30
  407898:	700a      	strb	r2, [r1, #0]
  40789a:	9a02      	ldr	r2, [sp, #8]
  40789c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4078a0:	3201      	adds	r2, #1
  4078a2:	9202      	str	r2, [sp, #8]
  4078a4:	f7ff bbfc 	b.w	4070a0 <_dtoa_r+0x380>
  4078a8:	f000 80bb 	beq.w	407a22 <_dtoa_r+0xd02>
  4078ac:	9b02      	ldr	r3, [sp, #8]
  4078ae:	425d      	negs	r5, r3
  4078b0:	4b84      	ldr	r3, [pc, #528]	; (407ac4 <_dtoa_r+0xda4>)
  4078b2:	f005 020f 	and.w	r2, r5, #15
  4078b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4078be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4078c2:	f002 f881 	bl	4099c8 <__aeabi_dmul>
  4078c6:	112d      	asrs	r5, r5, #4
  4078c8:	4607      	mov	r7, r0
  4078ca:	4688      	mov	r8, r1
  4078cc:	f000 812c 	beq.w	407b28 <_dtoa_r+0xe08>
  4078d0:	4e7d      	ldr	r6, [pc, #500]	; (407ac8 <_dtoa_r+0xda8>)
  4078d2:	f04f 0a02 	mov.w	sl, #2
  4078d6:	07eb      	lsls	r3, r5, #31
  4078d8:	d509      	bpl.n	4078ee <_dtoa_r+0xbce>
  4078da:	4638      	mov	r0, r7
  4078dc:	4641      	mov	r1, r8
  4078de:	e9d6 2300 	ldrd	r2, r3, [r6]
  4078e2:	f002 f871 	bl	4099c8 <__aeabi_dmul>
  4078e6:	f10a 0a01 	add.w	sl, sl, #1
  4078ea:	4607      	mov	r7, r0
  4078ec:	4688      	mov	r8, r1
  4078ee:	106d      	asrs	r5, r5, #1
  4078f0:	f106 0608 	add.w	r6, r6, #8
  4078f4:	d1ef      	bne.n	4078d6 <_dtoa_r+0xbb6>
  4078f6:	e608      	b.n	40750a <_dtoa_r+0x7ea>
  4078f8:	6871      	ldr	r1, [r6, #4]
  4078fa:	4620      	mov	r0, r4
  4078fc:	f000 ff4c 	bl	408798 <_Balloc>
  407900:	6933      	ldr	r3, [r6, #16]
  407902:	3302      	adds	r3, #2
  407904:	009a      	lsls	r2, r3, #2
  407906:	4605      	mov	r5, r0
  407908:	f106 010c 	add.w	r1, r6, #12
  40790c:	300c      	adds	r0, #12
  40790e:	f7fc fbc9 	bl	4040a4 <memcpy>
  407912:	4629      	mov	r1, r5
  407914:	2201      	movs	r2, #1
  407916:	4620      	mov	r0, r4
  407918:	f001 f8ea 	bl	408af0 <__lshift>
  40791c:	9006      	str	r0, [sp, #24]
  40791e:	e4b5      	b.n	40728c <_dtoa_r+0x56c>
  407920:	2b39      	cmp	r3, #57	; 0x39
  407922:	f8cd b018 	str.w	fp, [sp, #24]
  407926:	46d0      	mov	r8, sl
  407928:	f000 80a5 	beq.w	407a76 <_dtoa_r+0xd56>
  40792c:	f103 0a01 	add.w	sl, r3, #1
  407930:	46b3      	mov	fp, r6
  407932:	f887 a000 	strb.w	sl, [r7]
  407936:	1c7d      	adds	r5, r7, #1
  407938:	9e06      	ldr	r6, [sp, #24]
  40793a:	e571      	b.n	407420 <_dtoa_r+0x700>
  40793c:	465a      	mov	r2, fp
  40793e:	46d0      	mov	r8, sl
  407940:	46b3      	mov	fp, r6
  407942:	469a      	mov	sl, r3
  407944:	4616      	mov	r6, r2
  407946:	e54f      	b.n	4073e8 <_dtoa_r+0x6c8>
  407948:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40794a:	495e      	ldr	r1, [pc, #376]	; (407ac4 <_dtoa_r+0xda4>)
  40794c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407950:	462a      	mov	r2, r5
  407952:	4633      	mov	r3, r6
  407954:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407958:	f002 f836 	bl	4099c8 <__aeabi_dmul>
  40795c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407960:	4638      	mov	r0, r7
  407962:	4641      	mov	r1, r8
  407964:	f002 fae0 	bl	409f28 <__aeabi_d2iz>
  407968:	4605      	mov	r5, r0
  40796a:	f001 ffc7 	bl	4098fc <__aeabi_i2d>
  40796e:	460b      	mov	r3, r1
  407970:	4602      	mov	r2, r0
  407972:	4641      	mov	r1, r8
  407974:	4638      	mov	r0, r7
  407976:	f001 fe73 	bl	409660 <__aeabi_dsub>
  40797a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40797c:	460f      	mov	r7, r1
  40797e:	9904      	ldr	r1, [sp, #16]
  407980:	3530      	adds	r5, #48	; 0x30
  407982:	2b01      	cmp	r3, #1
  407984:	700d      	strb	r5, [r1, #0]
  407986:	4606      	mov	r6, r0
  407988:	f101 0501 	add.w	r5, r1, #1
  40798c:	d026      	beq.n	4079dc <_dtoa_r+0xcbc>
  40798e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407990:	9a04      	ldr	r2, [sp, #16]
  407992:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407ad0 <_dtoa_r+0xdb0>
  407996:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40799a:	4413      	add	r3, r2
  40799c:	f04f 0a00 	mov.w	sl, #0
  4079a0:	4699      	mov	r9, r3
  4079a2:	4652      	mov	r2, sl
  4079a4:	465b      	mov	r3, fp
  4079a6:	4630      	mov	r0, r6
  4079a8:	4639      	mov	r1, r7
  4079aa:	f002 f80d 	bl	4099c8 <__aeabi_dmul>
  4079ae:	460f      	mov	r7, r1
  4079b0:	4606      	mov	r6, r0
  4079b2:	f002 fab9 	bl	409f28 <__aeabi_d2iz>
  4079b6:	4680      	mov	r8, r0
  4079b8:	f001 ffa0 	bl	4098fc <__aeabi_i2d>
  4079bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4079c0:	4602      	mov	r2, r0
  4079c2:	460b      	mov	r3, r1
  4079c4:	4630      	mov	r0, r6
  4079c6:	4639      	mov	r1, r7
  4079c8:	f001 fe4a 	bl	409660 <__aeabi_dsub>
  4079cc:	f805 8b01 	strb.w	r8, [r5], #1
  4079d0:	454d      	cmp	r5, r9
  4079d2:	4606      	mov	r6, r0
  4079d4:	460f      	mov	r7, r1
  4079d6:	d1e4      	bne.n	4079a2 <_dtoa_r+0xc82>
  4079d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4079dc:	4b3b      	ldr	r3, [pc, #236]	; (407acc <_dtoa_r+0xdac>)
  4079de:	2200      	movs	r2, #0
  4079e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4079e4:	f001 fe3e 	bl	409664 <__adddf3>
  4079e8:	4632      	mov	r2, r6
  4079ea:	463b      	mov	r3, r7
  4079ec:	f002 fa5e 	bl	409eac <__aeabi_dcmplt>
  4079f0:	2800      	cmp	r0, #0
  4079f2:	d046      	beq.n	407a82 <_dtoa_r+0xd62>
  4079f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4079f6:	9302      	str	r3, [sp, #8]
  4079f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4079fc:	f7ff bb43 	b.w	407086 <_dtoa_r+0x366>
  407a00:	f04f 0800 	mov.w	r8, #0
  407a04:	4646      	mov	r6, r8
  407a06:	e6a9      	b.n	40775c <_dtoa_r+0xa3c>
  407a08:	9b08      	ldr	r3, [sp, #32]
  407a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407a0c:	1a9d      	subs	r5, r3, r2
  407a0e:	2300      	movs	r3, #0
  407a10:	f7ff bb71 	b.w	4070f6 <_dtoa_r+0x3d6>
  407a14:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407a16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407a18:	9d08      	ldr	r5, [sp, #32]
  407a1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407a1e:	f7ff bb6a 	b.w	4070f6 <_dtoa_r+0x3d6>
  407a22:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407a26:	f04f 0a02 	mov.w	sl, #2
  407a2a:	e56e      	b.n	40750a <_dtoa_r+0x7ea>
  407a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a2e:	2b00      	cmp	r3, #0
  407a30:	f43f aeb8 	beq.w	4077a4 <_dtoa_r+0xa84>
  407a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407a36:	2b00      	cmp	r3, #0
  407a38:	f77f aede 	ble.w	4077f8 <_dtoa_r+0xad8>
  407a3c:	2200      	movs	r2, #0
  407a3e:	4b24      	ldr	r3, [pc, #144]	; (407ad0 <_dtoa_r+0xdb0>)
  407a40:	4638      	mov	r0, r7
  407a42:	4641      	mov	r1, r8
  407a44:	f001 ffc0 	bl	4099c8 <__aeabi_dmul>
  407a48:	4607      	mov	r7, r0
  407a4a:	4688      	mov	r8, r1
  407a4c:	f10a 0001 	add.w	r0, sl, #1
  407a50:	f001 ff54 	bl	4098fc <__aeabi_i2d>
  407a54:	463a      	mov	r2, r7
  407a56:	4643      	mov	r3, r8
  407a58:	f001 ffb6 	bl	4099c8 <__aeabi_dmul>
  407a5c:	2200      	movs	r2, #0
  407a5e:	4b17      	ldr	r3, [pc, #92]	; (407abc <_dtoa_r+0xd9c>)
  407a60:	f001 fe00 	bl	409664 <__adddf3>
  407a64:	9a02      	ldr	r2, [sp, #8]
  407a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407a68:	9312      	str	r3, [sp, #72]	; 0x48
  407a6a:	3a01      	subs	r2, #1
  407a6c:	4605      	mov	r5, r0
  407a6e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407a72:	9215      	str	r2, [sp, #84]	; 0x54
  407a74:	e56a      	b.n	40754c <_dtoa_r+0x82c>
  407a76:	2239      	movs	r2, #57	; 0x39
  407a78:	46b3      	mov	fp, r6
  407a7a:	703a      	strb	r2, [r7, #0]
  407a7c:	9e06      	ldr	r6, [sp, #24]
  407a7e:	1c7d      	adds	r5, r7, #1
  407a80:	e4c0      	b.n	407404 <_dtoa_r+0x6e4>
  407a82:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407a86:	2000      	movs	r0, #0
  407a88:	4910      	ldr	r1, [pc, #64]	; (407acc <_dtoa_r+0xdac>)
  407a8a:	f001 fde9 	bl	409660 <__aeabi_dsub>
  407a8e:	4632      	mov	r2, r6
  407a90:	463b      	mov	r3, r7
  407a92:	f002 fa29 	bl	409ee8 <__aeabi_dcmpgt>
  407a96:	b908      	cbnz	r0, 407a9c <_dtoa_r+0xd7c>
  407a98:	e6ae      	b.n	4077f8 <_dtoa_r+0xad8>
  407a9a:	4615      	mov	r5, r2
  407a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407aa0:	2b30      	cmp	r3, #48	; 0x30
  407aa2:	f105 32ff 	add.w	r2, r5, #4294967295
  407aa6:	d0f8      	beq.n	407a9a <_dtoa_r+0xd7a>
  407aa8:	e5d7      	b.n	40765a <_dtoa_r+0x93a>
  407aaa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407ab0:	9302      	str	r3, [sp, #8]
  407ab2:	f7ff bae8 	b.w	407086 <_dtoa_r+0x366>
  407ab6:	970c      	str	r7, [sp, #48]	; 0x30
  407ab8:	f7ff bba5 	b.w	407206 <_dtoa_r+0x4e6>
  407abc:	401c0000 	.word	0x401c0000
  407ac0:	40140000 	.word	0x40140000
  407ac4:	0040a5e0 	.word	0x0040a5e0
  407ac8:	0040a5b8 	.word	0x0040a5b8
  407acc:	3fe00000 	.word	0x3fe00000
  407ad0:	40240000 	.word	0x40240000
  407ad4:	2b39      	cmp	r3, #57	; 0x39
  407ad6:	f8cd b018 	str.w	fp, [sp, #24]
  407ada:	46d0      	mov	r8, sl
  407adc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407ae0:	469a      	mov	sl, r3
  407ae2:	d0c8      	beq.n	407a76 <_dtoa_r+0xd56>
  407ae4:	f1bb 0f00 	cmp.w	fp, #0
  407ae8:	f73f aebf 	bgt.w	40786a <_dtoa_r+0xb4a>
  407aec:	e6bf      	b.n	40786e <_dtoa_r+0xb4e>
  407aee:	f47f aebe 	bne.w	40786e <_dtoa_r+0xb4e>
  407af2:	f01a 0f01 	tst.w	sl, #1
  407af6:	f43f aeba 	beq.w	40786e <_dtoa_r+0xb4e>
  407afa:	e6b2      	b.n	407862 <_dtoa_r+0xb42>
  407afc:	f04f 0800 	mov.w	r8, #0
  407b00:	4646      	mov	r6, r8
  407b02:	e5e9      	b.n	4076d8 <_dtoa_r+0x9b8>
  407b04:	4631      	mov	r1, r6
  407b06:	2300      	movs	r3, #0
  407b08:	220a      	movs	r2, #10
  407b0a:	4620      	mov	r0, r4
  407b0c:	f000 fe74 	bl	4087f8 <__multadd>
  407b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407b12:	2b00      	cmp	r3, #0
  407b14:	4606      	mov	r6, r0
  407b16:	dd0a      	ble.n	407b2e <_dtoa_r+0xe0e>
  407b18:	930a      	str	r3, [sp, #40]	; 0x28
  407b1a:	f7ff bbaa 	b.w	407272 <_dtoa_r+0x552>
  407b1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b20:	2b02      	cmp	r3, #2
  407b22:	dc23      	bgt.n	407b6c <_dtoa_r+0xe4c>
  407b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407b26:	e43b      	b.n	4073a0 <_dtoa_r+0x680>
  407b28:	f04f 0a02 	mov.w	sl, #2
  407b2c:	e4ed      	b.n	40750a <_dtoa_r+0x7ea>
  407b2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b30:	2b02      	cmp	r3, #2
  407b32:	dc1b      	bgt.n	407b6c <_dtoa_r+0xe4c>
  407b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407b36:	e7ef      	b.n	407b18 <_dtoa_r+0xdf8>
  407b38:	2500      	movs	r5, #0
  407b3a:	6465      	str	r5, [r4, #68]	; 0x44
  407b3c:	4629      	mov	r1, r5
  407b3e:	4620      	mov	r0, r4
  407b40:	f000 fe2a 	bl	408798 <_Balloc>
  407b44:	f04f 33ff 	mov.w	r3, #4294967295
  407b48:	930a      	str	r3, [sp, #40]	; 0x28
  407b4a:	930f      	str	r3, [sp, #60]	; 0x3c
  407b4c:	2301      	movs	r3, #1
  407b4e:	9004      	str	r0, [sp, #16]
  407b50:	9525      	str	r5, [sp, #148]	; 0x94
  407b52:	6420      	str	r0, [r4, #64]	; 0x40
  407b54:	930b      	str	r3, [sp, #44]	; 0x2c
  407b56:	f7ff b9dd 	b.w	406f14 <_dtoa_r+0x1f4>
  407b5a:	2501      	movs	r5, #1
  407b5c:	f7ff b9a5 	b.w	406eaa <_dtoa_r+0x18a>
  407b60:	f43f ab69 	beq.w	407236 <_dtoa_r+0x516>
  407b64:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407b68:	f7ff bbf9 	b.w	40735e <_dtoa_r+0x63e>
  407b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407b6e:	930a      	str	r3, [sp, #40]	; 0x28
  407b70:	e5e5      	b.n	40773e <_dtoa_r+0xa1e>
  407b72:	bf00      	nop

00407b74 <__sflush_r>:
  407b74:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407b78:	b29a      	uxth	r2, r3
  407b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b7e:	460d      	mov	r5, r1
  407b80:	0711      	lsls	r1, r2, #28
  407b82:	4680      	mov	r8, r0
  407b84:	d43a      	bmi.n	407bfc <__sflush_r+0x88>
  407b86:	686a      	ldr	r2, [r5, #4]
  407b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407b8c:	2a00      	cmp	r2, #0
  407b8e:	81ab      	strh	r3, [r5, #12]
  407b90:	dd6f      	ble.n	407c72 <__sflush_r+0xfe>
  407b92:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407b94:	2c00      	cmp	r4, #0
  407b96:	d049      	beq.n	407c2c <__sflush_r+0xb8>
  407b98:	2200      	movs	r2, #0
  407b9a:	b29b      	uxth	r3, r3
  407b9c:	f8d8 6000 	ldr.w	r6, [r8]
  407ba0:	f8c8 2000 	str.w	r2, [r8]
  407ba4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407ba8:	d067      	beq.n	407c7a <__sflush_r+0x106>
  407baa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407bac:	075f      	lsls	r7, r3, #29
  407bae:	d505      	bpl.n	407bbc <__sflush_r+0x48>
  407bb0:	6869      	ldr	r1, [r5, #4]
  407bb2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407bb4:	1a52      	subs	r2, r2, r1
  407bb6:	b10b      	cbz	r3, 407bbc <__sflush_r+0x48>
  407bb8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407bba:	1ad2      	subs	r2, r2, r3
  407bbc:	2300      	movs	r3, #0
  407bbe:	69e9      	ldr	r1, [r5, #28]
  407bc0:	4640      	mov	r0, r8
  407bc2:	47a0      	blx	r4
  407bc4:	1c44      	adds	r4, r0, #1
  407bc6:	d03c      	beq.n	407c42 <__sflush_r+0xce>
  407bc8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407bcc:	692a      	ldr	r2, [r5, #16]
  407bce:	602a      	str	r2, [r5, #0]
  407bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407bd4:	2200      	movs	r2, #0
  407bd6:	81ab      	strh	r3, [r5, #12]
  407bd8:	04db      	lsls	r3, r3, #19
  407bda:	606a      	str	r2, [r5, #4]
  407bdc:	d447      	bmi.n	407c6e <__sflush_r+0xfa>
  407bde:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407be0:	f8c8 6000 	str.w	r6, [r8]
  407be4:	b311      	cbz	r1, 407c2c <__sflush_r+0xb8>
  407be6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407bea:	4299      	cmp	r1, r3
  407bec:	d002      	beq.n	407bf4 <__sflush_r+0x80>
  407bee:	4640      	mov	r0, r8
  407bf0:	f000 f9de 	bl	407fb0 <_free_r>
  407bf4:	2000      	movs	r0, #0
  407bf6:	6328      	str	r0, [r5, #48]	; 0x30
  407bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bfc:	692e      	ldr	r6, [r5, #16]
  407bfe:	b1ae      	cbz	r6, 407c2c <__sflush_r+0xb8>
  407c00:	682c      	ldr	r4, [r5, #0]
  407c02:	602e      	str	r6, [r5, #0]
  407c04:	0791      	lsls	r1, r2, #30
  407c06:	bf0c      	ite	eq
  407c08:	696b      	ldreq	r3, [r5, #20]
  407c0a:	2300      	movne	r3, #0
  407c0c:	1ba4      	subs	r4, r4, r6
  407c0e:	60ab      	str	r3, [r5, #8]
  407c10:	e00a      	b.n	407c28 <__sflush_r+0xb4>
  407c12:	4623      	mov	r3, r4
  407c14:	4632      	mov	r2, r6
  407c16:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407c18:	69e9      	ldr	r1, [r5, #28]
  407c1a:	4640      	mov	r0, r8
  407c1c:	47b8      	blx	r7
  407c1e:	2800      	cmp	r0, #0
  407c20:	eba4 0400 	sub.w	r4, r4, r0
  407c24:	4406      	add	r6, r0
  407c26:	dd04      	ble.n	407c32 <__sflush_r+0xbe>
  407c28:	2c00      	cmp	r4, #0
  407c2a:	dcf2      	bgt.n	407c12 <__sflush_r+0x9e>
  407c2c:	2000      	movs	r0, #0
  407c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c32:	89ab      	ldrh	r3, [r5, #12]
  407c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c38:	81ab      	strh	r3, [r5, #12]
  407c3a:	f04f 30ff 	mov.w	r0, #4294967295
  407c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c42:	f8d8 4000 	ldr.w	r4, [r8]
  407c46:	2c1d      	cmp	r4, #29
  407c48:	d8f3      	bhi.n	407c32 <__sflush_r+0xbe>
  407c4a:	4b19      	ldr	r3, [pc, #100]	; (407cb0 <__sflush_r+0x13c>)
  407c4c:	40e3      	lsrs	r3, r4
  407c4e:	43db      	mvns	r3, r3
  407c50:	f013 0301 	ands.w	r3, r3, #1
  407c54:	d1ed      	bne.n	407c32 <__sflush_r+0xbe>
  407c56:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407c5a:	606b      	str	r3, [r5, #4]
  407c5c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407c60:	6929      	ldr	r1, [r5, #16]
  407c62:	81ab      	strh	r3, [r5, #12]
  407c64:	04da      	lsls	r2, r3, #19
  407c66:	6029      	str	r1, [r5, #0]
  407c68:	d5b9      	bpl.n	407bde <__sflush_r+0x6a>
  407c6a:	2c00      	cmp	r4, #0
  407c6c:	d1b7      	bne.n	407bde <__sflush_r+0x6a>
  407c6e:	6528      	str	r0, [r5, #80]	; 0x50
  407c70:	e7b5      	b.n	407bde <__sflush_r+0x6a>
  407c72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407c74:	2a00      	cmp	r2, #0
  407c76:	dc8c      	bgt.n	407b92 <__sflush_r+0x1e>
  407c78:	e7d8      	b.n	407c2c <__sflush_r+0xb8>
  407c7a:	2301      	movs	r3, #1
  407c7c:	69e9      	ldr	r1, [r5, #28]
  407c7e:	4640      	mov	r0, r8
  407c80:	47a0      	blx	r4
  407c82:	1c43      	adds	r3, r0, #1
  407c84:	4602      	mov	r2, r0
  407c86:	d002      	beq.n	407c8e <__sflush_r+0x11a>
  407c88:	89ab      	ldrh	r3, [r5, #12]
  407c8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407c8c:	e78e      	b.n	407bac <__sflush_r+0x38>
  407c8e:	f8d8 3000 	ldr.w	r3, [r8]
  407c92:	2b00      	cmp	r3, #0
  407c94:	d0f8      	beq.n	407c88 <__sflush_r+0x114>
  407c96:	2b1d      	cmp	r3, #29
  407c98:	d001      	beq.n	407c9e <__sflush_r+0x12a>
  407c9a:	2b16      	cmp	r3, #22
  407c9c:	d102      	bne.n	407ca4 <__sflush_r+0x130>
  407c9e:	f8c8 6000 	str.w	r6, [r8]
  407ca2:	e7c3      	b.n	407c2c <__sflush_r+0xb8>
  407ca4:	89ab      	ldrh	r3, [r5, #12]
  407ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407caa:	81ab      	strh	r3, [r5, #12]
  407cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407cb0:	20400001 	.word	0x20400001

00407cb4 <_fflush_r>:
  407cb4:	b538      	push	{r3, r4, r5, lr}
  407cb6:	460d      	mov	r5, r1
  407cb8:	4604      	mov	r4, r0
  407cba:	b108      	cbz	r0, 407cc0 <_fflush_r+0xc>
  407cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407cbe:	b1bb      	cbz	r3, 407cf0 <_fflush_r+0x3c>
  407cc0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407cc4:	b188      	cbz	r0, 407cea <_fflush_r+0x36>
  407cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407cc8:	07db      	lsls	r3, r3, #31
  407cca:	d401      	bmi.n	407cd0 <_fflush_r+0x1c>
  407ccc:	0581      	lsls	r1, r0, #22
  407cce:	d517      	bpl.n	407d00 <_fflush_r+0x4c>
  407cd0:	4620      	mov	r0, r4
  407cd2:	4629      	mov	r1, r5
  407cd4:	f7ff ff4e 	bl	407b74 <__sflush_r>
  407cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407cda:	07da      	lsls	r2, r3, #31
  407cdc:	4604      	mov	r4, r0
  407cde:	d402      	bmi.n	407ce6 <_fflush_r+0x32>
  407ce0:	89ab      	ldrh	r3, [r5, #12]
  407ce2:	059b      	lsls	r3, r3, #22
  407ce4:	d507      	bpl.n	407cf6 <_fflush_r+0x42>
  407ce6:	4620      	mov	r0, r4
  407ce8:	bd38      	pop	{r3, r4, r5, pc}
  407cea:	4604      	mov	r4, r0
  407cec:	4620      	mov	r0, r4
  407cee:	bd38      	pop	{r3, r4, r5, pc}
  407cf0:	f000 f838 	bl	407d64 <__sinit>
  407cf4:	e7e4      	b.n	407cc0 <_fflush_r+0xc>
  407cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407cf8:	f000 fc04 	bl	408504 <__retarget_lock_release_recursive>
  407cfc:	4620      	mov	r0, r4
  407cfe:	bd38      	pop	{r3, r4, r5, pc}
  407d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407d02:	f000 fbfd 	bl	408500 <__retarget_lock_acquire_recursive>
  407d06:	e7e3      	b.n	407cd0 <_fflush_r+0x1c>

00407d08 <_cleanup_r>:
  407d08:	4901      	ldr	r1, [pc, #4]	; (407d10 <_cleanup_r+0x8>)
  407d0a:	f000 bbaf 	b.w	40846c <_fwalk_reent>
  407d0e:	bf00      	nop
  407d10:	004094f1 	.word	0x004094f1

00407d14 <std.isra.0>:
  407d14:	b510      	push	{r4, lr}
  407d16:	2300      	movs	r3, #0
  407d18:	4604      	mov	r4, r0
  407d1a:	8181      	strh	r1, [r0, #12]
  407d1c:	81c2      	strh	r2, [r0, #14]
  407d1e:	6003      	str	r3, [r0, #0]
  407d20:	6043      	str	r3, [r0, #4]
  407d22:	6083      	str	r3, [r0, #8]
  407d24:	6643      	str	r3, [r0, #100]	; 0x64
  407d26:	6103      	str	r3, [r0, #16]
  407d28:	6143      	str	r3, [r0, #20]
  407d2a:	6183      	str	r3, [r0, #24]
  407d2c:	4619      	mov	r1, r3
  407d2e:	2208      	movs	r2, #8
  407d30:	305c      	adds	r0, #92	; 0x5c
  407d32:	f7fc fa51 	bl	4041d8 <memset>
  407d36:	4807      	ldr	r0, [pc, #28]	; (407d54 <std.isra.0+0x40>)
  407d38:	4907      	ldr	r1, [pc, #28]	; (407d58 <std.isra.0+0x44>)
  407d3a:	4a08      	ldr	r2, [pc, #32]	; (407d5c <std.isra.0+0x48>)
  407d3c:	4b08      	ldr	r3, [pc, #32]	; (407d60 <std.isra.0+0x4c>)
  407d3e:	6220      	str	r0, [r4, #32]
  407d40:	61e4      	str	r4, [r4, #28]
  407d42:	6261      	str	r1, [r4, #36]	; 0x24
  407d44:	62a2      	str	r2, [r4, #40]	; 0x28
  407d46:	62e3      	str	r3, [r4, #44]	; 0x2c
  407d48:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407d50:	f000 bbd2 	b.w	4084f8 <__retarget_lock_init_recursive>
  407d54:	004090d9 	.word	0x004090d9
  407d58:	004090fd 	.word	0x004090fd
  407d5c:	00409139 	.word	0x00409139
  407d60:	00409159 	.word	0x00409159

00407d64 <__sinit>:
  407d64:	b510      	push	{r4, lr}
  407d66:	4604      	mov	r4, r0
  407d68:	4812      	ldr	r0, [pc, #72]	; (407db4 <__sinit+0x50>)
  407d6a:	f000 fbc9 	bl	408500 <__retarget_lock_acquire_recursive>
  407d6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407d70:	b9d2      	cbnz	r2, 407da8 <__sinit+0x44>
  407d72:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407d76:	4810      	ldr	r0, [pc, #64]	; (407db8 <__sinit+0x54>)
  407d78:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407d7c:	2103      	movs	r1, #3
  407d7e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407d82:	63e0      	str	r0, [r4, #60]	; 0x3c
  407d84:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407d88:	6860      	ldr	r0, [r4, #4]
  407d8a:	2104      	movs	r1, #4
  407d8c:	f7ff ffc2 	bl	407d14 <std.isra.0>
  407d90:	2201      	movs	r2, #1
  407d92:	2109      	movs	r1, #9
  407d94:	68a0      	ldr	r0, [r4, #8]
  407d96:	f7ff ffbd 	bl	407d14 <std.isra.0>
  407d9a:	2202      	movs	r2, #2
  407d9c:	2112      	movs	r1, #18
  407d9e:	68e0      	ldr	r0, [r4, #12]
  407da0:	f7ff ffb8 	bl	407d14 <std.isra.0>
  407da4:	2301      	movs	r3, #1
  407da6:	63a3      	str	r3, [r4, #56]	; 0x38
  407da8:	4802      	ldr	r0, [pc, #8]	; (407db4 <__sinit+0x50>)
  407daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407dae:	f000 bba9 	b.w	408504 <__retarget_lock_release_recursive>
  407db2:	bf00      	nop
  407db4:	20400d38 	.word	0x20400d38
  407db8:	00407d09 	.word	0x00407d09

00407dbc <__sfp_lock_acquire>:
  407dbc:	4801      	ldr	r0, [pc, #4]	; (407dc4 <__sfp_lock_acquire+0x8>)
  407dbe:	f000 bb9f 	b.w	408500 <__retarget_lock_acquire_recursive>
  407dc2:	bf00      	nop
  407dc4:	20400d4c 	.word	0x20400d4c

00407dc8 <__sfp_lock_release>:
  407dc8:	4801      	ldr	r0, [pc, #4]	; (407dd0 <__sfp_lock_release+0x8>)
  407dca:	f000 bb9b 	b.w	408504 <__retarget_lock_release_recursive>
  407dce:	bf00      	nop
  407dd0:	20400d4c 	.word	0x20400d4c

00407dd4 <__libc_fini_array>:
  407dd4:	b538      	push	{r3, r4, r5, lr}
  407dd6:	4c0a      	ldr	r4, [pc, #40]	; (407e00 <__libc_fini_array+0x2c>)
  407dd8:	4d0a      	ldr	r5, [pc, #40]	; (407e04 <__libc_fini_array+0x30>)
  407dda:	1b64      	subs	r4, r4, r5
  407ddc:	10a4      	asrs	r4, r4, #2
  407dde:	d00a      	beq.n	407df6 <__libc_fini_array+0x22>
  407de0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407de4:	3b01      	subs	r3, #1
  407de6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407dea:	3c01      	subs	r4, #1
  407dec:	f855 3904 	ldr.w	r3, [r5], #-4
  407df0:	4798      	blx	r3
  407df2:	2c00      	cmp	r4, #0
  407df4:	d1f9      	bne.n	407dea <__libc_fini_array+0x16>
  407df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407dfa:	f002 bce7 	b.w	40a7cc <_fini>
  407dfe:	bf00      	nop
  407e00:	0040a7dc 	.word	0x0040a7dc
  407e04:	0040a7d8 	.word	0x0040a7d8

00407e08 <__fputwc>:
  407e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e0c:	b082      	sub	sp, #8
  407e0e:	4680      	mov	r8, r0
  407e10:	4689      	mov	r9, r1
  407e12:	4614      	mov	r4, r2
  407e14:	f000 fb54 	bl	4084c0 <__locale_mb_cur_max>
  407e18:	2801      	cmp	r0, #1
  407e1a:	d036      	beq.n	407e8a <__fputwc+0x82>
  407e1c:	464a      	mov	r2, r9
  407e1e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407e22:	a901      	add	r1, sp, #4
  407e24:	4640      	mov	r0, r8
  407e26:	f001 fa71 	bl	40930c <_wcrtomb_r>
  407e2a:	1c42      	adds	r2, r0, #1
  407e2c:	4606      	mov	r6, r0
  407e2e:	d025      	beq.n	407e7c <__fputwc+0x74>
  407e30:	b3a8      	cbz	r0, 407e9e <__fputwc+0x96>
  407e32:	f89d e004 	ldrb.w	lr, [sp, #4]
  407e36:	2500      	movs	r5, #0
  407e38:	f10d 0a04 	add.w	sl, sp, #4
  407e3c:	e009      	b.n	407e52 <__fputwc+0x4a>
  407e3e:	6823      	ldr	r3, [r4, #0]
  407e40:	1c5a      	adds	r2, r3, #1
  407e42:	6022      	str	r2, [r4, #0]
  407e44:	f883 e000 	strb.w	lr, [r3]
  407e48:	3501      	adds	r5, #1
  407e4a:	42b5      	cmp	r5, r6
  407e4c:	d227      	bcs.n	407e9e <__fputwc+0x96>
  407e4e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407e52:	68a3      	ldr	r3, [r4, #8]
  407e54:	3b01      	subs	r3, #1
  407e56:	2b00      	cmp	r3, #0
  407e58:	60a3      	str	r3, [r4, #8]
  407e5a:	daf0      	bge.n	407e3e <__fputwc+0x36>
  407e5c:	69a7      	ldr	r7, [r4, #24]
  407e5e:	42bb      	cmp	r3, r7
  407e60:	4671      	mov	r1, lr
  407e62:	4622      	mov	r2, r4
  407e64:	4640      	mov	r0, r8
  407e66:	db02      	blt.n	407e6e <__fputwc+0x66>
  407e68:	f1be 0f0a 	cmp.w	lr, #10
  407e6c:	d1e7      	bne.n	407e3e <__fputwc+0x36>
  407e6e:	f001 f9f5 	bl	40925c <__swbuf_r>
  407e72:	1c43      	adds	r3, r0, #1
  407e74:	d1e8      	bne.n	407e48 <__fputwc+0x40>
  407e76:	b002      	add	sp, #8
  407e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e7c:	89a3      	ldrh	r3, [r4, #12]
  407e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e82:	81a3      	strh	r3, [r4, #12]
  407e84:	b002      	add	sp, #8
  407e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e8a:	f109 33ff 	add.w	r3, r9, #4294967295
  407e8e:	2bfe      	cmp	r3, #254	; 0xfe
  407e90:	d8c4      	bhi.n	407e1c <__fputwc+0x14>
  407e92:	fa5f fe89 	uxtb.w	lr, r9
  407e96:	4606      	mov	r6, r0
  407e98:	f88d e004 	strb.w	lr, [sp, #4]
  407e9c:	e7cb      	b.n	407e36 <__fputwc+0x2e>
  407e9e:	4648      	mov	r0, r9
  407ea0:	b002      	add	sp, #8
  407ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ea6:	bf00      	nop

00407ea8 <_fputwc_r>:
  407ea8:	b530      	push	{r4, r5, lr}
  407eaa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407eac:	f013 0f01 	tst.w	r3, #1
  407eb0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407eb4:	4614      	mov	r4, r2
  407eb6:	b083      	sub	sp, #12
  407eb8:	4605      	mov	r5, r0
  407eba:	b29a      	uxth	r2, r3
  407ebc:	d101      	bne.n	407ec2 <_fputwc_r+0x1a>
  407ebe:	0590      	lsls	r0, r2, #22
  407ec0:	d51c      	bpl.n	407efc <_fputwc_r+0x54>
  407ec2:	0490      	lsls	r0, r2, #18
  407ec4:	d406      	bmi.n	407ed4 <_fputwc_r+0x2c>
  407ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407ed0:	81a3      	strh	r3, [r4, #12]
  407ed2:	6662      	str	r2, [r4, #100]	; 0x64
  407ed4:	4628      	mov	r0, r5
  407ed6:	4622      	mov	r2, r4
  407ed8:	f7ff ff96 	bl	407e08 <__fputwc>
  407edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407ede:	07da      	lsls	r2, r3, #31
  407ee0:	4605      	mov	r5, r0
  407ee2:	d402      	bmi.n	407eea <_fputwc_r+0x42>
  407ee4:	89a3      	ldrh	r3, [r4, #12]
  407ee6:	059b      	lsls	r3, r3, #22
  407ee8:	d502      	bpl.n	407ef0 <_fputwc_r+0x48>
  407eea:	4628      	mov	r0, r5
  407eec:	b003      	add	sp, #12
  407eee:	bd30      	pop	{r4, r5, pc}
  407ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407ef2:	f000 fb07 	bl	408504 <__retarget_lock_release_recursive>
  407ef6:	4628      	mov	r0, r5
  407ef8:	b003      	add	sp, #12
  407efa:	bd30      	pop	{r4, r5, pc}
  407efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407efe:	9101      	str	r1, [sp, #4]
  407f00:	f000 fafe 	bl	408500 <__retarget_lock_acquire_recursive>
  407f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f08:	9901      	ldr	r1, [sp, #4]
  407f0a:	b29a      	uxth	r2, r3
  407f0c:	e7d9      	b.n	407ec2 <_fputwc_r+0x1a>
  407f0e:	bf00      	nop

00407f10 <_malloc_trim_r>:
  407f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f12:	4f24      	ldr	r7, [pc, #144]	; (407fa4 <_malloc_trim_r+0x94>)
  407f14:	460c      	mov	r4, r1
  407f16:	4606      	mov	r6, r0
  407f18:	f7fc f9ac 	bl	404274 <__malloc_lock>
  407f1c:	68bb      	ldr	r3, [r7, #8]
  407f1e:	685d      	ldr	r5, [r3, #4]
  407f20:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407f24:	310f      	adds	r1, #15
  407f26:	f025 0503 	bic.w	r5, r5, #3
  407f2a:	4429      	add	r1, r5
  407f2c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407f30:	f021 010f 	bic.w	r1, r1, #15
  407f34:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407f38:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407f3c:	db07      	blt.n	407f4e <_malloc_trim_r+0x3e>
  407f3e:	2100      	movs	r1, #0
  407f40:	4630      	mov	r0, r6
  407f42:	f7fc f9a3 	bl	40428c <_sbrk_r>
  407f46:	68bb      	ldr	r3, [r7, #8]
  407f48:	442b      	add	r3, r5
  407f4a:	4298      	cmp	r0, r3
  407f4c:	d004      	beq.n	407f58 <_malloc_trim_r+0x48>
  407f4e:	4630      	mov	r0, r6
  407f50:	f7fc f996 	bl	404280 <__malloc_unlock>
  407f54:	2000      	movs	r0, #0
  407f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f58:	4261      	negs	r1, r4
  407f5a:	4630      	mov	r0, r6
  407f5c:	f7fc f996 	bl	40428c <_sbrk_r>
  407f60:	3001      	adds	r0, #1
  407f62:	d00d      	beq.n	407f80 <_malloc_trim_r+0x70>
  407f64:	4b10      	ldr	r3, [pc, #64]	; (407fa8 <_malloc_trim_r+0x98>)
  407f66:	68ba      	ldr	r2, [r7, #8]
  407f68:	6819      	ldr	r1, [r3, #0]
  407f6a:	1b2d      	subs	r5, r5, r4
  407f6c:	f045 0501 	orr.w	r5, r5, #1
  407f70:	4630      	mov	r0, r6
  407f72:	1b09      	subs	r1, r1, r4
  407f74:	6055      	str	r5, [r2, #4]
  407f76:	6019      	str	r1, [r3, #0]
  407f78:	f7fc f982 	bl	404280 <__malloc_unlock>
  407f7c:	2001      	movs	r0, #1
  407f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f80:	2100      	movs	r1, #0
  407f82:	4630      	mov	r0, r6
  407f84:	f7fc f982 	bl	40428c <_sbrk_r>
  407f88:	68ba      	ldr	r2, [r7, #8]
  407f8a:	1a83      	subs	r3, r0, r2
  407f8c:	2b0f      	cmp	r3, #15
  407f8e:	ddde      	ble.n	407f4e <_malloc_trim_r+0x3e>
  407f90:	4c06      	ldr	r4, [pc, #24]	; (407fac <_malloc_trim_r+0x9c>)
  407f92:	4905      	ldr	r1, [pc, #20]	; (407fa8 <_malloc_trim_r+0x98>)
  407f94:	6824      	ldr	r4, [r4, #0]
  407f96:	f043 0301 	orr.w	r3, r3, #1
  407f9a:	1b00      	subs	r0, r0, r4
  407f9c:	6053      	str	r3, [r2, #4]
  407f9e:	6008      	str	r0, [r1, #0]
  407fa0:	e7d5      	b.n	407f4e <_malloc_trim_r+0x3e>
  407fa2:	bf00      	nop
  407fa4:	20400438 	.word	0x20400438
  407fa8:	20400ca0 	.word	0x20400ca0
  407fac:	20400840 	.word	0x20400840

00407fb0 <_free_r>:
  407fb0:	2900      	cmp	r1, #0
  407fb2:	d044      	beq.n	40803e <_free_r+0x8e>
  407fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407fb8:	460d      	mov	r5, r1
  407fba:	4680      	mov	r8, r0
  407fbc:	f7fc f95a 	bl	404274 <__malloc_lock>
  407fc0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407fc4:	4969      	ldr	r1, [pc, #420]	; (40816c <_free_r+0x1bc>)
  407fc6:	f027 0301 	bic.w	r3, r7, #1
  407fca:	f1a5 0408 	sub.w	r4, r5, #8
  407fce:	18e2      	adds	r2, r4, r3
  407fd0:	688e      	ldr	r6, [r1, #8]
  407fd2:	6850      	ldr	r0, [r2, #4]
  407fd4:	42b2      	cmp	r2, r6
  407fd6:	f020 0003 	bic.w	r0, r0, #3
  407fda:	d05e      	beq.n	40809a <_free_r+0xea>
  407fdc:	07fe      	lsls	r6, r7, #31
  407fde:	6050      	str	r0, [r2, #4]
  407fe0:	d40b      	bmi.n	407ffa <_free_r+0x4a>
  407fe2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407fe6:	1be4      	subs	r4, r4, r7
  407fe8:	f101 0e08 	add.w	lr, r1, #8
  407fec:	68a5      	ldr	r5, [r4, #8]
  407fee:	4575      	cmp	r5, lr
  407ff0:	443b      	add	r3, r7
  407ff2:	d06d      	beq.n	4080d0 <_free_r+0x120>
  407ff4:	68e7      	ldr	r7, [r4, #12]
  407ff6:	60ef      	str	r7, [r5, #12]
  407ff8:	60bd      	str	r5, [r7, #8]
  407ffa:	1815      	adds	r5, r2, r0
  407ffc:	686d      	ldr	r5, [r5, #4]
  407ffe:	07ed      	lsls	r5, r5, #31
  408000:	d53e      	bpl.n	408080 <_free_r+0xd0>
  408002:	f043 0201 	orr.w	r2, r3, #1
  408006:	6062      	str	r2, [r4, #4]
  408008:	50e3      	str	r3, [r4, r3]
  40800a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40800e:	d217      	bcs.n	408040 <_free_r+0x90>
  408010:	08db      	lsrs	r3, r3, #3
  408012:	1c58      	adds	r0, r3, #1
  408014:	109a      	asrs	r2, r3, #2
  408016:	684d      	ldr	r5, [r1, #4]
  408018:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40801c:	60a7      	str	r7, [r4, #8]
  40801e:	2301      	movs	r3, #1
  408020:	4093      	lsls	r3, r2
  408022:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408026:	432b      	orrs	r3, r5
  408028:	3a08      	subs	r2, #8
  40802a:	60e2      	str	r2, [r4, #12]
  40802c:	604b      	str	r3, [r1, #4]
  40802e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408032:	60fc      	str	r4, [r7, #12]
  408034:	4640      	mov	r0, r8
  408036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40803a:	f7fc b921 	b.w	404280 <__malloc_unlock>
  40803e:	4770      	bx	lr
  408040:	0a5a      	lsrs	r2, r3, #9
  408042:	2a04      	cmp	r2, #4
  408044:	d852      	bhi.n	4080ec <_free_r+0x13c>
  408046:	099a      	lsrs	r2, r3, #6
  408048:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40804c:	00ff      	lsls	r7, r7, #3
  40804e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408052:	19c8      	adds	r0, r1, r7
  408054:	59ca      	ldr	r2, [r1, r7]
  408056:	3808      	subs	r0, #8
  408058:	4290      	cmp	r0, r2
  40805a:	d04f      	beq.n	4080fc <_free_r+0x14c>
  40805c:	6851      	ldr	r1, [r2, #4]
  40805e:	f021 0103 	bic.w	r1, r1, #3
  408062:	428b      	cmp	r3, r1
  408064:	d232      	bcs.n	4080cc <_free_r+0x11c>
  408066:	6892      	ldr	r2, [r2, #8]
  408068:	4290      	cmp	r0, r2
  40806a:	d1f7      	bne.n	40805c <_free_r+0xac>
  40806c:	68c3      	ldr	r3, [r0, #12]
  40806e:	60a0      	str	r0, [r4, #8]
  408070:	60e3      	str	r3, [r4, #12]
  408072:	609c      	str	r4, [r3, #8]
  408074:	60c4      	str	r4, [r0, #12]
  408076:	4640      	mov	r0, r8
  408078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40807c:	f7fc b900 	b.w	404280 <__malloc_unlock>
  408080:	6895      	ldr	r5, [r2, #8]
  408082:	4f3b      	ldr	r7, [pc, #236]	; (408170 <_free_r+0x1c0>)
  408084:	42bd      	cmp	r5, r7
  408086:	4403      	add	r3, r0
  408088:	d040      	beq.n	40810c <_free_r+0x15c>
  40808a:	68d0      	ldr	r0, [r2, #12]
  40808c:	60e8      	str	r0, [r5, #12]
  40808e:	f043 0201 	orr.w	r2, r3, #1
  408092:	6085      	str	r5, [r0, #8]
  408094:	6062      	str	r2, [r4, #4]
  408096:	50e3      	str	r3, [r4, r3]
  408098:	e7b7      	b.n	40800a <_free_r+0x5a>
  40809a:	07ff      	lsls	r7, r7, #31
  40809c:	4403      	add	r3, r0
  40809e:	d407      	bmi.n	4080b0 <_free_r+0x100>
  4080a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4080a4:	1aa4      	subs	r4, r4, r2
  4080a6:	4413      	add	r3, r2
  4080a8:	68a0      	ldr	r0, [r4, #8]
  4080aa:	68e2      	ldr	r2, [r4, #12]
  4080ac:	60c2      	str	r2, [r0, #12]
  4080ae:	6090      	str	r0, [r2, #8]
  4080b0:	4a30      	ldr	r2, [pc, #192]	; (408174 <_free_r+0x1c4>)
  4080b2:	6812      	ldr	r2, [r2, #0]
  4080b4:	f043 0001 	orr.w	r0, r3, #1
  4080b8:	4293      	cmp	r3, r2
  4080ba:	6060      	str	r0, [r4, #4]
  4080bc:	608c      	str	r4, [r1, #8]
  4080be:	d3b9      	bcc.n	408034 <_free_r+0x84>
  4080c0:	4b2d      	ldr	r3, [pc, #180]	; (408178 <_free_r+0x1c8>)
  4080c2:	4640      	mov	r0, r8
  4080c4:	6819      	ldr	r1, [r3, #0]
  4080c6:	f7ff ff23 	bl	407f10 <_malloc_trim_r>
  4080ca:	e7b3      	b.n	408034 <_free_r+0x84>
  4080cc:	4610      	mov	r0, r2
  4080ce:	e7cd      	b.n	40806c <_free_r+0xbc>
  4080d0:	1811      	adds	r1, r2, r0
  4080d2:	6849      	ldr	r1, [r1, #4]
  4080d4:	07c9      	lsls	r1, r1, #31
  4080d6:	d444      	bmi.n	408162 <_free_r+0x1b2>
  4080d8:	6891      	ldr	r1, [r2, #8]
  4080da:	68d2      	ldr	r2, [r2, #12]
  4080dc:	60ca      	str	r2, [r1, #12]
  4080de:	4403      	add	r3, r0
  4080e0:	f043 0001 	orr.w	r0, r3, #1
  4080e4:	6091      	str	r1, [r2, #8]
  4080e6:	6060      	str	r0, [r4, #4]
  4080e8:	50e3      	str	r3, [r4, r3]
  4080ea:	e7a3      	b.n	408034 <_free_r+0x84>
  4080ec:	2a14      	cmp	r2, #20
  4080ee:	d816      	bhi.n	40811e <_free_r+0x16e>
  4080f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4080f4:	00ff      	lsls	r7, r7, #3
  4080f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4080fa:	e7aa      	b.n	408052 <_free_r+0xa2>
  4080fc:	10aa      	asrs	r2, r5, #2
  4080fe:	2301      	movs	r3, #1
  408100:	684d      	ldr	r5, [r1, #4]
  408102:	4093      	lsls	r3, r2
  408104:	432b      	orrs	r3, r5
  408106:	604b      	str	r3, [r1, #4]
  408108:	4603      	mov	r3, r0
  40810a:	e7b0      	b.n	40806e <_free_r+0xbe>
  40810c:	f043 0201 	orr.w	r2, r3, #1
  408110:	614c      	str	r4, [r1, #20]
  408112:	610c      	str	r4, [r1, #16]
  408114:	60e5      	str	r5, [r4, #12]
  408116:	60a5      	str	r5, [r4, #8]
  408118:	6062      	str	r2, [r4, #4]
  40811a:	50e3      	str	r3, [r4, r3]
  40811c:	e78a      	b.n	408034 <_free_r+0x84>
  40811e:	2a54      	cmp	r2, #84	; 0x54
  408120:	d806      	bhi.n	408130 <_free_r+0x180>
  408122:	0b1a      	lsrs	r2, r3, #12
  408124:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408128:	00ff      	lsls	r7, r7, #3
  40812a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40812e:	e790      	b.n	408052 <_free_r+0xa2>
  408130:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408134:	d806      	bhi.n	408144 <_free_r+0x194>
  408136:	0bda      	lsrs	r2, r3, #15
  408138:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40813c:	00ff      	lsls	r7, r7, #3
  40813e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408142:	e786      	b.n	408052 <_free_r+0xa2>
  408144:	f240 5054 	movw	r0, #1364	; 0x554
  408148:	4282      	cmp	r2, r0
  40814a:	d806      	bhi.n	40815a <_free_r+0x1aa>
  40814c:	0c9a      	lsrs	r2, r3, #18
  40814e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408152:	00ff      	lsls	r7, r7, #3
  408154:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408158:	e77b      	b.n	408052 <_free_r+0xa2>
  40815a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40815e:	257e      	movs	r5, #126	; 0x7e
  408160:	e777      	b.n	408052 <_free_r+0xa2>
  408162:	f043 0101 	orr.w	r1, r3, #1
  408166:	6061      	str	r1, [r4, #4]
  408168:	6013      	str	r3, [r2, #0]
  40816a:	e763      	b.n	408034 <_free_r+0x84>
  40816c:	20400438 	.word	0x20400438
  408170:	20400440 	.word	0x20400440
  408174:	20400844 	.word	0x20400844
  408178:	20400cd0 	.word	0x20400cd0

0040817c <__sfvwrite_r>:
  40817c:	6893      	ldr	r3, [r2, #8]
  40817e:	2b00      	cmp	r3, #0
  408180:	d073      	beq.n	40826a <__sfvwrite_r+0xee>
  408182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408186:	898b      	ldrh	r3, [r1, #12]
  408188:	b083      	sub	sp, #12
  40818a:	460c      	mov	r4, r1
  40818c:	0719      	lsls	r1, r3, #28
  40818e:	9000      	str	r0, [sp, #0]
  408190:	4616      	mov	r6, r2
  408192:	d526      	bpl.n	4081e2 <__sfvwrite_r+0x66>
  408194:	6922      	ldr	r2, [r4, #16]
  408196:	b322      	cbz	r2, 4081e2 <__sfvwrite_r+0x66>
  408198:	f013 0002 	ands.w	r0, r3, #2
  40819c:	6835      	ldr	r5, [r6, #0]
  40819e:	d02c      	beq.n	4081fa <__sfvwrite_r+0x7e>
  4081a0:	f04f 0900 	mov.w	r9, #0
  4081a4:	4fb0      	ldr	r7, [pc, #704]	; (408468 <__sfvwrite_r+0x2ec>)
  4081a6:	46c8      	mov	r8, r9
  4081a8:	46b2      	mov	sl, r6
  4081aa:	45b8      	cmp	r8, r7
  4081ac:	4643      	mov	r3, r8
  4081ae:	464a      	mov	r2, r9
  4081b0:	bf28      	it	cs
  4081b2:	463b      	movcs	r3, r7
  4081b4:	9800      	ldr	r0, [sp, #0]
  4081b6:	f1b8 0f00 	cmp.w	r8, #0
  4081ba:	d050      	beq.n	40825e <__sfvwrite_r+0xe2>
  4081bc:	69e1      	ldr	r1, [r4, #28]
  4081be:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4081c0:	47b0      	blx	r6
  4081c2:	2800      	cmp	r0, #0
  4081c4:	dd58      	ble.n	408278 <__sfvwrite_r+0xfc>
  4081c6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4081ca:	1a1b      	subs	r3, r3, r0
  4081cc:	4481      	add	r9, r0
  4081ce:	eba8 0800 	sub.w	r8, r8, r0
  4081d2:	f8ca 3008 	str.w	r3, [sl, #8]
  4081d6:	2b00      	cmp	r3, #0
  4081d8:	d1e7      	bne.n	4081aa <__sfvwrite_r+0x2e>
  4081da:	2000      	movs	r0, #0
  4081dc:	b003      	add	sp, #12
  4081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081e2:	4621      	mov	r1, r4
  4081e4:	9800      	ldr	r0, [sp, #0]
  4081e6:	f7fe fc91 	bl	406b0c <__swsetup_r>
  4081ea:	2800      	cmp	r0, #0
  4081ec:	f040 8133 	bne.w	408456 <__sfvwrite_r+0x2da>
  4081f0:	89a3      	ldrh	r3, [r4, #12]
  4081f2:	6835      	ldr	r5, [r6, #0]
  4081f4:	f013 0002 	ands.w	r0, r3, #2
  4081f8:	d1d2      	bne.n	4081a0 <__sfvwrite_r+0x24>
  4081fa:	f013 0901 	ands.w	r9, r3, #1
  4081fe:	d145      	bne.n	40828c <__sfvwrite_r+0x110>
  408200:	464f      	mov	r7, r9
  408202:	9601      	str	r6, [sp, #4]
  408204:	b337      	cbz	r7, 408254 <__sfvwrite_r+0xd8>
  408206:	059a      	lsls	r2, r3, #22
  408208:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40820c:	f140 8083 	bpl.w	408316 <__sfvwrite_r+0x19a>
  408210:	4547      	cmp	r7, r8
  408212:	46c3      	mov	fp, r8
  408214:	f0c0 80ab 	bcc.w	40836e <__sfvwrite_r+0x1f2>
  408218:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40821c:	f040 80ac 	bne.w	408378 <__sfvwrite_r+0x1fc>
  408220:	6820      	ldr	r0, [r4, #0]
  408222:	46ba      	mov	sl, r7
  408224:	465a      	mov	r2, fp
  408226:	4649      	mov	r1, r9
  408228:	f000 fa52 	bl	4086d0 <memmove>
  40822c:	68a2      	ldr	r2, [r4, #8]
  40822e:	6823      	ldr	r3, [r4, #0]
  408230:	eba2 0208 	sub.w	r2, r2, r8
  408234:	445b      	add	r3, fp
  408236:	60a2      	str	r2, [r4, #8]
  408238:	6023      	str	r3, [r4, #0]
  40823a:	9a01      	ldr	r2, [sp, #4]
  40823c:	6893      	ldr	r3, [r2, #8]
  40823e:	eba3 030a 	sub.w	r3, r3, sl
  408242:	44d1      	add	r9, sl
  408244:	eba7 070a 	sub.w	r7, r7, sl
  408248:	6093      	str	r3, [r2, #8]
  40824a:	2b00      	cmp	r3, #0
  40824c:	d0c5      	beq.n	4081da <__sfvwrite_r+0x5e>
  40824e:	89a3      	ldrh	r3, [r4, #12]
  408250:	2f00      	cmp	r7, #0
  408252:	d1d8      	bne.n	408206 <__sfvwrite_r+0x8a>
  408254:	f8d5 9000 	ldr.w	r9, [r5]
  408258:	686f      	ldr	r7, [r5, #4]
  40825a:	3508      	adds	r5, #8
  40825c:	e7d2      	b.n	408204 <__sfvwrite_r+0x88>
  40825e:	f8d5 9000 	ldr.w	r9, [r5]
  408262:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408266:	3508      	adds	r5, #8
  408268:	e79f      	b.n	4081aa <__sfvwrite_r+0x2e>
  40826a:	2000      	movs	r0, #0
  40826c:	4770      	bx	lr
  40826e:	4621      	mov	r1, r4
  408270:	9800      	ldr	r0, [sp, #0]
  408272:	f7ff fd1f 	bl	407cb4 <_fflush_r>
  408276:	b370      	cbz	r0, 4082d6 <__sfvwrite_r+0x15a>
  408278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40827c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408280:	f04f 30ff 	mov.w	r0, #4294967295
  408284:	81a3      	strh	r3, [r4, #12]
  408286:	b003      	add	sp, #12
  408288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40828c:	4681      	mov	r9, r0
  40828e:	4633      	mov	r3, r6
  408290:	464e      	mov	r6, r9
  408292:	46a8      	mov	r8, r5
  408294:	469a      	mov	sl, r3
  408296:	464d      	mov	r5, r9
  408298:	b34e      	cbz	r6, 4082ee <__sfvwrite_r+0x172>
  40829a:	b380      	cbz	r0, 4082fe <__sfvwrite_r+0x182>
  40829c:	6820      	ldr	r0, [r4, #0]
  40829e:	6923      	ldr	r3, [r4, #16]
  4082a0:	6962      	ldr	r2, [r4, #20]
  4082a2:	45b1      	cmp	r9, r6
  4082a4:	46cb      	mov	fp, r9
  4082a6:	bf28      	it	cs
  4082a8:	46b3      	movcs	fp, r6
  4082aa:	4298      	cmp	r0, r3
  4082ac:	465f      	mov	r7, fp
  4082ae:	d904      	bls.n	4082ba <__sfvwrite_r+0x13e>
  4082b0:	68a3      	ldr	r3, [r4, #8]
  4082b2:	4413      	add	r3, r2
  4082b4:	459b      	cmp	fp, r3
  4082b6:	f300 80a6 	bgt.w	408406 <__sfvwrite_r+0x28a>
  4082ba:	4593      	cmp	fp, r2
  4082bc:	db4b      	blt.n	408356 <__sfvwrite_r+0x1da>
  4082be:	4613      	mov	r3, r2
  4082c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4082c2:	69e1      	ldr	r1, [r4, #28]
  4082c4:	9800      	ldr	r0, [sp, #0]
  4082c6:	462a      	mov	r2, r5
  4082c8:	47b8      	blx	r7
  4082ca:	1e07      	subs	r7, r0, #0
  4082cc:	ddd4      	ble.n	408278 <__sfvwrite_r+0xfc>
  4082ce:	ebb9 0907 	subs.w	r9, r9, r7
  4082d2:	d0cc      	beq.n	40826e <__sfvwrite_r+0xf2>
  4082d4:	2001      	movs	r0, #1
  4082d6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4082da:	1bdb      	subs	r3, r3, r7
  4082dc:	443d      	add	r5, r7
  4082de:	1bf6      	subs	r6, r6, r7
  4082e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4082e4:	2b00      	cmp	r3, #0
  4082e6:	f43f af78 	beq.w	4081da <__sfvwrite_r+0x5e>
  4082ea:	2e00      	cmp	r6, #0
  4082ec:	d1d5      	bne.n	40829a <__sfvwrite_r+0x11e>
  4082ee:	f108 0308 	add.w	r3, r8, #8
  4082f2:	e913 0060 	ldmdb	r3, {r5, r6}
  4082f6:	4698      	mov	r8, r3
  4082f8:	3308      	adds	r3, #8
  4082fa:	2e00      	cmp	r6, #0
  4082fc:	d0f9      	beq.n	4082f2 <__sfvwrite_r+0x176>
  4082fe:	4632      	mov	r2, r6
  408300:	210a      	movs	r1, #10
  408302:	4628      	mov	r0, r5
  408304:	f000 f994 	bl	408630 <memchr>
  408308:	2800      	cmp	r0, #0
  40830a:	f000 80a1 	beq.w	408450 <__sfvwrite_r+0x2d4>
  40830e:	3001      	adds	r0, #1
  408310:	eba0 0905 	sub.w	r9, r0, r5
  408314:	e7c2      	b.n	40829c <__sfvwrite_r+0x120>
  408316:	6820      	ldr	r0, [r4, #0]
  408318:	6923      	ldr	r3, [r4, #16]
  40831a:	4298      	cmp	r0, r3
  40831c:	d802      	bhi.n	408324 <__sfvwrite_r+0x1a8>
  40831e:	6963      	ldr	r3, [r4, #20]
  408320:	429f      	cmp	r7, r3
  408322:	d25d      	bcs.n	4083e0 <__sfvwrite_r+0x264>
  408324:	45b8      	cmp	r8, r7
  408326:	bf28      	it	cs
  408328:	46b8      	movcs	r8, r7
  40832a:	4642      	mov	r2, r8
  40832c:	4649      	mov	r1, r9
  40832e:	f000 f9cf 	bl	4086d0 <memmove>
  408332:	68a3      	ldr	r3, [r4, #8]
  408334:	6822      	ldr	r2, [r4, #0]
  408336:	eba3 0308 	sub.w	r3, r3, r8
  40833a:	4442      	add	r2, r8
  40833c:	60a3      	str	r3, [r4, #8]
  40833e:	6022      	str	r2, [r4, #0]
  408340:	b10b      	cbz	r3, 408346 <__sfvwrite_r+0x1ca>
  408342:	46c2      	mov	sl, r8
  408344:	e779      	b.n	40823a <__sfvwrite_r+0xbe>
  408346:	4621      	mov	r1, r4
  408348:	9800      	ldr	r0, [sp, #0]
  40834a:	f7ff fcb3 	bl	407cb4 <_fflush_r>
  40834e:	2800      	cmp	r0, #0
  408350:	d192      	bne.n	408278 <__sfvwrite_r+0xfc>
  408352:	46c2      	mov	sl, r8
  408354:	e771      	b.n	40823a <__sfvwrite_r+0xbe>
  408356:	465a      	mov	r2, fp
  408358:	4629      	mov	r1, r5
  40835a:	f000 f9b9 	bl	4086d0 <memmove>
  40835e:	68a2      	ldr	r2, [r4, #8]
  408360:	6823      	ldr	r3, [r4, #0]
  408362:	eba2 020b 	sub.w	r2, r2, fp
  408366:	445b      	add	r3, fp
  408368:	60a2      	str	r2, [r4, #8]
  40836a:	6023      	str	r3, [r4, #0]
  40836c:	e7af      	b.n	4082ce <__sfvwrite_r+0x152>
  40836e:	6820      	ldr	r0, [r4, #0]
  408370:	46b8      	mov	r8, r7
  408372:	46ba      	mov	sl, r7
  408374:	46bb      	mov	fp, r7
  408376:	e755      	b.n	408224 <__sfvwrite_r+0xa8>
  408378:	6962      	ldr	r2, [r4, #20]
  40837a:	6820      	ldr	r0, [r4, #0]
  40837c:	6921      	ldr	r1, [r4, #16]
  40837e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408382:	eba0 0a01 	sub.w	sl, r0, r1
  408386:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40838a:	f10a 0001 	add.w	r0, sl, #1
  40838e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408392:	4438      	add	r0, r7
  408394:	4540      	cmp	r0, r8
  408396:	4642      	mov	r2, r8
  408398:	bf84      	itt	hi
  40839a:	4680      	movhi	r8, r0
  40839c:	4642      	movhi	r2, r8
  40839e:	055b      	lsls	r3, r3, #21
  4083a0:	d544      	bpl.n	40842c <__sfvwrite_r+0x2b0>
  4083a2:	4611      	mov	r1, r2
  4083a4:	9800      	ldr	r0, [sp, #0]
  4083a6:	f7fb fbcd 	bl	403b44 <_malloc_r>
  4083aa:	4683      	mov	fp, r0
  4083ac:	2800      	cmp	r0, #0
  4083ae:	d055      	beq.n	40845c <__sfvwrite_r+0x2e0>
  4083b0:	4652      	mov	r2, sl
  4083b2:	6921      	ldr	r1, [r4, #16]
  4083b4:	f7fb fe76 	bl	4040a4 <memcpy>
  4083b8:	89a3      	ldrh	r3, [r4, #12]
  4083ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4083be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4083c2:	81a3      	strh	r3, [r4, #12]
  4083c4:	eb0b 000a 	add.w	r0, fp, sl
  4083c8:	eba8 030a 	sub.w	r3, r8, sl
  4083cc:	f8c4 b010 	str.w	fp, [r4, #16]
  4083d0:	f8c4 8014 	str.w	r8, [r4, #20]
  4083d4:	6020      	str	r0, [r4, #0]
  4083d6:	60a3      	str	r3, [r4, #8]
  4083d8:	46b8      	mov	r8, r7
  4083da:	46ba      	mov	sl, r7
  4083dc:	46bb      	mov	fp, r7
  4083de:	e721      	b.n	408224 <__sfvwrite_r+0xa8>
  4083e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4083e4:	42b9      	cmp	r1, r7
  4083e6:	bf28      	it	cs
  4083e8:	4639      	movcs	r1, r7
  4083ea:	464a      	mov	r2, r9
  4083ec:	fb91 f1f3 	sdiv	r1, r1, r3
  4083f0:	9800      	ldr	r0, [sp, #0]
  4083f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4083f4:	fb03 f301 	mul.w	r3, r3, r1
  4083f8:	69e1      	ldr	r1, [r4, #28]
  4083fa:	47b0      	blx	r6
  4083fc:	f1b0 0a00 	subs.w	sl, r0, #0
  408400:	f73f af1b 	bgt.w	40823a <__sfvwrite_r+0xbe>
  408404:	e738      	b.n	408278 <__sfvwrite_r+0xfc>
  408406:	461a      	mov	r2, r3
  408408:	4629      	mov	r1, r5
  40840a:	9301      	str	r3, [sp, #4]
  40840c:	f000 f960 	bl	4086d0 <memmove>
  408410:	6822      	ldr	r2, [r4, #0]
  408412:	9b01      	ldr	r3, [sp, #4]
  408414:	9800      	ldr	r0, [sp, #0]
  408416:	441a      	add	r2, r3
  408418:	6022      	str	r2, [r4, #0]
  40841a:	4621      	mov	r1, r4
  40841c:	f7ff fc4a 	bl	407cb4 <_fflush_r>
  408420:	9b01      	ldr	r3, [sp, #4]
  408422:	2800      	cmp	r0, #0
  408424:	f47f af28 	bne.w	408278 <__sfvwrite_r+0xfc>
  408428:	461f      	mov	r7, r3
  40842a:	e750      	b.n	4082ce <__sfvwrite_r+0x152>
  40842c:	9800      	ldr	r0, [sp, #0]
  40842e:	f000 fcad 	bl	408d8c <_realloc_r>
  408432:	4683      	mov	fp, r0
  408434:	2800      	cmp	r0, #0
  408436:	d1c5      	bne.n	4083c4 <__sfvwrite_r+0x248>
  408438:	9d00      	ldr	r5, [sp, #0]
  40843a:	6921      	ldr	r1, [r4, #16]
  40843c:	4628      	mov	r0, r5
  40843e:	f7ff fdb7 	bl	407fb0 <_free_r>
  408442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408446:	220c      	movs	r2, #12
  408448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40844c:	602a      	str	r2, [r5, #0]
  40844e:	e715      	b.n	40827c <__sfvwrite_r+0x100>
  408450:	f106 0901 	add.w	r9, r6, #1
  408454:	e722      	b.n	40829c <__sfvwrite_r+0x120>
  408456:	f04f 30ff 	mov.w	r0, #4294967295
  40845a:	e6bf      	b.n	4081dc <__sfvwrite_r+0x60>
  40845c:	9a00      	ldr	r2, [sp, #0]
  40845e:	230c      	movs	r3, #12
  408460:	6013      	str	r3, [r2, #0]
  408462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408466:	e709      	b.n	40827c <__sfvwrite_r+0x100>
  408468:	7ffffc00 	.word	0x7ffffc00

0040846c <_fwalk_reent>:
  40846c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408470:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408474:	d01f      	beq.n	4084b6 <_fwalk_reent+0x4a>
  408476:	4688      	mov	r8, r1
  408478:	4606      	mov	r6, r0
  40847a:	f04f 0900 	mov.w	r9, #0
  40847e:	687d      	ldr	r5, [r7, #4]
  408480:	68bc      	ldr	r4, [r7, #8]
  408482:	3d01      	subs	r5, #1
  408484:	d411      	bmi.n	4084aa <_fwalk_reent+0x3e>
  408486:	89a3      	ldrh	r3, [r4, #12]
  408488:	2b01      	cmp	r3, #1
  40848a:	f105 35ff 	add.w	r5, r5, #4294967295
  40848e:	d908      	bls.n	4084a2 <_fwalk_reent+0x36>
  408490:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408494:	3301      	adds	r3, #1
  408496:	4621      	mov	r1, r4
  408498:	4630      	mov	r0, r6
  40849a:	d002      	beq.n	4084a2 <_fwalk_reent+0x36>
  40849c:	47c0      	blx	r8
  40849e:	ea49 0900 	orr.w	r9, r9, r0
  4084a2:	1c6b      	adds	r3, r5, #1
  4084a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4084a8:	d1ed      	bne.n	408486 <_fwalk_reent+0x1a>
  4084aa:	683f      	ldr	r7, [r7, #0]
  4084ac:	2f00      	cmp	r7, #0
  4084ae:	d1e6      	bne.n	40847e <_fwalk_reent+0x12>
  4084b0:	4648      	mov	r0, r9
  4084b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4084b6:	46b9      	mov	r9, r7
  4084b8:	4648      	mov	r0, r9
  4084ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4084be:	bf00      	nop

004084c0 <__locale_mb_cur_max>:
  4084c0:	4b04      	ldr	r3, [pc, #16]	; (4084d4 <__locale_mb_cur_max+0x14>)
  4084c2:	4a05      	ldr	r2, [pc, #20]	; (4084d8 <__locale_mb_cur_max+0x18>)
  4084c4:	681b      	ldr	r3, [r3, #0]
  4084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4084c8:	2b00      	cmp	r3, #0
  4084ca:	bf08      	it	eq
  4084cc:	4613      	moveq	r3, r2
  4084ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4084d2:	4770      	bx	lr
  4084d4:	2040000c 	.word	0x2040000c
  4084d8:	2040084c 	.word	0x2040084c

004084dc <_localeconv_r>:
  4084dc:	4a04      	ldr	r2, [pc, #16]	; (4084f0 <_localeconv_r+0x14>)
  4084de:	4b05      	ldr	r3, [pc, #20]	; (4084f4 <_localeconv_r+0x18>)
  4084e0:	6812      	ldr	r2, [r2, #0]
  4084e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4084e4:	2800      	cmp	r0, #0
  4084e6:	bf08      	it	eq
  4084e8:	4618      	moveq	r0, r3
  4084ea:	30f0      	adds	r0, #240	; 0xf0
  4084ec:	4770      	bx	lr
  4084ee:	bf00      	nop
  4084f0:	2040000c 	.word	0x2040000c
  4084f4:	2040084c 	.word	0x2040084c

004084f8 <__retarget_lock_init_recursive>:
  4084f8:	4770      	bx	lr
  4084fa:	bf00      	nop

004084fc <__retarget_lock_close_recursive>:
  4084fc:	4770      	bx	lr
  4084fe:	bf00      	nop

00408500 <__retarget_lock_acquire_recursive>:
  408500:	4770      	bx	lr
  408502:	bf00      	nop

00408504 <__retarget_lock_release_recursive>:
  408504:	4770      	bx	lr
  408506:	bf00      	nop

00408508 <__swhatbuf_r>:
  408508:	b570      	push	{r4, r5, r6, lr}
  40850a:	460c      	mov	r4, r1
  40850c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408510:	2900      	cmp	r1, #0
  408512:	b090      	sub	sp, #64	; 0x40
  408514:	4615      	mov	r5, r2
  408516:	461e      	mov	r6, r3
  408518:	db14      	blt.n	408544 <__swhatbuf_r+0x3c>
  40851a:	aa01      	add	r2, sp, #4
  40851c:	f001 f84a 	bl	4095b4 <_fstat_r>
  408520:	2800      	cmp	r0, #0
  408522:	db0f      	blt.n	408544 <__swhatbuf_r+0x3c>
  408524:	9a02      	ldr	r2, [sp, #8]
  408526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40852a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40852e:	fab2 f282 	clz	r2, r2
  408532:	0952      	lsrs	r2, r2, #5
  408534:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408538:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40853c:	6032      	str	r2, [r6, #0]
  40853e:	602b      	str	r3, [r5, #0]
  408540:	b010      	add	sp, #64	; 0x40
  408542:	bd70      	pop	{r4, r5, r6, pc}
  408544:	89a2      	ldrh	r2, [r4, #12]
  408546:	2300      	movs	r3, #0
  408548:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40854c:	6033      	str	r3, [r6, #0]
  40854e:	d004      	beq.n	40855a <__swhatbuf_r+0x52>
  408550:	2240      	movs	r2, #64	; 0x40
  408552:	4618      	mov	r0, r3
  408554:	602a      	str	r2, [r5, #0]
  408556:	b010      	add	sp, #64	; 0x40
  408558:	bd70      	pop	{r4, r5, r6, pc}
  40855a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40855e:	602b      	str	r3, [r5, #0]
  408560:	b010      	add	sp, #64	; 0x40
  408562:	bd70      	pop	{r4, r5, r6, pc}

00408564 <__smakebuf_r>:
  408564:	898a      	ldrh	r2, [r1, #12]
  408566:	0792      	lsls	r2, r2, #30
  408568:	460b      	mov	r3, r1
  40856a:	d506      	bpl.n	40857a <__smakebuf_r+0x16>
  40856c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408570:	2101      	movs	r1, #1
  408572:	601a      	str	r2, [r3, #0]
  408574:	611a      	str	r2, [r3, #16]
  408576:	6159      	str	r1, [r3, #20]
  408578:	4770      	bx	lr
  40857a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40857c:	b083      	sub	sp, #12
  40857e:	ab01      	add	r3, sp, #4
  408580:	466a      	mov	r2, sp
  408582:	460c      	mov	r4, r1
  408584:	4606      	mov	r6, r0
  408586:	f7ff ffbf 	bl	408508 <__swhatbuf_r>
  40858a:	9900      	ldr	r1, [sp, #0]
  40858c:	4605      	mov	r5, r0
  40858e:	4630      	mov	r0, r6
  408590:	f7fb fad8 	bl	403b44 <_malloc_r>
  408594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408598:	b1d8      	cbz	r0, 4085d2 <__smakebuf_r+0x6e>
  40859a:	9a01      	ldr	r2, [sp, #4]
  40859c:	4f15      	ldr	r7, [pc, #84]	; (4085f4 <__smakebuf_r+0x90>)
  40859e:	9900      	ldr	r1, [sp, #0]
  4085a0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4085a6:	81a3      	strh	r3, [r4, #12]
  4085a8:	6020      	str	r0, [r4, #0]
  4085aa:	6120      	str	r0, [r4, #16]
  4085ac:	6161      	str	r1, [r4, #20]
  4085ae:	b91a      	cbnz	r2, 4085b8 <__smakebuf_r+0x54>
  4085b0:	432b      	orrs	r3, r5
  4085b2:	81a3      	strh	r3, [r4, #12]
  4085b4:	b003      	add	sp, #12
  4085b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4085b8:	4630      	mov	r0, r6
  4085ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4085be:	f001 f80d 	bl	4095dc <_isatty_r>
  4085c2:	b1a0      	cbz	r0, 4085ee <__smakebuf_r+0x8a>
  4085c4:	89a3      	ldrh	r3, [r4, #12]
  4085c6:	f023 0303 	bic.w	r3, r3, #3
  4085ca:	f043 0301 	orr.w	r3, r3, #1
  4085ce:	b21b      	sxth	r3, r3
  4085d0:	e7ee      	b.n	4085b0 <__smakebuf_r+0x4c>
  4085d2:	059a      	lsls	r2, r3, #22
  4085d4:	d4ee      	bmi.n	4085b4 <__smakebuf_r+0x50>
  4085d6:	f023 0303 	bic.w	r3, r3, #3
  4085da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4085de:	f043 0302 	orr.w	r3, r3, #2
  4085e2:	2101      	movs	r1, #1
  4085e4:	81a3      	strh	r3, [r4, #12]
  4085e6:	6022      	str	r2, [r4, #0]
  4085e8:	6122      	str	r2, [r4, #16]
  4085ea:	6161      	str	r1, [r4, #20]
  4085ec:	e7e2      	b.n	4085b4 <__smakebuf_r+0x50>
  4085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4085f2:	e7dd      	b.n	4085b0 <__smakebuf_r+0x4c>
  4085f4:	00407d09 	.word	0x00407d09

004085f8 <__ascii_mbtowc>:
  4085f8:	b082      	sub	sp, #8
  4085fa:	b149      	cbz	r1, 408610 <__ascii_mbtowc+0x18>
  4085fc:	b15a      	cbz	r2, 408616 <__ascii_mbtowc+0x1e>
  4085fe:	b16b      	cbz	r3, 40861c <__ascii_mbtowc+0x24>
  408600:	7813      	ldrb	r3, [r2, #0]
  408602:	600b      	str	r3, [r1, #0]
  408604:	7812      	ldrb	r2, [r2, #0]
  408606:	1c10      	adds	r0, r2, #0
  408608:	bf18      	it	ne
  40860a:	2001      	movne	r0, #1
  40860c:	b002      	add	sp, #8
  40860e:	4770      	bx	lr
  408610:	a901      	add	r1, sp, #4
  408612:	2a00      	cmp	r2, #0
  408614:	d1f3      	bne.n	4085fe <__ascii_mbtowc+0x6>
  408616:	4610      	mov	r0, r2
  408618:	b002      	add	sp, #8
  40861a:	4770      	bx	lr
  40861c:	f06f 0001 	mvn.w	r0, #1
  408620:	e7f4      	b.n	40860c <__ascii_mbtowc+0x14>
  408622:	bf00      	nop
	...

00408630 <memchr>:
  408630:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408634:	2a10      	cmp	r2, #16
  408636:	db2b      	blt.n	408690 <memchr+0x60>
  408638:	f010 0f07 	tst.w	r0, #7
  40863c:	d008      	beq.n	408650 <memchr+0x20>
  40863e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408642:	3a01      	subs	r2, #1
  408644:	428b      	cmp	r3, r1
  408646:	d02d      	beq.n	4086a4 <memchr+0x74>
  408648:	f010 0f07 	tst.w	r0, #7
  40864c:	b342      	cbz	r2, 4086a0 <memchr+0x70>
  40864e:	d1f6      	bne.n	40863e <memchr+0xe>
  408650:	b4f0      	push	{r4, r5, r6, r7}
  408652:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408656:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40865a:	f022 0407 	bic.w	r4, r2, #7
  40865e:	f07f 0700 	mvns.w	r7, #0
  408662:	2300      	movs	r3, #0
  408664:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408668:	3c08      	subs	r4, #8
  40866a:	ea85 0501 	eor.w	r5, r5, r1
  40866e:	ea86 0601 	eor.w	r6, r6, r1
  408672:	fa85 f547 	uadd8	r5, r5, r7
  408676:	faa3 f587 	sel	r5, r3, r7
  40867a:	fa86 f647 	uadd8	r6, r6, r7
  40867e:	faa5 f687 	sel	r6, r5, r7
  408682:	b98e      	cbnz	r6, 4086a8 <memchr+0x78>
  408684:	d1ee      	bne.n	408664 <memchr+0x34>
  408686:	bcf0      	pop	{r4, r5, r6, r7}
  408688:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40868c:	f002 0207 	and.w	r2, r2, #7
  408690:	b132      	cbz	r2, 4086a0 <memchr+0x70>
  408692:	f810 3b01 	ldrb.w	r3, [r0], #1
  408696:	3a01      	subs	r2, #1
  408698:	ea83 0301 	eor.w	r3, r3, r1
  40869c:	b113      	cbz	r3, 4086a4 <memchr+0x74>
  40869e:	d1f8      	bne.n	408692 <memchr+0x62>
  4086a0:	2000      	movs	r0, #0
  4086a2:	4770      	bx	lr
  4086a4:	3801      	subs	r0, #1
  4086a6:	4770      	bx	lr
  4086a8:	2d00      	cmp	r5, #0
  4086aa:	bf06      	itte	eq
  4086ac:	4635      	moveq	r5, r6
  4086ae:	3803      	subeq	r0, #3
  4086b0:	3807      	subne	r0, #7
  4086b2:	f015 0f01 	tst.w	r5, #1
  4086b6:	d107      	bne.n	4086c8 <memchr+0x98>
  4086b8:	3001      	adds	r0, #1
  4086ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4086be:	bf02      	ittt	eq
  4086c0:	3001      	addeq	r0, #1
  4086c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4086c6:	3001      	addeq	r0, #1
  4086c8:	bcf0      	pop	{r4, r5, r6, r7}
  4086ca:	3801      	subs	r0, #1
  4086cc:	4770      	bx	lr
  4086ce:	bf00      	nop

004086d0 <memmove>:
  4086d0:	4288      	cmp	r0, r1
  4086d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4086d4:	d90d      	bls.n	4086f2 <memmove+0x22>
  4086d6:	188b      	adds	r3, r1, r2
  4086d8:	4298      	cmp	r0, r3
  4086da:	d20a      	bcs.n	4086f2 <memmove+0x22>
  4086dc:	1884      	adds	r4, r0, r2
  4086de:	2a00      	cmp	r2, #0
  4086e0:	d051      	beq.n	408786 <memmove+0xb6>
  4086e2:	4622      	mov	r2, r4
  4086e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4086e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4086ec:	4299      	cmp	r1, r3
  4086ee:	d1f9      	bne.n	4086e4 <memmove+0x14>
  4086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4086f2:	2a0f      	cmp	r2, #15
  4086f4:	d948      	bls.n	408788 <memmove+0xb8>
  4086f6:	ea41 0300 	orr.w	r3, r1, r0
  4086fa:	079b      	lsls	r3, r3, #30
  4086fc:	d146      	bne.n	40878c <memmove+0xbc>
  4086fe:	f100 0410 	add.w	r4, r0, #16
  408702:	f101 0310 	add.w	r3, r1, #16
  408706:	4615      	mov	r5, r2
  408708:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40870c:	f844 6c10 	str.w	r6, [r4, #-16]
  408710:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408714:	f844 6c0c 	str.w	r6, [r4, #-12]
  408718:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40871c:	f844 6c08 	str.w	r6, [r4, #-8]
  408720:	3d10      	subs	r5, #16
  408722:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408726:	f844 6c04 	str.w	r6, [r4, #-4]
  40872a:	2d0f      	cmp	r5, #15
  40872c:	f103 0310 	add.w	r3, r3, #16
  408730:	f104 0410 	add.w	r4, r4, #16
  408734:	d8e8      	bhi.n	408708 <memmove+0x38>
  408736:	f1a2 0310 	sub.w	r3, r2, #16
  40873a:	f023 030f 	bic.w	r3, r3, #15
  40873e:	f002 0e0f 	and.w	lr, r2, #15
  408742:	3310      	adds	r3, #16
  408744:	f1be 0f03 	cmp.w	lr, #3
  408748:	4419      	add	r1, r3
  40874a:	4403      	add	r3, r0
  40874c:	d921      	bls.n	408792 <memmove+0xc2>
  40874e:	1f1e      	subs	r6, r3, #4
  408750:	460d      	mov	r5, r1
  408752:	4674      	mov	r4, lr
  408754:	3c04      	subs	r4, #4
  408756:	f855 7b04 	ldr.w	r7, [r5], #4
  40875a:	f846 7f04 	str.w	r7, [r6, #4]!
  40875e:	2c03      	cmp	r4, #3
  408760:	d8f8      	bhi.n	408754 <memmove+0x84>
  408762:	f1ae 0404 	sub.w	r4, lr, #4
  408766:	f024 0403 	bic.w	r4, r4, #3
  40876a:	3404      	adds	r4, #4
  40876c:	4421      	add	r1, r4
  40876e:	4423      	add	r3, r4
  408770:	f002 0203 	and.w	r2, r2, #3
  408774:	b162      	cbz	r2, 408790 <memmove+0xc0>
  408776:	3b01      	subs	r3, #1
  408778:	440a      	add	r2, r1
  40877a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40877e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408782:	428a      	cmp	r2, r1
  408784:	d1f9      	bne.n	40877a <memmove+0xaa>
  408786:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408788:	4603      	mov	r3, r0
  40878a:	e7f3      	b.n	408774 <memmove+0xa4>
  40878c:	4603      	mov	r3, r0
  40878e:	e7f2      	b.n	408776 <memmove+0xa6>
  408790:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408792:	4672      	mov	r2, lr
  408794:	e7ee      	b.n	408774 <memmove+0xa4>
  408796:	bf00      	nop

00408798 <_Balloc>:
  408798:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40879a:	b570      	push	{r4, r5, r6, lr}
  40879c:	4605      	mov	r5, r0
  40879e:	460c      	mov	r4, r1
  4087a0:	b14b      	cbz	r3, 4087b6 <_Balloc+0x1e>
  4087a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4087a6:	b180      	cbz	r0, 4087ca <_Balloc+0x32>
  4087a8:	6802      	ldr	r2, [r0, #0]
  4087aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4087ae:	2300      	movs	r3, #0
  4087b0:	6103      	str	r3, [r0, #16]
  4087b2:	60c3      	str	r3, [r0, #12]
  4087b4:	bd70      	pop	{r4, r5, r6, pc}
  4087b6:	2221      	movs	r2, #33	; 0x21
  4087b8:	2104      	movs	r1, #4
  4087ba:	f000 fe57 	bl	40946c <_calloc_r>
  4087be:	64e8      	str	r0, [r5, #76]	; 0x4c
  4087c0:	4603      	mov	r3, r0
  4087c2:	2800      	cmp	r0, #0
  4087c4:	d1ed      	bne.n	4087a2 <_Balloc+0xa>
  4087c6:	2000      	movs	r0, #0
  4087c8:	bd70      	pop	{r4, r5, r6, pc}
  4087ca:	2101      	movs	r1, #1
  4087cc:	fa01 f604 	lsl.w	r6, r1, r4
  4087d0:	1d72      	adds	r2, r6, #5
  4087d2:	4628      	mov	r0, r5
  4087d4:	0092      	lsls	r2, r2, #2
  4087d6:	f000 fe49 	bl	40946c <_calloc_r>
  4087da:	2800      	cmp	r0, #0
  4087dc:	d0f3      	beq.n	4087c6 <_Balloc+0x2e>
  4087de:	6044      	str	r4, [r0, #4]
  4087e0:	6086      	str	r6, [r0, #8]
  4087e2:	e7e4      	b.n	4087ae <_Balloc+0x16>

004087e4 <_Bfree>:
  4087e4:	b131      	cbz	r1, 4087f4 <_Bfree+0x10>
  4087e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4087e8:	684a      	ldr	r2, [r1, #4]
  4087ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4087ee:	6008      	str	r0, [r1, #0]
  4087f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4087f4:	4770      	bx	lr
  4087f6:	bf00      	nop

004087f8 <__multadd>:
  4087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4087fa:	690c      	ldr	r4, [r1, #16]
  4087fc:	b083      	sub	sp, #12
  4087fe:	460d      	mov	r5, r1
  408800:	4606      	mov	r6, r0
  408802:	f101 0e14 	add.w	lr, r1, #20
  408806:	2700      	movs	r7, #0
  408808:	f8de 0000 	ldr.w	r0, [lr]
  40880c:	b281      	uxth	r1, r0
  40880e:	fb02 3301 	mla	r3, r2, r1, r3
  408812:	0c01      	lsrs	r1, r0, #16
  408814:	0c18      	lsrs	r0, r3, #16
  408816:	fb02 0101 	mla	r1, r2, r1, r0
  40881a:	b29b      	uxth	r3, r3
  40881c:	3701      	adds	r7, #1
  40881e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  408822:	42bc      	cmp	r4, r7
  408824:	f84e 3b04 	str.w	r3, [lr], #4
  408828:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40882c:	dcec      	bgt.n	408808 <__multadd+0x10>
  40882e:	b13b      	cbz	r3, 408840 <__multadd+0x48>
  408830:	68aa      	ldr	r2, [r5, #8]
  408832:	4294      	cmp	r4, r2
  408834:	da07      	bge.n	408846 <__multadd+0x4e>
  408836:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40883a:	3401      	adds	r4, #1
  40883c:	6153      	str	r3, [r2, #20]
  40883e:	612c      	str	r4, [r5, #16]
  408840:	4628      	mov	r0, r5
  408842:	b003      	add	sp, #12
  408844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408846:	6869      	ldr	r1, [r5, #4]
  408848:	9301      	str	r3, [sp, #4]
  40884a:	3101      	adds	r1, #1
  40884c:	4630      	mov	r0, r6
  40884e:	f7ff ffa3 	bl	408798 <_Balloc>
  408852:	692a      	ldr	r2, [r5, #16]
  408854:	3202      	adds	r2, #2
  408856:	f105 010c 	add.w	r1, r5, #12
  40885a:	4607      	mov	r7, r0
  40885c:	0092      	lsls	r2, r2, #2
  40885e:	300c      	adds	r0, #12
  408860:	f7fb fc20 	bl	4040a4 <memcpy>
  408864:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408866:	6869      	ldr	r1, [r5, #4]
  408868:	9b01      	ldr	r3, [sp, #4]
  40886a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40886e:	6028      	str	r0, [r5, #0]
  408870:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408874:	463d      	mov	r5, r7
  408876:	e7de      	b.n	408836 <__multadd+0x3e>

00408878 <__hi0bits>:
  408878:	0c02      	lsrs	r2, r0, #16
  40887a:	0412      	lsls	r2, r2, #16
  40887c:	4603      	mov	r3, r0
  40887e:	b9b2      	cbnz	r2, 4088ae <__hi0bits+0x36>
  408880:	0403      	lsls	r3, r0, #16
  408882:	2010      	movs	r0, #16
  408884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408888:	bf04      	itt	eq
  40888a:	021b      	lsleq	r3, r3, #8
  40888c:	3008      	addeq	r0, #8
  40888e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408892:	bf04      	itt	eq
  408894:	011b      	lsleq	r3, r3, #4
  408896:	3004      	addeq	r0, #4
  408898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40889c:	bf04      	itt	eq
  40889e:	009b      	lsleq	r3, r3, #2
  4088a0:	3002      	addeq	r0, #2
  4088a2:	2b00      	cmp	r3, #0
  4088a4:	db02      	blt.n	4088ac <__hi0bits+0x34>
  4088a6:	005b      	lsls	r3, r3, #1
  4088a8:	d403      	bmi.n	4088b2 <__hi0bits+0x3a>
  4088aa:	2020      	movs	r0, #32
  4088ac:	4770      	bx	lr
  4088ae:	2000      	movs	r0, #0
  4088b0:	e7e8      	b.n	408884 <__hi0bits+0xc>
  4088b2:	3001      	adds	r0, #1
  4088b4:	4770      	bx	lr
  4088b6:	bf00      	nop

004088b8 <__lo0bits>:
  4088b8:	6803      	ldr	r3, [r0, #0]
  4088ba:	f013 0207 	ands.w	r2, r3, #7
  4088be:	4601      	mov	r1, r0
  4088c0:	d007      	beq.n	4088d2 <__lo0bits+0x1a>
  4088c2:	07da      	lsls	r2, r3, #31
  4088c4:	d421      	bmi.n	40890a <__lo0bits+0x52>
  4088c6:	0798      	lsls	r0, r3, #30
  4088c8:	d421      	bmi.n	40890e <__lo0bits+0x56>
  4088ca:	089b      	lsrs	r3, r3, #2
  4088cc:	600b      	str	r3, [r1, #0]
  4088ce:	2002      	movs	r0, #2
  4088d0:	4770      	bx	lr
  4088d2:	b298      	uxth	r0, r3
  4088d4:	b198      	cbz	r0, 4088fe <__lo0bits+0x46>
  4088d6:	4610      	mov	r0, r2
  4088d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4088dc:	bf04      	itt	eq
  4088de:	0a1b      	lsreq	r3, r3, #8
  4088e0:	3008      	addeq	r0, #8
  4088e2:	071a      	lsls	r2, r3, #28
  4088e4:	bf04      	itt	eq
  4088e6:	091b      	lsreq	r3, r3, #4
  4088e8:	3004      	addeq	r0, #4
  4088ea:	079a      	lsls	r2, r3, #30
  4088ec:	bf04      	itt	eq
  4088ee:	089b      	lsreq	r3, r3, #2
  4088f0:	3002      	addeq	r0, #2
  4088f2:	07da      	lsls	r2, r3, #31
  4088f4:	d407      	bmi.n	408906 <__lo0bits+0x4e>
  4088f6:	085b      	lsrs	r3, r3, #1
  4088f8:	d104      	bne.n	408904 <__lo0bits+0x4c>
  4088fa:	2020      	movs	r0, #32
  4088fc:	4770      	bx	lr
  4088fe:	0c1b      	lsrs	r3, r3, #16
  408900:	2010      	movs	r0, #16
  408902:	e7e9      	b.n	4088d8 <__lo0bits+0x20>
  408904:	3001      	adds	r0, #1
  408906:	600b      	str	r3, [r1, #0]
  408908:	4770      	bx	lr
  40890a:	2000      	movs	r0, #0
  40890c:	4770      	bx	lr
  40890e:	085b      	lsrs	r3, r3, #1
  408910:	600b      	str	r3, [r1, #0]
  408912:	2001      	movs	r0, #1
  408914:	4770      	bx	lr
  408916:	bf00      	nop

00408918 <__i2b>:
  408918:	b510      	push	{r4, lr}
  40891a:	460c      	mov	r4, r1
  40891c:	2101      	movs	r1, #1
  40891e:	f7ff ff3b 	bl	408798 <_Balloc>
  408922:	2201      	movs	r2, #1
  408924:	6144      	str	r4, [r0, #20]
  408926:	6102      	str	r2, [r0, #16]
  408928:	bd10      	pop	{r4, pc}
  40892a:	bf00      	nop

0040892c <__multiply>:
  40892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408930:	690c      	ldr	r4, [r1, #16]
  408932:	6915      	ldr	r5, [r2, #16]
  408934:	42ac      	cmp	r4, r5
  408936:	b083      	sub	sp, #12
  408938:	468b      	mov	fp, r1
  40893a:	4616      	mov	r6, r2
  40893c:	da04      	bge.n	408948 <__multiply+0x1c>
  40893e:	4622      	mov	r2, r4
  408940:	46b3      	mov	fp, r6
  408942:	462c      	mov	r4, r5
  408944:	460e      	mov	r6, r1
  408946:	4615      	mov	r5, r2
  408948:	f8db 3008 	ldr.w	r3, [fp, #8]
  40894c:	f8db 1004 	ldr.w	r1, [fp, #4]
  408950:	eb04 0805 	add.w	r8, r4, r5
  408954:	4598      	cmp	r8, r3
  408956:	bfc8      	it	gt
  408958:	3101      	addgt	r1, #1
  40895a:	f7ff ff1d 	bl	408798 <_Balloc>
  40895e:	f100 0914 	add.w	r9, r0, #20
  408962:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408966:	45d1      	cmp	r9, sl
  408968:	9000      	str	r0, [sp, #0]
  40896a:	d205      	bcs.n	408978 <__multiply+0x4c>
  40896c:	464b      	mov	r3, r9
  40896e:	2100      	movs	r1, #0
  408970:	f843 1b04 	str.w	r1, [r3], #4
  408974:	459a      	cmp	sl, r3
  408976:	d8fb      	bhi.n	408970 <__multiply+0x44>
  408978:	f106 0c14 	add.w	ip, r6, #20
  40897c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408980:	f10b 0b14 	add.w	fp, fp, #20
  408984:	459c      	cmp	ip, r3
  408986:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40898a:	d24c      	bcs.n	408a26 <__multiply+0xfa>
  40898c:	f8cd a004 	str.w	sl, [sp, #4]
  408990:	469a      	mov	sl, r3
  408992:	f8dc 5000 	ldr.w	r5, [ip]
  408996:	b2af      	uxth	r7, r5
  408998:	b1ef      	cbz	r7, 4089d6 <__multiply+0xaa>
  40899a:	2100      	movs	r1, #0
  40899c:	464d      	mov	r5, r9
  40899e:	465e      	mov	r6, fp
  4089a0:	460c      	mov	r4, r1
  4089a2:	f856 2b04 	ldr.w	r2, [r6], #4
  4089a6:	6828      	ldr	r0, [r5, #0]
  4089a8:	b293      	uxth	r3, r2
  4089aa:	b281      	uxth	r1, r0
  4089ac:	fb07 1303 	mla	r3, r7, r3, r1
  4089b0:	0c12      	lsrs	r2, r2, #16
  4089b2:	0c01      	lsrs	r1, r0, #16
  4089b4:	4423      	add	r3, r4
  4089b6:	fb07 1102 	mla	r1, r7, r2, r1
  4089ba:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4089be:	b29b      	uxth	r3, r3
  4089c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4089c4:	45b6      	cmp	lr, r6
  4089c6:	f845 3b04 	str.w	r3, [r5], #4
  4089ca:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4089ce:	d8e8      	bhi.n	4089a2 <__multiply+0x76>
  4089d0:	602c      	str	r4, [r5, #0]
  4089d2:	f8dc 5000 	ldr.w	r5, [ip]
  4089d6:	0c2d      	lsrs	r5, r5, #16
  4089d8:	d01d      	beq.n	408a16 <__multiply+0xea>
  4089da:	f8d9 3000 	ldr.w	r3, [r9]
  4089de:	4648      	mov	r0, r9
  4089e0:	461c      	mov	r4, r3
  4089e2:	4659      	mov	r1, fp
  4089e4:	2200      	movs	r2, #0
  4089e6:	880e      	ldrh	r6, [r1, #0]
  4089e8:	0c24      	lsrs	r4, r4, #16
  4089ea:	fb05 4406 	mla	r4, r5, r6, r4
  4089ee:	4422      	add	r2, r4
  4089f0:	b29b      	uxth	r3, r3
  4089f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4089f6:	f840 3b04 	str.w	r3, [r0], #4
  4089fa:	f851 3b04 	ldr.w	r3, [r1], #4
  4089fe:	6804      	ldr	r4, [r0, #0]
  408a00:	0c1b      	lsrs	r3, r3, #16
  408a02:	b2a6      	uxth	r6, r4
  408a04:	fb05 6303 	mla	r3, r5, r3, r6
  408a08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  408a0c:	458e      	cmp	lr, r1
  408a0e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408a12:	d8e8      	bhi.n	4089e6 <__multiply+0xba>
  408a14:	6003      	str	r3, [r0, #0]
  408a16:	f10c 0c04 	add.w	ip, ip, #4
  408a1a:	45e2      	cmp	sl, ip
  408a1c:	f109 0904 	add.w	r9, r9, #4
  408a20:	d8b7      	bhi.n	408992 <__multiply+0x66>
  408a22:	f8dd a004 	ldr.w	sl, [sp, #4]
  408a26:	f1b8 0f00 	cmp.w	r8, #0
  408a2a:	dd0b      	ble.n	408a44 <__multiply+0x118>
  408a2c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408a30:	f1aa 0a04 	sub.w	sl, sl, #4
  408a34:	b11b      	cbz	r3, 408a3e <__multiply+0x112>
  408a36:	e005      	b.n	408a44 <__multiply+0x118>
  408a38:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  408a3c:	b913      	cbnz	r3, 408a44 <__multiply+0x118>
  408a3e:	f1b8 0801 	subs.w	r8, r8, #1
  408a42:	d1f9      	bne.n	408a38 <__multiply+0x10c>
  408a44:	9800      	ldr	r0, [sp, #0]
  408a46:	f8c0 8010 	str.w	r8, [r0, #16]
  408a4a:	b003      	add	sp, #12
  408a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408a50 <__pow5mult>:
  408a50:	f012 0303 	ands.w	r3, r2, #3
  408a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408a58:	4614      	mov	r4, r2
  408a5a:	4607      	mov	r7, r0
  408a5c:	d12e      	bne.n	408abc <__pow5mult+0x6c>
  408a5e:	460d      	mov	r5, r1
  408a60:	10a4      	asrs	r4, r4, #2
  408a62:	d01c      	beq.n	408a9e <__pow5mult+0x4e>
  408a64:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408a66:	b396      	cbz	r6, 408ace <__pow5mult+0x7e>
  408a68:	07e3      	lsls	r3, r4, #31
  408a6a:	f04f 0800 	mov.w	r8, #0
  408a6e:	d406      	bmi.n	408a7e <__pow5mult+0x2e>
  408a70:	1064      	asrs	r4, r4, #1
  408a72:	d014      	beq.n	408a9e <__pow5mult+0x4e>
  408a74:	6830      	ldr	r0, [r6, #0]
  408a76:	b1a8      	cbz	r0, 408aa4 <__pow5mult+0x54>
  408a78:	4606      	mov	r6, r0
  408a7a:	07e3      	lsls	r3, r4, #31
  408a7c:	d5f8      	bpl.n	408a70 <__pow5mult+0x20>
  408a7e:	4632      	mov	r2, r6
  408a80:	4629      	mov	r1, r5
  408a82:	4638      	mov	r0, r7
  408a84:	f7ff ff52 	bl	40892c <__multiply>
  408a88:	b1b5      	cbz	r5, 408ab8 <__pow5mult+0x68>
  408a8a:	686a      	ldr	r2, [r5, #4]
  408a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408a8e:	1064      	asrs	r4, r4, #1
  408a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408a94:	6029      	str	r1, [r5, #0]
  408a96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408a9a:	4605      	mov	r5, r0
  408a9c:	d1ea      	bne.n	408a74 <__pow5mult+0x24>
  408a9e:	4628      	mov	r0, r5
  408aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408aa4:	4632      	mov	r2, r6
  408aa6:	4631      	mov	r1, r6
  408aa8:	4638      	mov	r0, r7
  408aaa:	f7ff ff3f 	bl	40892c <__multiply>
  408aae:	6030      	str	r0, [r6, #0]
  408ab0:	f8c0 8000 	str.w	r8, [r0]
  408ab4:	4606      	mov	r6, r0
  408ab6:	e7e0      	b.n	408a7a <__pow5mult+0x2a>
  408ab8:	4605      	mov	r5, r0
  408aba:	e7d9      	b.n	408a70 <__pow5mult+0x20>
  408abc:	1e5a      	subs	r2, r3, #1
  408abe:	4d0b      	ldr	r5, [pc, #44]	; (408aec <__pow5mult+0x9c>)
  408ac0:	2300      	movs	r3, #0
  408ac2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408ac6:	f7ff fe97 	bl	4087f8 <__multadd>
  408aca:	4605      	mov	r5, r0
  408acc:	e7c8      	b.n	408a60 <__pow5mult+0x10>
  408ace:	2101      	movs	r1, #1
  408ad0:	4638      	mov	r0, r7
  408ad2:	f7ff fe61 	bl	408798 <_Balloc>
  408ad6:	f240 2171 	movw	r1, #625	; 0x271
  408ada:	2201      	movs	r2, #1
  408adc:	2300      	movs	r3, #0
  408ade:	6141      	str	r1, [r0, #20]
  408ae0:	6102      	str	r2, [r0, #16]
  408ae2:	4606      	mov	r6, r0
  408ae4:	64b8      	str	r0, [r7, #72]	; 0x48
  408ae6:	6003      	str	r3, [r0, #0]
  408ae8:	e7be      	b.n	408a68 <__pow5mult+0x18>
  408aea:	bf00      	nop
  408aec:	0040a6a8 	.word	0x0040a6a8

00408af0 <__lshift>:
  408af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408af4:	4691      	mov	r9, r2
  408af6:	690a      	ldr	r2, [r1, #16]
  408af8:	688b      	ldr	r3, [r1, #8]
  408afa:	ea4f 1469 	mov.w	r4, r9, asr #5
  408afe:	eb04 0802 	add.w	r8, r4, r2
  408b02:	f108 0501 	add.w	r5, r8, #1
  408b06:	429d      	cmp	r5, r3
  408b08:	460e      	mov	r6, r1
  408b0a:	4607      	mov	r7, r0
  408b0c:	6849      	ldr	r1, [r1, #4]
  408b0e:	dd04      	ble.n	408b1a <__lshift+0x2a>
  408b10:	005b      	lsls	r3, r3, #1
  408b12:	429d      	cmp	r5, r3
  408b14:	f101 0101 	add.w	r1, r1, #1
  408b18:	dcfa      	bgt.n	408b10 <__lshift+0x20>
  408b1a:	4638      	mov	r0, r7
  408b1c:	f7ff fe3c 	bl	408798 <_Balloc>
  408b20:	2c00      	cmp	r4, #0
  408b22:	f100 0314 	add.w	r3, r0, #20
  408b26:	dd06      	ble.n	408b36 <__lshift+0x46>
  408b28:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  408b2c:	2100      	movs	r1, #0
  408b2e:	f843 1b04 	str.w	r1, [r3], #4
  408b32:	429a      	cmp	r2, r3
  408b34:	d1fb      	bne.n	408b2e <__lshift+0x3e>
  408b36:	6934      	ldr	r4, [r6, #16]
  408b38:	f106 0114 	add.w	r1, r6, #20
  408b3c:	f019 091f 	ands.w	r9, r9, #31
  408b40:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408b44:	d01d      	beq.n	408b82 <__lshift+0x92>
  408b46:	f1c9 0c20 	rsb	ip, r9, #32
  408b4a:	2200      	movs	r2, #0
  408b4c:	680c      	ldr	r4, [r1, #0]
  408b4e:	fa04 f409 	lsl.w	r4, r4, r9
  408b52:	4314      	orrs	r4, r2
  408b54:	f843 4b04 	str.w	r4, [r3], #4
  408b58:	f851 2b04 	ldr.w	r2, [r1], #4
  408b5c:	458e      	cmp	lr, r1
  408b5e:	fa22 f20c 	lsr.w	r2, r2, ip
  408b62:	d8f3      	bhi.n	408b4c <__lshift+0x5c>
  408b64:	601a      	str	r2, [r3, #0]
  408b66:	b10a      	cbz	r2, 408b6c <__lshift+0x7c>
  408b68:	f108 0502 	add.w	r5, r8, #2
  408b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408b6e:	6872      	ldr	r2, [r6, #4]
  408b70:	3d01      	subs	r5, #1
  408b72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408b76:	6105      	str	r5, [r0, #16]
  408b78:	6031      	str	r1, [r6, #0]
  408b7a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408b82:	3b04      	subs	r3, #4
  408b84:	f851 2b04 	ldr.w	r2, [r1], #4
  408b88:	f843 2f04 	str.w	r2, [r3, #4]!
  408b8c:	458e      	cmp	lr, r1
  408b8e:	d8f9      	bhi.n	408b84 <__lshift+0x94>
  408b90:	e7ec      	b.n	408b6c <__lshift+0x7c>
  408b92:	bf00      	nop

00408b94 <__mcmp>:
  408b94:	b430      	push	{r4, r5}
  408b96:	690b      	ldr	r3, [r1, #16]
  408b98:	4605      	mov	r5, r0
  408b9a:	6900      	ldr	r0, [r0, #16]
  408b9c:	1ac0      	subs	r0, r0, r3
  408b9e:	d10f      	bne.n	408bc0 <__mcmp+0x2c>
  408ba0:	009b      	lsls	r3, r3, #2
  408ba2:	3514      	adds	r5, #20
  408ba4:	3114      	adds	r1, #20
  408ba6:	4419      	add	r1, r3
  408ba8:	442b      	add	r3, r5
  408baa:	e001      	b.n	408bb0 <__mcmp+0x1c>
  408bac:	429d      	cmp	r5, r3
  408bae:	d207      	bcs.n	408bc0 <__mcmp+0x2c>
  408bb0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408bb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408bb8:	4294      	cmp	r4, r2
  408bba:	d0f7      	beq.n	408bac <__mcmp+0x18>
  408bbc:	d302      	bcc.n	408bc4 <__mcmp+0x30>
  408bbe:	2001      	movs	r0, #1
  408bc0:	bc30      	pop	{r4, r5}
  408bc2:	4770      	bx	lr
  408bc4:	f04f 30ff 	mov.w	r0, #4294967295
  408bc8:	e7fa      	b.n	408bc0 <__mcmp+0x2c>
  408bca:	bf00      	nop

00408bcc <__mdiff>:
  408bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bd0:	690f      	ldr	r7, [r1, #16]
  408bd2:	460e      	mov	r6, r1
  408bd4:	6911      	ldr	r1, [r2, #16]
  408bd6:	1a7f      	subs	r7, r7, r1
  408bd8:	2f00      	cmp	r7, #0
  408bda:	4690      	mov	r8, r2
  408bdc:	d117      	bne.n	408c0e <__mdiff+0x42>
  408bde:	0089      	lsls	r1, r1, #2
  408be0:	f106 0514 	add.w	r5, r6, #20
  408be4:	f102 0e14 	add.w	lr, r2, #20
  408be8:	186b      	adds	r3, r5, r1
  408bea:	4471      	add	r1, lr
  408bec:	e001      	b.n	408bf2 <__mdiff+0x26>
  408bee:	429d      	cmp	r5, r3
  408bf0:	d25c      	bcs.n	408cac <__mdiff+0xe0>
  408bf2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408bf6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  408bfa:	42a2      	cmp	r2, r4
  408bfc:	d0f7      	beq.n	408bee <__mdiff+0x22>
  408bfe:	d25e      	bcs.n	408cbe <__mdiff+0xf2>
  408c00:	4633      	mov	r3, r6
  408c02:	462c      	mov	r4, r5
  408c04:	4646      	mov	r6, r8
  408c06:	4675      	mov	r5, lr
  408c08:	4698      	mov	r8, r3
  408c0a:	2701      	movs	r7, #1
  408c0c:	e005      	b.n	408c1a <__mdiff+0x4e>
  408c0e:	db58      	blt.n	408cc2 <__mdiff+0xf6>
  408c10:	f106 0514 	add.w	r5, r6, #20
  408c14:	f108 0414 	add.w	r4, r8, #20
  408c18:	2700      	movs	r7, #0
  408c1a:	6871      	ldr	r1, [r6, #4]
  408c1c:	f7ff fdbc 	bl	408798 <_Balloc>
  408c20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408c24:	6936      	ldr	r6, [r6, #16]
  408c26:	60c7      	str	r7, [r0, #12]
  408c28:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  408c2c:	46a6      	mov	lr, r4
  408c2e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408c32:	f100 0414 	add.w	r4, r0, #20
  408c36:	2300      	movs	r3, #0
  408c38:	f85e 1b04 	ldr.w	r1, [lr], #4
  408c3c:	f855 8b04 	ldr.w	r8, [r5], #4
  408c40:	b28a      	uxth	r2, r1
  408c42:	fa13 f388 	uxtah	r3, r3, r8
  408c46:	0c09      	lsrs	r1, r1, #16
  408c48:	1a9a      	subs	r2, r3, r2
  408c4a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408c4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408c52:	b292      	uxth	r2, r2
  408c54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408c58:	45f4      	cmp	ip, lr
  408c5a:	f844 2b04 	str.w	r2, [r4], #4
  408c5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408c62:	d8e9      	bhi.n	408c38 <__mdiff+0x6c>
  408c64:	42af      	cmp	r7, r5
  408c66:	d917      	bls.n	408c98 <__mdiff+0xcc>
  408c68:	46a4      	mov	ip, r4
  408c6a:	46ae      	mov	lr, r5
  408c6c:	f85e 2b04 	ldr.w	r2, [lr], #4
  408c70:	fa13 f382 	uxtah	r3, r3, r2
  408c74:	1419      	asrs	r1, r3, #16
  408c76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  408c7a:	b29b      	uxth	r3, r3
  408c7c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408c80:	4577      	cmp	r7, lr
  408c82:	f84c 2b04 	str.w	r2, [ip], #4
  408c86:	ea4f 4321 	mov.w	r3, r1, asr #16
  408c8a:	d8ef      	bhi.n	408c6c <__mdiff+0xa0>
  408c8c:	43ed      	mvns	r5, r5
  408c8e:	442f      	add	r7, r5
  408c90:	f027 0703 	bic.w	r7, r7, #3
  408c94:	3704      	adds	r7, #4
  408c96:	443c      	add	r4, r7
  408c98:	3c04      	subs	r4, #4
  408c9a:	b922      	cbnz	r2, 408ca6 <__mdiff+0xda>
  408c9c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408ca0:	3e01      	subs	r6, #1
  408ca2:	2b00      	cmp	r3, #0
  408ca4:	d0fa      	beq.n	408c9c <__mdiff+0xd0>
  408ca6:	6106      	str	r6, [r0, #16]
  408ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408cac:	2100      	movs	r1, #0
  408cae:	f7ff fd73 	bl	408798 <_Balloc>
  408cb2:	2201      	movs	r2, #1
  408cb4:	2300      	movs	r3, #0
  408cb6:	6102      	str	r2, [r0, #16]
  408cb8:	6143      	str	r3, [r0, #20]
  408cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408cbe:	4674      	mov	r4, lr
  408cc0:	e7ab      	b.n	408c1a <__mdiff+0x4e>
  408cc2:	4633      	mov	r3, r6
  408cc4:	f106 0414 	add.w	r4, r6, #20
  408cc8:	f102 0514 	add.w	r5, r2, #20
  408ccc:	4616      	mov	r6, r2
  408cce:	2701      	movs	r7, #1
  408cd0:	4698      	mov	r8, r3
  408cd2:	e7a2      	b.n	408c1a <__mdiff+0x4e>

00408cd4 <__d2b>:
  408cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408cd8:	b082      	sub	sp, #8
  408cda:	2101      	movs	r1, #1
  408cdc:	461c      	mov	r4, r3
  408cde:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408ce2:	4615      	mov	r5, r2
  408ce4:	9e08      	ldr	r6, [sp, #32]
  408ce6:	f7ff fd57 	bl	408798 <_Balloc>
  408cea:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408cee:	4680      	mov	r8, r0
  408cf0:	b10f      	cbz	r7, 408cf6 <__d2b+0x22>
  408cf2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408cf6:	9401      	str	r4, [sp, #4]
  408cf8:	b31d      	cbz	r5, 408d42 <__d2b+0x6e>
  408cfa:	a802      	add	r0, sp, #8
  408cfc:	f840 5d08 	str.w	r5, [r0, #-8]!
  408d00:	f7ff fdda 	bl	4088b8 <__lo0bits>
  408d04:	2800      	cmp	r0, #0
  408d06:	d134      	bne.n	408d72 <__d2b+0x9e>
  408d08:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408d0c:	f8c8 2014 	str.w	r2, [r8, #20]
  408d10:	2b00      	cmp	r3, #0
  408d12:	bf0c      	ite	eq
  408d14:	2101      	moveq	r1, #1
  408d16:	2102      	movne	r1, #2
  408d18:	f8c8 3018 	str.w	r3, [r8, #24]
  408d1c:	f8c8 1010 	str.w	r1, [r8, #16]
  408d20:	b9df      	cbnz	r7, 408d5a <__d2b+0x86>
  408d22:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408d26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408d2a:	6030      	str	r0, [r6, #0]
  408d2c:	6918      	ldr	r0, [r3, #16]
  408d2e:	f7ff fda3 	bl	408878 <__hi0bits>
  408d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408d38:	6018      	str	r0, [r3, #0]
  408d3a:	4640      	mov	r0, r8
  408d3c:	b002      	add	sp, #8
  408d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408d42:	a801      	add	r0, sp, #4
  408d44:	f7ff fdb8 	bl	4088b8 <__lo0bits>
  408d48:	9b01      	ldr	r3, [sp, #4]
  408d4a:	f8c8 3014 	str.w	r3, [r8, #20]
  408d4e:	2101      	movs	r1, #1
  408d50:	3020      	adds	r0, #32
  408d52:	f8c8 1010 	str.w	r1, [r8, #16]
  408d56:	2f00      	cmp	r7, #0
  408d58:	d0e3      	beq.n	408d22 <__d2b+0x4e>
  408d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d5c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408d60:	4407      	add	r7, r0
  408d62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408d66:	6037      	str	r7, [r6, #0]
  408d68:	6018      	str	r0, [r3, #0]
  408d6a:	4640      	mov	r0, r8
  408d6c:	b002      	add	sp, #8
  408d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408d72:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408d76:	f1c0 0220 	rsb	r2, r0, #32
  408d7a:	fa03 f202 	lsl.w	r2, r3, r2
  408d7e:	430a      	orrs	r2, r1
  408d80:	40c3      	lsrs	r3, r0
  408d82:	9301      	str	r3, [sp, #4]
  408d84:	f8c8 2014 	str.w	r2, [r8, #20]
  408d88:	e7c2      	b.n	408d10 <__d2b+0x3c>
  408d8a:	bf00      	nop

00408d8c <_realloc_r>:
  408d8c:	2900      	cmp	r1, #0
  408d8e:	f000 8095 	beq.w	408ebc <_realloc_r+0x130>
  408d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d96:	460d      	mov	r5, r1
  408d98:	4616      	mov	r6, r2
  408d9a:	b083      	sub	sp, #12
  408d9c:	4680      	mov	r8, r0
  408d9e:	f106 070b 	add.w	r7, r6, #11
  408da2:	f7fb fa67 	bl	404274 <__malloc_lock>
  408da6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408daa:	2f16      	cmp	r7, #22
  408dac:	f02e 0403 	bic.w	r4, lr, #3
  408db0:	f1a5 0908 	sub.w	r9, r5, #8
  408db4:	d83c      	bhi.n	408e30 <_realloc_r+0xa4>
  408db6:	2210      	movs	r2, #16
  408db8:	4617      	mov	r7, r2
  408dba:	42be      	cmp	r6, r7
  408dbc:	d83d      	bhi.n	408e3a <_realloc_r+0xae>
  408dbe:	4294      	cmp	r4, r2
  408dc0:	da43      	bge.n	408e4a <_realloc_r+0xbe>
  408dc2:	4bc4      	ldr	r3, [pc, #784]	; (4090d4 <_realloc_r+0x348>)
  408dc4:	6899      	ldr	r1, [r3, #8]
  408dc6:	eb09 0004 	add.w	r0, r9, r4
  408dca:	4288      	cmp	r0, r1
  408dcc:	f000 80b4 	beq.w	408f38 <_realloc_r+0x1ac>
  408dd0:	6843      	ldr	r3, [r0, #4]
  408dd2:	f023 0101 	bic.w	r1, r3, #1
  408dd6:	4401      	add	r1, r0
  408dd8:	6849      	ldr	r1, [r1, #4]
  408dda:	07c9      	lsls	r1, r1, #31
  408ddc:	d54c      	bpl.n	408e78 <_realloc_r+0xec>
  408dde:	f01e 0f01 	tst.w	lr, #1
  408de2:	f000 809b 	beq.w	408f1c <_realloc_r+0x190>
  408de6:	4631      	mov	r1, r6
  408de8:	4640      	mov	r0, r8
  408dea:	f7fa feab 	bl	403b44 <_malloc_r>
  408dee:	4606      	mov	r6, r0
  408df0:	2800      	cmp	r0, #0
  408df2:	d03a      	beq.n	408e6a <_realloc_r+0xde>
  408df4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408df8:	f023 0301 	bic.w	r3, r3, #1
  408dfc:	444b      	add	r3, r9
  408dfe:	f1a0 0208 	sub.w	r2, r0, #8
  408e02:	429a      	cmp	r2, r3
  408e04:	f000 8121 	beq.w	40904a <_realloc_r+0x2be>
  408e08:	1f22      	subs	r2, r4, #4
  408e0a:	2a24      	cmp	r2, #36	; 0x24
  408e0c:	f200 8107 	bhi.w	40901e <_realloc_r+0x292>
  408e10:	2a13      	cmp	r2, #19
  408e12:	f200 80db 	bhi.w	408fcc <_realloc_r+0x240>
  408e16:	4603      	mov	r3, r0
  408e18:	462a      	mov	r2, r5
  408e1a:	6811      	ldr	r1, [r2, #0]
  408e1c:	6019      	str	r1, [r3, #0]
  408e1e:	6851      	ldr	r1, [r2, #4]
  408e20:	6059      	str	r1, [r3, #4]
  408e22:	6892      	ldr	r2, [r2, #8]
  408e24:	609a      	str	r2, [r3, #8]
  408e26:	4629      	mov	r1, r5
  408e28:	4640      	mov	r0, r8
  408e2a:	f7ff f8c1 	bl	407fb0 <_free_r>
  408e2e:	e01c      	b.n	408e6a <_realloc_r+0xde>
  408e30:	f027 0707 	bic.w	r7, r7, #7
  408e34:	2f00      	cmp	r7, #0
  408e36:	463a      	mov	r2, r7
  408e38:	dabf      	bge.n	408dba <_realloc_r+0x2e>
  408e3a:	2600      	movs	r6, #0
  408e3c:	230c      	movs	r3, #12
  408e3e:	4630      	mov	r0, r6
  408e40:	f8c8 3000 	str.w	r3, [r8]
  408e44:	b003      	add	sp, #12
  408e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e4a:	462e      	mov	r6, r5
  408e4c:	1be3      	subs	r3, r4, r7
  408e4e:	2b0f      	cmp	r3, #15
  408e50:	d81e      	bhi.n	408e90 <_realloc_r+0x104>
  408e52:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408e56:	f003 0301 	and.w	r3, r3, #1
  408e5a:	4323      	orrs	r3, r4
  408e5c:	444c      	add	r4, r9
  408e5e:	f8c9 3004 	str.w	r3, [r9, #4]
  408e62:	6863      	ldr	r3, [r4, #4]
  408e64:	f043 0301 	orr.w	r3, r3, #1
  408e68:	6063      	str	r3, [r4, #4]
  408e6a:	4640      	mov	r0, r8
  408e6c:	f7fb fa08 	bl	404280 <__malloc_unlock>
  408e70:	4630      	mov	r0, r6
  408e72:	b003      	add	sp, #12
  408e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e78:	f023 0303 	bic.w	r3, r3, #3
  408e7c:	18e1      	adds	r1, r4, r3
  408e7e:	4291      	cmp	r1, r2
  408e80:	db1f      	blt.n	408ec2 <_realloc_r+0x136>
  408e82:	68c3      	ldr	r3, [r0, #12]
  408e84:	6882      	ldr	r2, [r0, #8]
  408e86:	462e      	mov	r6, r5
  408e88:	60d3      	str	r3, [r2, #12]
  408e8a:	460c      	mov	r4, r1
  408e8c:	609a      	str	r2, [r3, #8]
  408e8e:	e7dd      	b.n	408e4c <_realloc_r+0xc0>
  408e90:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408e94:	eb09 0107 	add.w	r1, r9, r7
  408e98:	f002 0201 	and.w	r2, r2, #1
  408e9c:	444c      	add	r4, r9
  408e9e:	f043 0301 	orr.w	r3, r3, #1
  408ea2:	4317      	orrs	r7, r2
  408ea4:	f8c9 7004 	str.w	r7, [r9, #4]
  408ea8:	604b      	str	r3, [r1, #4]
  408eaa:	6863      	ldr	r3, [r4, #4]
  408eac:	f043 0301 	orr.w	r3, r3, #1
  408eb0:	3108      	adds	r1, #8
  408eb2:	6063      	str	r3, [r4, #4]
  408eb4:	4640      	mov	r0, r8
  408eb6:	f7ff f87b 	bl	407fb0 <_free_r>
  408eba:	e7d6      	b.n	408e6a <_realloc_r+0xde>
  408ebc:	4611      	mov	r1, r2
  408ebe:	f7fa be41 	b.w	403b44 <_malloc_r>
  408ec2:	f01e 0f01 	tst.w	lr, #1
  408ec6:	d18e      	bne.n	408de6 <_realloc_r+0x5a>
  408ec8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408ecc:	eba9 0a01 	sub.w	sl, r9, r1
  408ed0:	f8da 1004 	ldr.w	r1, [sl, #4]
  408ed4:	f021 0103 	bic.w	r1, r1, #3
  408ed8:	440b      	add	r3, r1
  408eda:	4423      	add	r3, r4
  408edc:	4293      	cmp	r3, r2
  408ede:	db25      	blt.n	408f2c <_realloc_r+0x1a0>
  408ee0:	68c2      	ldr	r2, [r0, #12]
  408ee2:	6881      	ldr	r1, [r0, #8]
  408ee4:	4656      	mov	r6, sl
  408ee6:	60ca      	str	r2, [r1, #12]
  408ee8:	6091      	str	r1, [r2, #8]
  408eea:	f8da 100c 	ldr.w	r1, [sl, #12]
  408eee:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408ef2:	1f22      	subs	r2, r4, #4
  408ef4:	2a24      	cmp	r2, #36	; 0x24
  408ef6:	60c1      	str	r1, [r0, #12]
  408ef8:	6088      	str	r0, [r1, #8]
  408efa:	f200 8094 	bhi.w	409026 <_realloc_r+0x29a>
  408efe:	2a13      	cmp	r2, #19
  408f00:	d96f      	bls.n	408fe2 <_realloc_r+0x256>
  408f02:	6829      	ldr	r1, [r5, #0]
  408f04:	f8ca 1008 	str.w	r1, [sl, #8]
  408f08:	6869      	ldr	r1, [r5, #4]
  408f0a:	f8ca 100c 	str.w	r1, [sl, #12]
  408f0e:	2a1b      	cmp	r2, #27
  408f10:	f200 80a2 	bhi.w	409058 <_realloc_r+0x2cc>
  408f14:	3508      	adds	r5, #8
  408f16:	f10a 0210 	add.w	r2, sl, #16
  408f1a:	e063      	b.n	408fe4 <_realloc_r+0x258>
  408f1c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408f20:	eba9 0a03 	sub.w	sl, r9, r3
  408f24:	f8da 1004 	ldr.w	r1, [sl, #4]
  408f28:	f021 0103 	bic.w	r1, r1, #3
  408f2c:	1863      	adds	r3, r4, r1
  408f2e:	4293      	cmp	r3, r2
  408f30:	f6ff af59 	blt.w	408de6 <_realloc_r+0x5a>
  408f34:	4656      	mov	r6, sl
  408f36:	e7d8      	b.n	408eea <_realloc_r+0x15e>
  408f38:	6841      	ldr	r1, [r0, #4]
  408f3a:	f021 0b03 	bic.w	fp, r1, #3
  408f3e:	44a3      	add	fp, r4
  408f40:	f107 0010 	add.w	r0, r7, #16
  408f44:	4583      	cmp	fp, r0
  408f46:	da56      	bge.n	408ff6 <_realloc_r+0x26a>
  408f48:	f01e 0f01 	tst.w	lr, #1
  408f4c:	f47f af4b 	bne.w	408de6 <_realloc_r+0x5a>
  408f50:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408f54:	eba9 0a01 	sub.w	sl, r9, r1
  408f58:	f8da 1004 	ldr.w	r1, [sl, #4]
  408f5c:	f021 0103 	bic.w	r1, r1, #3
  408f60:	448b      	add	fp, r1
  408f62:	4558      	cmp	r0, fp
  408f64:	dce2      	bgt.n	408f2c <_realloc_r+0x1a0>
  408f66:	4656      	mov	r6, sl
  408f68:	f8da 100c 	ldr.w	r1, [sl, #12]
  408f6c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408f70:	1f22      	subs	r2, r4, #4
  408f72:	2a24      	cmp	r2, #36	; 0x24
  408f74:	60c1      	str	r1, [r0, #12]
  408f76:	6088      	str	r0, [r1, #8]
  408f78:	f200 808f 	bhi.w	40909a <_realloc_r+0x30e>
  408f7c:	2a13      	cmp	r2, #19
  408f7e:	f240 808a 	bls.w	409096 <_realloc_r+0x30a>
  408f82:	6829      	ldr	r1, [r5, #0]
  408f84:	f8ca 1008 	str.w	r1, [sl, #8]
  408f88:	6869      	ldr	r1, [r5, #4]
  408f8a:	f8ca 100c 	str.w	r1, [sl, #12]
  408f8e:	2a1b      	cmp	r2, #27
  408f90:	f200 808a 	bhi.w	4090a8 <_realloc_r+0x31c>
  408f94:	3508      	adds	r5, #8
  408f96:	f10a 0210 	add.w	r2, sl, #16
  408f9a:	6829      	ldr	r1, [r5, #0]
  408f9c:	6011      	str	r1, [r2, #0]
  408f9e:	6869      	ldr	r1, [r5, #4]
  408fa0:	6051      	str	r1, [r2, #4]
  408fa2:	68a9      	ldr	r1, [r5, #8]
  408fa4:	6091      	str	r1, [r2, #8]
  408fa6:	eb0a 0107 	add.w	r1, sl, r7
  408faa:	ebab 0207 	sub.w	r2, fp, r7
  408fae:	f042 0201 	orr.w	r2, r2, #1
  408fb2:	6099      	str	r1, [r3, #8]
  408fb4:	604a      	str	r2, [r1, #4]
  408fb6:	f8da 3004 	ldr.w	r3, [sl, #4]
  408fba:	f003 0301 	and.w	r3, r3, #1
  408fbe:	431f      	orrs	r7, r3
  408fc0:	4640      	mov	r0, r8
  408fc2:	f8ca 7004 	str.w	r7, [sl, #4]
  408fc6:	f7fb f95b 	bl	404280 <__malloc_unlock>
  408fca:	e751      	b.n	408e70 <_realloc_r+0xe4>
  408fcc:	682b      	ldr	r3, [r5, #0]
  408fce:	6003      	str	r3, [r0, #0]
  408fd0:	686b      	ldr	r3, [r5, #4]
  408fd2:	6043      	str	r3, [r0, #4]
  408fd4:	2a1b      	cmp	r2, #27
  408fd6:	d82d      	bhi.n	409034 <_realloc_r+0x2a8>
  408fd8:	f100 0308 	add.w	r3, r0, #8
  408fdc:	f105 0208 	add.w	r2, r5, #8
  408fe0:	e71b      	b.n	408e1a <_realloc_r+0x8e>
  408fe2:	4632      	mov	r2, r6
  408fe4:	6829      	ldr	r1, [r5, #0]
  408fe6:	6011      	str	r1, [r2, #0]
  408fe8:	6869      	ldr	r1, [r5, #4]
  408fea:	6051      	str	r1, [r2, #4]
  408fec:	68a9      	ldr	r1, [r5, #8]
  408fee:	6091      	str	r1, [r2, #8]
  408ff0:	461c      	mov	r4, r3
  408ff2:	46d1      	mov	r9, sl
  408ff4:	e72a      	b.n	408e4c <_realloc_r+0xc0>
  408ff6:	eb09 0107 	add.w	r1, r9, r7
  408ffa:	ebab 0b07 	sub.w	fp, fp, r7
  408ffe:	f04b 0201 	orr.w	r2, fp, #1
  409002:	6099      	str	r1, [r3, #8]
  409004:	604a      	str	r2, [r1, #4]
  409006:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40900a:	f003 0301 	and.w	r3, r3, #1
  40900e:	431f      	orrs	r7, r3
  409010:	4640      	mov	r0, r8
  409012:	f845 7c04 	str.w	r7, [r5, #-4]
  409016:	f7fb f933 	bl	404280 <__malloc_unlock>
  40901a:	462e      	mov	r6, r5
  40901c:	e728      	b.n	408e70 <_realloc_r+0xe4>
  40901e:	4629      	mov	r1, r5
  409020:	f7ff fb56 	bl	4086d0 <memmove>
  409024:	e6ff      	b.n	408e26 <_realloc_r+0x9a>
  409026:	4629      	mov	r1, r5
  409028:	4630      	mov	r0, r6
  40902a:	461c      	mov	r4, r3
  40902c:	46d1      	mov	r9, sl
  40902e:	f7ff fb4f 	bl	4086d0 <memmove>
  409032:	e70b      	b.n	408e4c <_realloc_r+0xc0>
  409034:	68ab      	ldr	r3, [r5, #8]
  409036:	6083      	str	r3, [r0, #8]
  409038:	68eb      	ldr	r3, [r5, #12]
  40903a:	60c3      	str	r3, [r0, #12]
  40903c:	2a24      	cmp	r2, #36	; 0x24
  40903e:	d017      	beq.n	409070 <_realloc_r+0x2e4>
  409040:	f100 0310 	add.w	r3, r0, #16
  409044:	f105 0210 	add.w	r2, r5, #16
  409048:	e6e7      	b.n	408e1a <_realloc_r+0x8e>
  40904a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40904e:	f023 0303 	bic.w	r3, r3, #3
  409052:	441c      	add	r4, r3
  409054:	462e      	mov	r6, r5
  409056:	e6f9      	b.n	408e4c <_realloc_r+0xc0>
  409058:	68a9      	ldr	r1, [r5, #8]
  40905a:	f8ca 1010 	str.w	r1, [sl, #16]
  40905e:	68e9      	ldr	r1, [r5, #12]
  409060:	f8ca 1014 	str.w	r1, [sl, #20]
  409064:	2a24      	cmp	r2, #36	; 0x24
  409066:	d00c      	beq.n	409082 <_realloc_r+0x2f6>
  409068:	3510      	adds	r5, #16
  40906a:	f10a 0218 	add.w	r2, sl, #24
  40906e:	e7b9      	b.n	408fe4 <_realloc_r+0x258>
  409070:	692b      	ldr	r3, [r5, #16]
  409072:	6103      	str	r3, [r0, #16]
  409074:	696b      	ldr	r3, [r5, #20]
  409076:	6143      	str	r3, [r0, #20]
  409078:	f105 0218 	add.w	r2, r5, #24
  40907c:	f100 0318 	add.w	r3, r0, #24
  409080:	e6cb      	b.n	408e1a <_realloc_r+0x8e>
  409082:	692a      	ldr	r2, [r5, #16]
  409084:	f8ca 2018 	str.w	r2, [sl, #24]
  409088:	696a      	ldr	r2, [r5, #20]
  40908a:	f8ca 201c 	str.w	r2, [sl, #28]
  40908e:	3518      	adds	r5, #24
  409090:	f10a 0220 	add.w	r2, sl, #32
  409094:	e7a6      	b.n	408fe4 <_realloc_r+0x258>
  409096:	4632      	mov	r2, r6
  409098:	e77f      	b.n	408f9a <_realloc_r+0x20e>
  40909a:	4629      	mov	r1, r5
  40909c:	4630      	mov	r0, r6
  40909e:	9301      	str	r3, [sp, #4]
  4090a0:	f7ff fb16 	bl	4086d0 <memmove>
  4090a4:	9b01      	ldr	r3, [sp, #4]
  4090a6:	e77e      	b.n	408fa6 <_realloc_r+0x21a>
  4090a8:	68a9      	ldr	r1, [r5, #8]
  4090aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4090ae:	68e9      	ldr	r1, [r5, #12]
  4090b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4090b4:	2a24      	cmp	r2, #36	; 0x24
  4090b6:	d003      	beq.n	4090c0 <_realloc_r+0x334>
  4090b8:	3510      	adds	r5, #16
  4090ba:	f10a 0218 	add.w	r2, sl, #24
  4090be:	e76c      	b.n	408f9a <_realloc_r+0x20e>
  4090c0:	692a      	ldr	r2, [r5, #16]
  4090c2:	f8ca 2018 	str.w	r2, [sl, #24]
  4090c6:	696a      	ldr	r2, [r5, #20]
  4090c8:	f8ca 201c 	str.w	r2, [sl, #28]
  4090cc:	3518      	adds	r5, #24
  4090ce:	f10a 0220 	add.w	r2, sl, #32
  4090d2:	e762      	b.n	408f9a <_realloc_r+0x20e>
  4090d4:	20400438 	.word	0x20400438

004090d8 <__sread>:
  4090d8:	b510      	push	{r4, lr}
  4090da:	460c      	mov	r4, r1
  4090dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4090e0:	f000 faa4 	bl	40962c <_read_r>
  4090e4:	2800      	cmp	r0, #0
  4090e6:	db03      	blt.n	4090f0 <__sread+0x18>
  4090e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4090ea:	4403      	add	r3, r0
  4090ec:	6523      	str	r3, [r4, #80]	; 0x50
  4090ee:	bd10      	pop	{r4, pc}
  4090f0:	89a3      	ldrh	r3, [r4, #12]
  4090f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4090f6:	81a3      	strh	r3, [r4, #12]
  4090f8:	bd10      	pop	{r4, pc}
  4090fa:	bf00      	nop

004090fc <__swrite>:
  4090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409100:	4616      	mov	r6, r2
  409102:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409106:	461f      	mov	r7, r3
  409108:	05d3      	lsls	r3, r2, #23
  40910a:	460c      	mov	r4, r1
  40910c:	4605      	mov	r5, r0
  40910e:	d507      	bpl.n	409120 <__swrite+0x24>
  409110:	2200      	movs	r2, #0
  409112:	2302      	movs	r3, #2
  409114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409118:	f000 fa72 	bl	409600 <_lseek_r>
  40911c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409128:	81a2      	strh	r2, [r4, #12]
  40912a:	463b      	mov	r3, r7
  40912c:	4632      	mov	r2, r6
  40912e:	4628      	mov	r0, r5
  409130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409134:	f000 b922 	b.w	40937c <_write_r>

00409138 <__sseek>:
  409138:	b510      	push	{r4, lr}
  40913a:	460c      	mov	r4, r1
  40913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409140:	f000 fa5e 	bl	409600 <_lseek_r>
  409144:	89a3      	ldrh	r3, [r4, #12]
  409146:	1c42      	adds	r2, r0, #1
  409148:	bf0e      	itee	eq
  40914a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40914e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409152:	6520      	strne	r0, [r4, #80]	; 0x50
  409154:	81a3      	strh	r3, [r4, #12]
  409156:	bd10      	pop	{r4, pc}

00409158 <__sclose>:
  409158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40915c:	f000 b9b6 	b.w	4094cc <_close_r>

00409160 <__ssprint_r>:
  409160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409164:	6893      	ldr	r3, [r2, #8]
  409166:	b083      	sub	sp, #12
  409168:	4690      	mov	r8, r2
  40916a:	2b00      	cmp	r3, #0
  40916c:	d070      	beq.n	409250 <__ssprint_r+0xf0>
  40916e:	4682      	mov	sl, r0
  409170:	460c      	mov	r4, r1
  409172:	6817      	ldr	r7, [r2, #0]
  409174:	688d      	ldr	r5, [r1, #8]
  409176:	6808      	ldr	r0, [r1, #0]
  409178:	e042      	b.n	409200 <__ssprint_r+0xa0>
  40917a:	89a3      	ldrh	r3, [r4, #12]
  40917c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409180:	d02e      	beq.n	4091e0 <__ssprint_r+0x80>
  409182:	6965      	ldr	r5, [r4, #20]
  409184:	6921      	ldr	r1, [r4, #16]
  409186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40918a:	eba0 0b01 	sub.w	fp, r0, r1
  40918e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409192:	f10b 0001 	add.w	r0, fp, #1
  409196:	106d      	asrs	r5, r5, #1
  409198:	4430      	add	r0, r6
  40919a:	42a8      	cmp	r0, r5
  40919c:	462a      	mov	r2, r5
  40919e:	bf84      	itt	hi
  4091a0:	4605      	movhi	r5, r0
  4091a2:	462a      	movhi	r2, r5
  4091a4:	055b      	lsls	r3, r3, #21
  4091a6:	d538      	bpl.n	40921a <__ssprint_r+0xba>
  4091a8:	4611      	mov	r1, r2
  4091aa:	4650      	mov	r0, sl
  4091ac:	f7fa fcca 	bl	403b44 <_malloc_r>
  4091b0:	2800      	cmp	r0, #0
  4091b2:	d03c      	beq.n	40922e <__ssprint_r+0xce>
  4091b4:	465a      	mov	r2, fp
  4091b6:	6921      	ldr	r1, [r4, #16]
  4091b8:	9001      	str	r0, [sp, #4]
  4091ba:	f7fa ff73 	bl	4040a4 <memcpy>
  4091be:	89a2      	ldrh	r2, [r4, #12]
  4091c0:	9b01      	ldr	r3, [sp, #4]
  4091c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4091c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4091ca:	81a2      	strh	r2, [r4, #12]
  4091cc:	eba5 020b 	sub.w	r2, r5, fp
  4091d0:	eb03 000b 	add.w	r0, r3, fp
  4091d4:	6165      	str	r5, [r4, #20]
  4091d6:	6123      	str	r3, [r4, #16]
  4091d8:	6020      	str	r0, [r4, #0]
  4091da:	60a2      	str	r2, [r4, #8]
  4091dc:	4635      	mov	r5, r6
  4091de:	46b3      	mov	fp, r6
  4091e0:	465a      	mov	r2, fp
  4091e2:	4649      	mov	r1, r9
  4091e4:	f7ff fa74 	bl	4086d0 <memmove>
  4091e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4091ec:	68a2      	ldr	r2, [r4, #8]
  4091ee:	6820      	ldr	r0, [r4, #0]
  4091f0:	1b55      	subs	r5, r2, r5
  4091f2:	4458      	add	r0, fp
  4091f4:	1b9e      	subs	r6, r3, r6
  4091f6:	60a5      	str	r5, [r4, #8]
  4091f8:	6020      	str	r0, [r4, #0]
  4091fa:	f8c8 6008 	str.w	r6, [r8, #8]
  4091fe:	b33e      	cbz	r6, 409250 <__ssprint_r+0xf0>
  409200:	687e      	ldr	r6, [r7, #4]
  409202:	463b      	mov	r3, r7
  409204:	3708      	adds	r7, #8
  409206:	2e00      	cmp	r6, #0
  409208:	d0fa      	beq.n	409200 <__ssprint_r+0xa0>
  40920a:	42ae      	cmp	r6, r5
  40920c:	f8d3 9000 	ldr.w	r9, [r3]
  409210:	46ab      	mov	fp, r5
  409212:	d2b2      	bcs.n	40917a <__ssprint_r+0x1a>
  409214:	4635      	mov	r5, r6
  409216:	46b3      	mov	fp, r6
  409218:	e7e2      	b.n	4091e0 <__ssprint_r+0x80>
  40921a:	4650      	mov	r0, sl
  40921c:	f7ff fdb6 	bl	408d8c <_realloc_r>
  409220:	4603      	mov	r3, r0
  409222:	2800      	cmp	r0, #0
  409224:	d1d2      	bne.n	4091cc <__ssprint_r+0x6c>
  409226:	6921      	ldr	r1, [r4, #16]
  409228:	4650      	mov	r0, sl
  40922a:	f7fe fec1 	bl	407fb0 <_free_r>
  40922e:	230c      	movs	r3, #12
  409230:	f8ca 3000 	str.w	r3, [sl]
  409234:	89a3      	ldrh	r3, [r4, #12]
  409236:	2200      	movs	r2, #0
  409238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40923c:	f04f 30ff 	mov.w	r0, #4294967295
  409240:	81a3      	strh	r3, [r4, #12]
  409242:	f8c8 2008 	str.w	r2, [r8, #8]
  409246:	f8c8 2004 	str.w	r2, [r8, #4]
  40924a:	b003      	add	sp, #12
  40924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409250:	2000      	movs	r0, #0
  409252:	f8c8 0004 	str.w	r0, [r8, #4]
  409256:	b003      	add	sp, #12
  409258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040925c <__swbuf_r>:
  40925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40925e:	460d      	mov	r5, r1
  409260:	4614      	mov	r4, r2
  409262:	4606      	mov	r6, r0
  409264:	b110      	cbz	r0, 40926c <__swbuf_r+0x10>
  409266:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409268:	2b00      	cmp	r3, #0
  40926a:	d04b      	beq.n	409304 <__swbuf_r+0xa8>
  40926c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409270:	69a3      	ldr	r3, [r4, #24]
  409272:	60a3      	str	r3, [r4, #8]
  409274:	b291      	uxth	r1, r2
  409276:	0708      	lsls	r0, r1, #28
  409278:	d539      	bpl.n	4092ee <__swbuf_r+0x92>
  40927a:	6923      	ldr	r3, [r4, #16]
  40927c:	2b00      	cmp	r3, #0
  40927e:	d036      	beq.n	4092ee <__swbuf_r+0x92>
  409280:	b2ed      	uxtb	r5, r5
  409282:	0489      	lsls	r1, r1, #18
  409284:	462f      	mov	r7, r5
  409286:	d515      	bpl.n	4092b4 <__swbuf_r+0x58>
  409288:	6822      	ldr	r2, [r4, #0]
  40928a:	6961      	ldr	r1, [r4, #20]
  40928c:	1ad3      	subs	r3, r2, r3
  40928e:	428b      	cmp	r3, r1
  409290:	da1c      	bge.n	4092cc <__swbuf_r+0x70>
  409292:	3301      	adds	r3, #1
  409294:	68a1      	ldr	r1, [r4, #8]
  409296:	1c50      	adds	r0, r2, #1
  409298:	3901      	subs	r1, #1
  40929a:	60a1      	str	r1, [r4, #8]
  40929c:	6020      	str	r0, [r4, #0]
  40929e:	7015      	strb	r5, [r2, #0]
  4092a0:	6962      	ldr	r2, [r4, #20]
  4092a2:	429a      	cmp	r2, r3
  4092a4:	d01a      	beq.n	4092dc <__swbuf_r+0x80>
  4092a6:	89a3      	ldrh	r3, [r4, #12]
  4092a8:	07db      	lsls	r3, r3, #31
  4092aa:	d501      	bpl.n	4092b0 <__swbuf_r+0x54>
  4092ac:	2d0a      	cmp	r5, #10
  4092ae:	d015      	beq.n	4092dc <__swbuf_r+0x80>
  4092b0:	4638      	mov	r0, r7
  4092b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4092b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4092b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4092ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4092be:	81a2      	strh	r2, [r4, #12]
  4092c0:	6822      	ldr	r2, [r4, #0]
  4092c2:	6661      	str	r1, [r4, #100]	; 0x64
  4092c4:	6961      	ldr	r1, [r4, #20]
  4092c6:	1ad3      	subs	r3, r2, r3
  4092c8:	428b      	cmp	r3, r1
  4092ca:	dbe2      	blt.n	409292 <__swbuf_r+0x36>
  4092cc:	4621      	mov	r1, r4
  4092ce:	4630      	mov	r0, r6
  4092d0:	f7fe fcf0 	bl	407cb4 <_fflush_r>
  4092d4:	b940      	cbnz	r0, 4092e8 <__swbuf_r+0x8c>
  4092d6:	6822      	ldr	r2, [r4, #0]
  4092d8:	2301      	movs	r3, #1
  4092da:	e7db      	b.n	409294 <__swbuf_r+0x38>
  4092dc:	4621      	mov	r1, r4
  4092de:	4630      	mov	r0, r6
  4092e0:	f7fe fce8 	bl	407cb4 <_fflush_r>
  4092e4:	2800      	cmp	r0, #0
  4092e6:	d0e3      	beq.n	4092b0 <__swbuf_r+0x54>
  4092e8:	f04f 37ff 	mov.w	r7, #4294967295
  4092ec:	e7e0      	b.n	4092b0 <__swbuf_r+0x54>
  4092ee:	4621      	mov	r1, r4
  4092f0:	4630      	mov	r0, r6
  4092f2:	f7fd fc0b 	bl	406b0c <__swsetup_r>
  4092f6:	2800      	cmp	r0, #0
  4092f8:	d1f6      	bne.n	4092e8 <__swbuf_r+0x8c>
  4092fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4092fe:	6923      	ldr	r3, [r4, #16]
  409300:	b291      	uxth	r1, r2
  409302:	e7bd      	b.n	409280 <__swbuf_r+0x24>
  409304:	f7fe fd2e 	bl	407d64 <__sinit>
  409308:	e7b0      	b.n	40926c <__swbuf_r+0x10>
  40930a:	bf00      	nop

0040930c <_wcrtomb_r>:
  40930c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40930e:	4606      	mov	r6, r0
  409310:	b085      	sub	sp, #20
  409312:	461f      	mov	r7, r3
  409314:	b189      	cbz	r1, 40933a <_wcrtomb_r+0x2e>
  409316:	4c10      	ldr	r4, [pc, #64]	; (409358 <_wcrtomb_r+0x4c>)
  409318:	4d10      	ldr	r5, [pc, #64]	; (40935c <_wcrtomb_r+0x50>)
  40931a:	6824      	ldr	r4, [r4, #0]
  40931c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40931e:	2c00      	cmp	r4, #0
  409320:	bf08      	it	eq
  409322:	462c      	moveq	r4, r5
  409324:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409328:	47a0      	blx	r4
  40932a:	1c43      	adds	r3, r0, #1
  40932c:	d103      	bne.n	409336 <_wcrtomb_r+0x2a>
  40932e:	2200      	movs	r2, #0
  409330:	238a      	movs	r3, #138	; 0x8a
  409332:	603a      	str	r2, [r7, #0]
  409334:	6033      	str	r3, [r6, #0]
  409336:	b005      	add	sp, #20
  409338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40933a:	460c      	mov	r4, r1
  40933c:	4906      	ldr	r1, [pc, #24]	; (409358 <_wcrtomb_r+0x4c>)
  40933e:	4a07      	ldr	r2, [pc, #28]	; (40935c <_wcrtomb_r+0x50>)
  409340:	6809      	ldr	r1, [r1, #0]
  409342:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409344:	2900      	cmp	r1, #0
  409346:	bf08      	it	eq
  409348:	4611      	moveq	r1, r2
  40934a:	4622      	mov	r2, r4
  40934c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409350:	a901      	add	r1, sp, #4
  409352:	47a0      	blx	r4
  409354:	e7e9      	b.n	40932a <_wcrtomb_r+0x1e>
  409356:	bf00      	nop
  409358:	2040000c 	.word	0x2040000c
  40935c:	2040084c 	.word	0x2040084c

00409360 <__ascii_wctomb>:
  409360:	b121      	cbz	r1, 40936c <__ascii_wctomb+0xc>
  409362:	2aff      	cmp	r2, #255	; 0xff
  409364:	d804      	bhi.n	409370 <__ascii_wctomb+0x10>
  409366:	700a      	strb	r2, [r1, #0]
  409368:	2001      	movs	r0, #1
  40936a:	4770      	bx	lr
  40936c:	4608      	mov	r0, r1
  40936e:	4770      	bx	lr
  409370:	238a      	movs	r3, #138	; 0x8a
  409372:	6003      	str	r3, [r0, #0]
  409374:	f04f 30ff 	mov.w	r0, #4294967295
  409378:	4770      	bx	lr
  40937a:	bf00      	nop

0040937c <_write_r>:
  40937c:	b570      	push	{r4, r5, r6, lr}
  40937e:	460d      	mov	r5, r1
  409380:	4c08      	ldr	r4, [pc, #32]	; (4093a4 <_write_r+0x28>)
  409382:	4611      	mov	r1, r2
  409384:	4606      	mov	r6, r0
  409386:	461a      	mov	r2, r3
  409388:	4628      	mov	r0, r5
  40938a:	2300      	movs	r3, #0
  40938c:	6023      	str	r3, [r4, #0]
  40938e:	f7f6 ff77 	bl	400280 <_write>
  409392:	1c43      	adds	r3, r0, #1
  409394:	d000      	beq.n	409398 <_write_r+0x1c>
  409396:	bd70      	pop	{r4, r5, r6, pc}
  409398:	6823      	ldr	r3, [r4, #0]
  40939a:	2b00      	cmp	r3, #0
  40939c:	d0fb      	beq.n	409396 <_write_r+0x1a>
  40939e:	6033      	str	r3, [r6, #0]
  4093a0:	bd70      	pop	{r4, r5, r6, pc}
  4093a2:	bf00      	nop
  4093a4:	20400d50 	.word	0x20400d50

004093a8 <__register_exitproc>:
  4093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093ac:	4d2c      	ldr	r5, [pc, #176]	; (409460 <__register_exitproc+0xb8>)
  4093ae:	4606      	mov	r6, r0
  4093b0:	6828      	ldr	r0, [r5, #0]
  4093b2:	4698      	mov	r8, r3
  4093b4:	460f      	mov	r7, r1
  4093b6:	4691      	mov	r9, r2
  4093b8:	f7ff f8a2 	bl	408500 <__retarget_lock_acquire_recursive>
  4093bc:	4b29      	ldr	r3, [pc, #164]	; (409464 <__register_exitproc+0xbc>)
  4093be:	681c      	ldr	r4, [r3, #0]
  4093c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4093c4:	2b00      	cmp	r3, #0
  4093c6:	d03e      	beq.n	409446 <__register_exitproc+0x9e>
  4093c8:	685a      	ldr	r2, [r3, #4]
  4093ca:	2a1f      	cmp	r2, #31
  4093cc:	dc1c      	bgt.n	409408 <__register_exitproc+0x60>
  4093ce:	f102 0e01 	add.w	lr, r2, #1
  4093d2:	b176      	cbz	r6, 4093f2 <__register_exitproc+0x4a>
  4093d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4093d8:	2401      	movs	r4, #1
  4093da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4093de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4093e2:	4094      	lsls	r4, r2
  4093e4:	4320      	orrs	r0, r4
  4093e6:	2e02      	cmp	r6, #2
  4093e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4093ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4093f0:	d023      	beq.n	40943a <__register_exitproc+0x92>
  4093f2:	3202      	adds	r2, #2
  4093f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4093f8:	6828      	ldr	r0, [r5, #0]
  4093fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4093fe:	f7ff f881 	bl	408504 <__retarget_lock_release_recursive>
  409402:	2000      	movs	r0, #0
  409404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409408:	4b17      	ldr	r3, [pc, #92]	; (409468 <__register_exitproc+0xc0>)
  40940a:	b30b      	cbz	r3, 409450 <__register_exitproc+0xa8>
  40940c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409410:	f7fa fb88 	bl	403b24 <malloc>
  409414:	4603      	mov	r3, r0
  409416:	b1d8      	cbz	r0, 409450 <__register_exitproc+0xa8>
  409418:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40941c:	6002      	str	r2, [r0, #0]
  40941e:	2100      	movs	r1, #0
  409420:	6041      	str	r1, [r0, #4]
  409422:	460a      	mov	r2, r1
  409424:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409428:	f04f 0e01 	mov.w	lr, #1
  40942c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409430:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409434:	2e00      	cmp	r6, #0
  409436:	d0dc      	beq.n	4093f2 <__register_exitproc+0x4a>
  409438:	e7cc      	b.n	4093d4 <__register_exitproc+0x2c>
  40943a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40943e:	430c      	orrs	r4, r1
  409440:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409444:	e7d5      	b.n	4093f2 <__register_exitproc+0x4a>
  409446:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40944a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40944e:	e7bb      	b.n	4093c8 <__register_exitproc+0x20>
  409450:	6828      	ldr	r0, [r5, #0]
  409452:	f7ff f857 	bl	408504 <__retarget_lock_release_recursive>
  409456:	f04f 30ff 	mov.w	r0, #4294967295
  40945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40945e:	bf00      	nop
  409460:	20400848 	.word	0x20400848
  409464:	0040a50c 	.word	0x0040a50c
  409468:	00403b25 	.word	0x00403b25

0040946c <_calloc_r>:
  40946c:	b510      	push	{r4, lr}
  40946e:	fb02 f101 	mul.w	r1, r2, r1
  409472:	f7fa fb67 	bl	403b44 <_malloc_r>
  409476:	4604      	mov	r4, r0
  409478:	b1d8      	cbz	r0, 4094b2 <_calloc_r+0x46>
  40947a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40947e:	f022 0203 	bic.w	r2, r2, #3
  409482:	3a04      	subs	r2, #4
  409484:	2a24      	cmp	r2, #36	; 0x24
  409486:	d818      	bhi.n	4094ba <_calloc_r+0x4e>
  409488:	2a13      	cmp	r2, #19
  40948a:	d914      	bls.n	4094b6 <_calloc_r+0x4a>
  40948c:	2300      	movs	r3, #0
  40948e:	2a1b      	cmp	r2, #27
  409490:	6003      	str	r3, [r0, #0]
  409492:	6043      	str	r3, [r0, #4]
  409494:	d916      	bls.n	4094c4 <_calloc_r+0x58>
  409496:	2a24      	cmp	r2, #36	; 0x24
  409498:	6083      	str	r3, [r0, #8]
  40949a:	60c3      	str	r3, [r0, #12]
  40949c:	bf11      	iteee	ne
  40949e:	f100 0210 	addne.w	r2, r0, #16
  4094a2:	6103      	streq	r3, [r0, #16]
  4094a4:	6143      	streq	r3, [r0, #20]
  4094a6:	f100 0218 	addeq.w	r2, r0, #24
  4094aa:	2300      	movs	r3, #0
  4094ac:	6013      	str	r3, [r2, #0]
  4094ae:	6053      	str	r3, [r2, #4]
  4094b0:	6093      	str	r3, [r2, #8]
  4094b2:	4620      	mov	r0, r4
  4094b4:	bd10      	pop	{r4, pc}
  4094b6:	4602      	mov	r2, r0
  4094b8:	e7f7      	b.n	4094aa <_calloc_r+0x3e>
  4094ba:	2100      	movs	r1, #0
  4094bc:	f7fa fe8c 	bl	4041d8 <memset>
  4094c0:	4620      	mov	r0, r4
  4094c2:	bd10      	pop	{r4, pc}
  4094c4:	f100 0208 	add.w	r2, r0, #8
  4094c8:	e7ef      	b.n	4094aa <_calloc_r+0x3e>
  4094ca:	bf00      	nop

004094cc <_close_r>:
  4094cc:	b538      	push	{r3, r4, r5, lr}
  4094ce:	4c07      	ldr	r4, [pc, #28]	; (4094ec <_close_r+0x20>)
  4094d0:	2300      	movs	r3, #0
  4094d2:	4605      	mov	r5, r0
  4094d4:	4608      	mov	r0, r1
  4094d6:	6023      	str	r3, [r4, #0]
  4094d8:	f7f7 fd36 	bl	400f48 <_close>
  4094dc:	1c43      	adds	r3, r0, #1
  4094de:	d000      	beq.n	4094e2 <_close_r+0x16>
  4094e0:	bd38      	pop	{r3, r4, r5, pc}
  4094e2:	6823      	ldr	r3, [r4, #0]
  4094e4:	2b00      	cmp	r3, #0
  4094e6:	d0fb      	beq.n	4094e0 <_close_r+0x14>
  4094e8:	602b      	str	r3, [r5, #0]
  4094ea:	bd38      	pop	{r3, r4, r5, pc}
  4094ec:	20400d50 	.word	0x20400d50

004094f0 <_fclose_r>:
  4094f0:	b570      	push	{r4, r5, r6, lr}
  4094f2:	b159      	cbz	r1, 40950c <_fclose_r+0x1c>
  4094f4:	4605      	mov	r5, r0
  4094f6:	460c      	mov	r4, r1
  4094f8:	b110      	cbz	r0, 409500 <_fclose_r+0x10>
  4094fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4094fc:	2b00      	cmp	r3, #0
  4094fe:	d03c      	beq.n	40957a <_fclose_r+0x8a>
  409500:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409502:	07d8      	lsls	r0, r3, #31
  409504:	d505      	bpl.n	409512 <_fclose_r+0x22>
  409506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40950a:	b92b      	cbnz	r3, 409518 <_fclose_r+0x28>
  40950c:	2600      	movs	r6, #0
  40950e:	4630      	mov	r0, r6
  409510:	bd70      	pop	{r4, r5, r6, pc}
  409512:	89a3      	ldrh	r3, [r4, #12]
  409514:	0599      	lsls	r1, r3, #22
  409516:	d53c      	bpl.n	409592 <_fclose_r+0xa2>
  409518:	4621      	mov	r1, r4
  40951a:	4628      	mov	r0, r5
  40951c:	f7fe fb2a 	bl	407b74 <__sflush_r>
  409520:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409522:	4606      	mov	r6, r0
  409524:	b133      	cbz	r3, 409534 <_fclose_r+0x44>
  409526:	69e1      	ldr	r1, [r4, #28]
  409528:	4628      	mov	r0, r5
  40952a:	4798      	blx	r3
  40952c:	2800      	cmp	r0, #0
  40952e:	bfb8      	it	lt
  409530:	f04f 36ff 	movlt.w	r6, #4294967295
  409534:	89a3      	ldrh	r3, [r4, #12]
  409536:	061a      	lsls	r2, r3, #24
  409538:	d422      	bmi.n	409580 <_fclose_r+0x90>
  40953a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40953c:	b141      	cbz	r1, 409550 <_fclose_r+0x60>
  40953e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409542:	4299      	cmp	r1, r3
  409544:	d002      	beq.n	40954c <_fclose_r+0x5c>
  409546:	4628      	mov	r0, r5
  409548:	f7fe fd32 	bl	407fb0 <_free_r>
  40954c:	2300      	movs	r3, #0
  40954e:	6323      	str	r3, [r4, #48]	; 0x30
  409550:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409552:	b121      	cbz	r1, 40955e <_fclose_r+0x6e>
  409554:	4628      	mov	r0, r5
  409556:	f7fe fd2b 	bl	407fb0 <_free_r>
  40955a:	2300      	movs	r3, #0
  40955c:	6463      	str	r3, [r4, #68]	; 0x44
  40955e:	f7fe fc2d 	bl	407dbc <__sfp_lock_acquire>
  409562:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409564:	2200      	movs	r2, #0
  409566:	07db      	lsls	r3, r3, #31
  409568:	81a2      	strh	r2, [r4, #12]
  40956a:	d50e      	bpl.n	40958a <_fclose_r+0x9a>
  40956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40956e:	f7fe ffc5 	bl	4084fc <__retarget_lock_close_recursive>
  409572:	f7fe fc29 	bl	407dc8 <__sfp_lock_release>
  409576:	4630      	mov	r0, r6
  409578:	bd70      	pop	{r4, r5, r6, pc}
  40957a:	f7fe fbf3 	bl	407d64 <__sinit>
  40957e:	e7bf      	b.n	409500 <_fclose_r+0x10>
  409580:	6921      	ldr	r1, [r4, #16]
  409582:	4628      	mov	r0, r5
  409584:	f7fe fd14 	bl	407fb0 <_free_r>
  409588:	e7d7      	b.n	40953a <_fclose_r+0x4a>
  40958a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40958c:	f7fe ffba 	bl	408504 <__retarget_lock_release_recursive>
  409590:	e7ec      	b.n	40956c <_fclose_r+0x7c>
  409592:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409594:	f7fe ffb4 	bl	408500 <__retarget_lock_acquire_recursive>
  409598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40959c:	2b00      	cmp	r3, #0
  40959e:	d1bb      	bne.n	409518 <_fclose_r+0x28>
  4095a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4095a2:	f016 0601 	ands.w	r6, r6, #1
  4095a6:	d1b1      	bne.n	40950c <_fclose_r+0x1c>
  4095a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4095aa:	f7fe ffab 	bl	408504 <__retarget_lock_release_recursive>
  4095ae:	4630      	mov	r0, r6
  4095b0:	bd70      	pop	{r4, r5, r6, pc}
  4095b2:	bf00      	nop

004095b4 <_fstat_r>:
  4095b4:	b538      	push	{r3, r4, r5, lr}
  4095b6:	460b      	mov	r3, r1
  4095b8:	4c07      	ldr	r4, [pc, #28]	; (4095d8 <_fstat_r+0x24>)
  4095ba:	4605      	mov	r5, r0
  4095bc:	4611      	mov	r1, r2
  4095be:	4618      	mov	r0, r3
  4095c0:	2300      	movs	r3, #0
  4095c2:	6023      	str	r3, [r4, #0]
  4095c4:	f7f7 fcc3 	bl	400f4e <_fstat>
  4095c8:	1c43      	adds	r3, r0, #1
  4095ca:	d000      	beq.n	4095ce <_fstat_r+0x1a>
  4095cc:	bd38      	pop	{r3, r4, r5, pc}
  4095ce:	6823      	ldr	r3, [r4, #0]
  4095d0:	2b00      	cmp	r3, #0
  4095d2:	d0fb      	beq.n	4095cc <_fstat_r+0x18>
  4095d4:	602b      	str	r3, [r5, #0]
  4095d6:	bd38      	pop	{r3, r4, r5, pc}
  4095d8:	20400d50 	.word	0x20400d50

004095dc <_isatty_r>:
  4095dc:	b538      	push	{r3, r4, r5, lr}
  4095de:	4c07      	ldr	r4, [pc, #28]	; (4095fc <_isatty_r+0x20>)
  4095e0:	2300      	movs	r3, #0
  4095e2:	4605      	mov	r5, r0
  4095e4:	4608      	mov	r0, r1
  4095e6:	6023      	str	r3, [r4, #0]
  4095e8:	f7f7 fcb6 	bl	400f58 <_isatty>
  4095ec:	1c43      	adds	r3, r0, #1
  4095ee:	d000      	beq.n	4095f2 <_isatty_r+0x16>
  4095f0:	bd38      	pop	{r3, r4, r5, pc}
  4095f2:	6823      	ldr	r3, [r4, #0]
  4095f4:	2b00      	cmp	r3, #0
  4095f6:	d0fb      	beq.n	4095f0 <_isatty_r+0x14>
  4095f8:	602b      	str	r3, [r5, #0]
  4095fa:	bd38      	pop	{r3, r4, r5, pc}
  4095fc:	20400d50 	.word	0x20400d50

00409600 <_lseek_r>:
  409600:	b570      	push	{r4, r5, r6, lr}
  409602:	460d      	mov	r5, r1
  409604:	4c08      	ldr	r4, [pc, #32]	; (409628 <_lseek_r+0x28>)
  409606:	4611      	mov	r1, r2
  409608:	4606      	mov	r6, r0
  40960a:	461a      	mov	r2, r3
  40960c:	4628      	mov	r0, r5
  40960e:	2300      	movs	r3, #0
  409610:	6023      	str	r3, [r4, #0]
  409612:	f7f7 fca3 	bl	400f5c <_lseek>
  409616:	1c43      	adds	r3, r0, #1
  409618:	d000      	beq.n	40961c <_lseek_r+0x1c>
  40961a:	bd70      	pop	{r4, r5, r6, pc}
  40961c:	6823      	ldr	r3, [r4, #0]
  40961e:	2b00      	cmp	r3, #0
  409620:	d0fb      	beq.n	40961a <_lseek_r+0x1a>
  409622:	6033      	str	r3, [r6, #0]
  409624:	bd70      	pop	{r4, r5, r6, pc}
  409626:	bf00      	nop
  409628:	20400d50 	.word	0x20400d50

0040962c <_read_r>:
  40962c:	b570      	push	{r4, r5, r6, lr}
  40962e:	460d      	mov	r5, r1
  409630:	4c08      	ldr	r4, [pc, #32]	; (409654 <_read_r+0x28>)
  409632:	4611      	mov	r1, r2
  409634:	4606      	mov	r6, r0
  409636:	461a      	mov	r2, r3
  409638:	4628      	mov	r0, r5
  40963a:	2300      	movs	r3, #0
  40963c:	6023      	str	r3, [r4, #0]
  40963e:	f7f6 fe01 	bl	400244 <_read>
  409642:	1c43      	adds	r3, r0, #1
  409644:	d000      	beq.n	409648 <_read_r+0x1c>
  409646:	bd70      	pop	{r4, r5, r6, pc}
  409648:	6823      	ldr	r3, [r4, #0]
  40964a:	2b00      	cmp	r3, #0
  40964c:	d0fb      	beq.n	409646 <_read_r+0x1a>
  40964e:	6033      	str	r3, [r6, #0]
  409650:	bd70      	pop	{r4, r5, r6, pc}
  409652:	bf00      	nop
  409654:	20400d50 	.word	0x20400d50

00409658 <__aeabi_drsub>:
  409658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40965c:	e002      	b.n	409664 <__adddf3>
  40965e:	bf00      	nop

00409660 <__aeabi_dsub>:
  409660:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409664 <__adddf3>:
  409664:	b530      	push	{r4, r5, lr}
  409666:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40966a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40966e:	ea94 0f05 	teq	r4, r5
  409672:	bf08      	it	eq
  409674:	ea90 0f02 	teqeq	r0, r2
  409678:	bf1f      	itttt	ne
  40967a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40967e:	ea55 0c02 	orrsne.w	ip, r5, r2
  409682:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409686:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40968a:	f000 80e2 	beq.w	409852 <__adddf3+0x1ee>
  40968e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409692:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409696:	bfb8      	it	lt
  409698:	426d      	neglt	r5, r5
  40969a:	dd0c      	ble.n	4096b6 <__adddf3+0x52>
  40969c:	442c      	add	r4, r5
  40969e:	ea80 0202 	eor.w	r2, r0, r2
  4096a2:	ea81 0303 	eor.w	r3, r1, r3
  4096a6:	ea82 0000 	eor.w	r0, r2, r0
  4096aa:	ea83 0101 	eor.w	r1, r3, r1
  4096ae:	ea80 0202 	eor.w	r2, r0, r2
  4096b2:	ea81 0303 	eor.w	r3, r1, r3
  4096b6:	2d36      	cmp	r5, #54	; 0x36
  4096b8:	bf88      	it	hi
  4096ba:	bd30      	pophi	{r4, r5, pc}
  4096bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4096c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4096c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4096c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4096cc:	d002      	beq.n	4096d4 <__adddf3+0x70>
  4096ce:	4240      	negs	r0, r0
  4096d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4096d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4096d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4096dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4096e0:	d002      	beq.n	4096e8 <__adddf3+0x84>
  4096e2:	4252      	negs	r2, r2
  4096e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4096e8:	ea94 0f05 	teq	r4, r5
  4096ec:	f000 80a7 	beq.w	40983e <__adddf3+0x1da>
  4096f0:	f1a4 0401 	sub.w	r4, r4, #1
  4096f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4096f8:	db0d      	blt.n	409716 <__adddf3+0xb2>
  4096fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4096fe:	fa22 f205 	lsr.w	r2, r2, r5
  409702:	1880      	adds	r0, r0, r2
  409704:	f141 0100 	adc.w	r1, r1, #0
  409708:	fa03 f20e 	lsl.w	r2, r3, lr
  40970c:	1880      	adds	r0, r0, r2
  40970e:	fa43 f305 	asr.w	r3, r3, r5
  409712:	4159      	adcs	r1, r3
  409714:	e00e      	b.n	409734 <__adddf3+0xd0>
  409716:	f1a5 0520 	sub.w	r5, r5, #32
  40971a:	f10e 0e20 	add.w	lr, lr, #32
  40971e:	2a01      	cmp	r2, #1
  409720:	fa03 fc0e 	lsl.w	ip, r3, lr
  409724:	bf28      	it	cs
  409726:	f04c 0c02 	orrcs.w	ip, ip, #2
  40972a:	fa43 f305 	asr.w	r3, r3, r5
  40972e:	18c0      	adds	r0, r0, r3
  409730:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409738:	d507      	bpl.n	40974a <__adddf3+0xe6>
  40973a:	f04f 0e00 	mov.w	lr, #0
  40973e:	f1dc 0c00 	rsbs	ip, ip, #0
  409742:	eb7e 0000 	sbcs.w	r0, lr, r0
  409746:	eb6e 0101 	sbc.w	r1, lr, r1
  40974a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40974e:	d31b      	bcc.n	409788 <__adddf3+0x124>
  409750:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409754:	d30c      	bcc.n	409770 <__adddf3+0x10c>
  409756:	0849      	lsrs	r1, r1, #1
  409758:	ea5f 0030 	movs.w	r0, r0, rrx
  40975c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409760:	f104 0401 	add.w	r4, r4, #1
  409764:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409768:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40976c:	f080 809a 	bcs.w	4098a4 <__adddf3+0x240>
  409770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409774:	bf08      	it	eq
  409776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40977a:	f150 0000 	adcs.w	r0, r0, #0
  40977e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409782:	ea41 0105 	orr.w	r1, r1, r5
  409786:	bd30      	pop	{r4, r5, pc}
  409788:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40978c:	4140      	adcs	r0, r0
  40978e:	eb41 0101 	adc.w	r1, r1, r1
  409792:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409796:	f1a4 0401 	sub.w	r4, r4, #1
  40979a:	d1e9      	bne.n	409770 <__adddf3+0x10c>
  40979c:	f091 0f00 	teq	r1, #0
  4097a0:	bf04      	itt	eq
  4097a2:	4601      	moveq	r1, r0
  4097a4:	2000      	moveq	r0, #0
  4097a6:	fab1 f381 	clz	r3, r1
  4097aa:	bf08      	it	eq
  4097ac:	3320      	addeq	r3, #32
  4097ae:	f1a3 030b 	sub.w	r3, r3, #11
  4097b2:	f1b3 0220 	subs.w	r2, r3, #32
  4097b6:	da0c      	bge.n	4097d2 <__adddf3+0x16e>
  4097b8:	320c      	adds	r2, #12
  4097ba:	dd08      	ble.n	4097ce <__adddf3+0x16a>
  4097bc:	f102 0c14 	add.w	ip, r2, #20
  4097c0:	f1c2 020c 	rsb	r2, r2, #12
  4097c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4097c8:	fa21 f102 	lsr.w	r1, r1, r2
  4097cc:	e00c      	b.n	4097e8 <__adddf3+0x184>
  4097ce:	f102 0214 	add.w	r2, r2, #20
  4097d2:	bfd8      	it	le
  4097d4:	f1c2 0c20 	rsble	ip, r2, #32
  4097d8:	fa01 f102 	lsl.w	r1, r1, r2
  4097dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4097e0:	bfdc      	itt	le
  4097e2:	ea41 010c 	orrle.w	r1, r1, ip
  4097e6:	4090      	lslle	r0, r2
  4097e8:	1ae4      	subs	r4, r4, r3
  4097ea:	bfa2      	ittt	ge
  4097ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4097f0:	4329      	orrge	r1, r5
  4097f2:	bd30      	popge	{r4, r5, pc}
  4097f4:	ea6f 0404 	mvn.w	r4, r4
  4097f8:	3c1f      	subs	r4, #31
  4097fa:	da1c      	bge.n	409836 <__adddf3+0x1d2>
  4097fc:	340c      	adds	r4, #12
  4097fe:	dc0e      	bgt.n	40981e <__adddf3+0x1ba>
  409800:	f104 0414 	add.w	r4, r4, #20
  409804:	f1c4 0220 	rsb	r2, r4, #32
  409808:	fa20 f004 	lsr.w	r0, r0, r4
  40980c:	fa01 f302 	lsl.w	r3, r1, r2
  409810:	ea40 0003 	orr.w	r0, r0, r3
  409814:	fa21 f304 	lsr.w	r3, r1, r4
  409818:	ea45 0103 	orr.w	r1, r5, r3
  40981c:	bd30      	pop	{r4, r5, pc}
  40981e:	f1c4 040c 	rsb	r4, r4, #12
  409822:	f1c4 0220 	rsb	r2, r4, #32
  409826:	fa20 f002 	lsr.w	r0, r0, r2
  40982a:	fa01 f304 	lsl.w	r3, r1, r4
  40982e:	ea40 0003 	orr.w	r0, r0, r3
  409832:	4629      	mov	r1, r5
  409834:	bd30      	pop	{r4, r5, pc}
  409836:	fa21 f004 	lsr.w	r0, r1, r4
  40983a:	4629      	mov	r1, r5
  40983c:	bd30      	pop	{r4, r5, pc}
  40983e:	f094 0f00 	teq	r4, #0
  409842:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409846:	bf06      	itte	eq
  409848:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40984c:	3401      	addeq	r4, #1
  40984e:	3d01      	subne	r5, #1
  409850:	e74e      	b.n	4096f0 <__adddf3+0x8c>
  409852:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409856:	bf18      	it	ne
  409858:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40985c:	d029      	beq.n	4098b2 <__adddf3+0x24e>
  40985e:	ea94 0f05 	teq	r4, r5
  409862:	bf08      	it	eq
  409864:	ea90 0f02 	teqeq	r0, r2
  409868:	d005      	beq.n	409876 <__adddf3+0x212>
  40986a:	ea54 0c00 	orrs.w	ip, r4, r0
  40986e:	bf04      	itt	eq
  409870:	4619      	moveq	r1, r3
  409872:	4610      	moveq	r0, r2
  409874:	bd30      	pop	{r4, r5, pc}
  409876:	ea91 0f03 	teq	r1, r3
  40987a:	bf1e      	ittt	ne
  40987c:	2100      	movne	r1, #0
  40987e:	2000      	movne	r0, #0
  409880:	bd30      	popne	{r4, r5, pc}
  409882:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409886:	d105      	bne.n	409894 <__adddf3+0x230>
  409888:	0040      	lsls	r0, r0, #1
  40988a:	4149      	adcs	r1, r1
  40988c:	bf28      	it	cs
  40988e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409892:	bd30      	pop	{r4, r5, pc}
  409894:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409898:	bf3c      	itt	cc
  40989a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40989e:	bd30      	popcc	{r4, r5, pc}
  4098a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4098a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4098a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4098ac:	f04f 0000 	mov.w	r0, #0
  4098b0:	bd30      	pop	{r4, r5, pc}
  4098b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4098b6:	bf1a      	itte	ne
  4098b8:	4619      	movne	r1, r3
  4098ba:	4610      	movne	r0, r2
  4098bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4098c0:	bf1c      	itt	ne
  4098c2:	460b      	movne	r3, r1
  4098c4:	4602      	movne	r2, r0
  4098c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4098ca:	bf06      	itte	eq
  4098cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4098d0:	ea91 0f03 	teqeq	r1, r3
  4098d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4098d8:	bd30      	pop	{r4, r5, pc}
  4098da:	bf00      	nop

004098dc <__aeabi_ui2d>:
  4098dc:	f090 0f00 	teq	r0, #0
  4098e0:	bf04      	itt	eq
  4098e2:	2100      	moveq	r1, #0
  4098e4:	4770      	bxeq	lr
  4098e6:	b530      	push	{r4, r5, lr}
  4098e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4098ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4098f0:	f04f 0500 	mov.w	r5, #0
  4098f4:	f04f 0100 	mov.w	r1, #0
  4098f8:	e750      	b.n	40979c <__adddf3+0x138>
  4098fa:	bf00      	nop

004098fc <__aeabi_i2d>:
  4098fc:	f090 0f00 	teq	r0, #0
  409900:	bf04      	itt	eq
  409902:	2100      	moveq	r1, #0
  409904:	4770      	bxeq	lr
  409906:	b530      	push	{r4, r5, lr}
  409908:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40990c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409910:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409914:	bf48      	it	mi
  409916:	4240      	negmi	r0, r0
  409918:	f04f 0100 	mov.w	r1, #0
  40991c:	e73e      	b.n	40979c <__adddf3+0x138>
  40991e:	bf00      	nop

00409920 <__aeabi_f2d>:
  409920:	0042      	lsls	r2, r0, #1
  409922:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409926:	ea4f 0131 	mov.w	r1, r1, rrx
  40992a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40992e:	bf1f      	itttt	ne
  409930:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409938:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40993c:	4770      	bxne	lr
  40993e:	f092 0f00 	teq	r2, #0
  409942:	bf14      	ite	ne
  409944:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409948:	4770      	bxeq	lr
  40994a:	b530      	push	{r4, r5, lr}
  40994c:	f44f 7460 	mov.w	r4, #896	; 0x380
  409950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409958:	e720      	b.n	40979c <__adddf3+0x138>
  40995a:	bf00      	nop

0040995c <__aeabi_ul2d>:
  40995c:	ea50 0201 	orrs.w	r2, r0, r1
  409960:	bf08      	it	eq
  409962:	4770      	bxeq	lr
  409964:	b530      	push	{r4, r5, lr}
  409966:	f04f 0500 	mov.w	r5, #0
  40996a:	e00a      	b.n	409982 <__aeabi_l2d+0x16>

0040996c <__aeabi_l2d>:
  40996c:	ea50 0201 	orrs.w	r2, r0, r1
  409970:	bf08      	it	eq
  409972:	4770      	bxeq	lr
  409974:	b530      	push	{r4, r5, lr}
  409976:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40997a:	d502      	bpl.n	409982 <__aeabi_l2d+0x16>
  40997c:	4240      	negs	r0, r0
  40997e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409982:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409986:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40998a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40998e:	f43f aedc 	beq.w	40974a <__adddf3+0xe6>
  409992:	f04f 0203 	mov.w	r2, #3
  409996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40999a:	bf18      	it	ne
  40999c:	3203      	addne	r2, #3
  40999e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4099a2:	bf18      	it	ne
  4099a4:	3203      	addne	r2, #3
  4099a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4099aa:	f1c2 0320 	rsb	r3, r2, #32
  4099ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4099b2:	fa20 f002 	lsr.w	r0, r0, r2
  4099b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4099ba:	ea40 000e 	orr.w	r0, r0, lr
  4099be:	fa21 f102 	lsr.w	r1, r1, r2
  4099c2:	4414      	add	r4, r2
  4099c4:	e6c1      	b.n	40974a <__adddf3+0xe6>
  4099c6:	bf00      	nop

004099c8 <__aeabi_dmul>:
  4099c8:	b570      	push	{r4, r5, r6, lr}
  4099ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4099ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4099d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4099d6:	bf1d      	ittte	ne
  4099d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4099dc:	ea94 0f0c 	teqne	r4, ip
  4099e0:	ea95 0f0c 	teqne	r5, ip
  4099e4:	f000 f8de 	bleq	409ba4 <__aeabi_dmul+0x1dc>
  4099e8:	442c      	add	r4, r5
  4099ea:	ea81 0603 	eor.w	r6, r1, r3
  4099ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4099f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4099f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4099fa:	bf18      	it	ne
  4099fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409a08:	d038      	beq.n	409a7c <__aeabi_dmul+0xb4>
  409a0a:	fba0 ce02 	umull	ip, lr, r0, r2
  409a0e:	f04f 0500 	mov.w	r5, #0
  409a12:	fbe1 e502 	umlal	lr, r5, r1, r2
  409a16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  409a1a:	fbe0 e503 	umlal	lr, r5, r0, r3
  409a1e:	f04f 0600 	mov.w	r6, #0
  409a22:	fbe1 5603 	umlal	r5, r6, r1, r3
  409a26:	f09c 0f00 	teq	ip, #0
  409a2a:	bf18      	it	ne
  409a2c:	f04e 0e01 	orrne.w	lr, lr, #1
  409a30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409a34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409a38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  409a3c:	d204      	bcs.n	409a48 <__aeabi_dmul+0x80>
  409a3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409a42:	416d      	adcs	r5, r5
  409a44:	eb46 0606 	adc.w	r6, r6, r6
  409a48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  409a4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409a50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409a54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409a58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  409a5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409a60:	bf88      	it	hi
  409a62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409a66:	d81e      	bhi.n	409aa6 <__aeabi_dmul+0xde>
  409a68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  409a6c:	bf08      	it	eq
  409a6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409a72:	f150 0000 	adcs.w	r0, r0, #0
  409a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409a7a:	bd70      	pop	{r4, r5, r6, pc}
  409a7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409a80:	ea46 0101 	orr.w	r1, r6, r1
  409a84:	ea40 0002 	orr.w	r0, r0, r2
  409a88:	ea81 0103 	eor.w	r1, r1, r3
  409a8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409a90:	bfc2      	ittt	gt
  409a92:	ebd4 050c 	rsbsgt	r5, r4, ip
  409a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409a9a:	bd70      	popgt	{r4, r5, r6, pc}
  409a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409aa0:	f04f 0e00 	mov.w	lr, #0
  409aa4:	3c01      	subs	r4, #1
  409aa6:	f300 80ab 	bgt.w	409c00 <__aeabi_dmul+0x238>
  409aaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  409aae:	bfde      	ittt	le
  409ab0:	2000      	movle	r0, #0
  409ab2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409ab6:	bd70      	pople	{r4, r5, r6, pc}
  409ab8:	f1c4 0400 	rsb	r4, r4, #0
  409abc:	3c20      	subs	r4, #32
  409abe:	da35      	bge.n	409b2c <__aeabi_dmul+0x164>
  409ac0:	340c      	adds	r4, #12
  409ac2:	dc1b      	bgt.n	409afc <__aeabi_dmul+0x134>
  409ac4:	f104 0414 	add.w	r4, r4, #20
  409ac8:	f1c4 0520 	rsb	r5, r4, #32
  409acc:	fa00 f305 	lsl.w	r3, r0, r5
  409ad0:	fa20 f004 	lsr.w	r0, r0, r4
  409ad4:	fa01 f205 	lsl.w	r2, r1, r5
  409ad8:	ea40 0002 	orr.w	r0, r0, r2
  409adc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409ae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409ae8:	fa21 f604 	lsr.w	r6, r1, r4
  409aec:	eb42 0106 	adc.w	r1, r2, r6
  409af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409af4:	bf08      	it	eq
  409af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409afa:	bd70      	pop	{r4, r5, r6, pc}
  409afc:	f1c4 040c 	rsb	r4, r4, #12
  409b00:	f1c4 0520 	rsb	r5, r4, #32
  409b04:	fa00 f304 	lsl.w	r3, r0, r4
  409b08:	fa20 f005 	lsr.w	r0, r0, r5
  409b0c:	fa01 f204 	lsl.w	r2, r1, r4
  409b10:	ea40 0002 	orr.w	r0, r0, r2
  409b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409b1c:	f141 0100 	adc.w	r1, r1, #0
  409b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409b24:	bf08      	it	eq
  409b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409b2a:	bd70      	pop	{r4, r5, r6, pc}
  409b2c:	f1c4 0520 	rsb	r5, r4, #32
  409b30:	fa00 f205 	lsl.w	r2, r0, r5
  409b34:	ea4e 0e02 	orr.w	lr, lr, r2
  409b38:	fa20 f304 	lsr.w	r3, r0, r4
  409b3c:	fa01 f205 	lsl.w	r2, r1, r5
  409b40:	ea43 0302 	orr.w	r3, r3, r2
  409b44:	fa21 f004 	lsr.w	r0, r1, r4
  409b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409b4c:	fa21 f204 	lsr.w	r2, r1, r4
  409b50:	ea20 0002 	bic.w	r0, r0, r2
  409b54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409b5c:	bf08      	it	eq
  409b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409b62:	bd70      	pop	{r4, r5, r6, pc}
  409b64:	f094 0f00 	teq	r4, #0
  409b68:	d10f      	bne.n	409b8a <__aeabi_dmul+0x1c2>
  409b6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  409b6e:	0040      	lsls	r0, r0, #1
  409b70:	eb41 0101 	adc.w	r1, r1, r1
  409b74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409b78:	bf08      	it	eq
  409b7a:	3c01      	subeq	r4, #1
  409b7c:	d0f7      	beq.n	409b6e <__aeabi_dmul+0x1a6>
  409b7e:	ea41 0106 	orr.w	r1, r1, r6
  409b82:	f095 0f00 	teq	r5, #0
  409b86:	bf18      	it	ne
  409b88:	4770      	bxne	lr
  409b8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  409b8e:	0052      	lsls	r2, r2, #1
  409b90:	eb43 0303 	adc.w	r3, r3, r3
  409b94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409b98:	bf08      	it	eq
  409b9a:	3d01      	subeq	r5, #1
  409b9c:	d0f7      	beq.n	409b8e <__aeabi_dmul+0x1c6>
  409b9e:	ea43 0306 	orr.w	r3, r3, r6
  409ba2:	4770      	bx	lr
  409ba4:	ea94 0f0c 	teq	r4, ip
  409ba8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409bac:	bf18      	it	ne
  409bae:	ea95 0f0c 	teqne	r5, ip
  409bb2:	d00c      	beq.n	409bce <__aeabi_dmul+0x206>
  409bb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409bb8:	bf18      	it	ne
  409bba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409bbe:	d1d1      	bne.n	409b64 <__aeabi_dmul+0x19c>
  409bc0:	ea81 0103 	eor.w	r1, r1, r3
  409bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409bc8:	f04f 0000 	mov.w	r0, #0
  409bcc:	bd70      	pop	{r4, r5, r6, pc}
  409bce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409bd2:	bf06      	itte	eq
  409bd4:	4610      	moveq	r0, r2
  409bd6:	4619      	moveq	r1, r3
  409bd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409bdc:	d019      	beq.n	409c12 <__aeabi_dmul+0x24a>
  409bde:	ea94 0f0c 	teq	r4, ip
  409be2:	d102      	bne.n	409bea <__aeabi_dmul+0x222>
  409be4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409be8:	d113      	bne.n	409c12 <__aeabi_dmul+0x24a>
  409bea:	ea95 0f0c 	teq	r5, ip
  409bee:	d105      	bne.n	409bfc <__aeabi_dmul+0x234>
  409bf0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409bf4:	bf1c      	itt	ne
  409bf6:	4610      	movne	r0, r2
  409bf8:	4619      	movne	r1, r3
  409bfa:	d10a      	bne.n	409c12 <__aeabi_dmul+0x24a>
  409bfc:	ea81 0103 	eor.w	r1, r1, r3
  409c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409c04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409c08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409c0c:	f04f 0000 	mov.w	r0, #0
  409c10:	bd70      	pop	{r4, r5, r6, pc}
  409c12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409c16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  409c1a:	bd70      	pop	{r4, r5, r6, pc}

00409c1c <__aeabi_ddiv>:
  409c1c:	b570      	push	{r4, r5, r6, lr}
  409c1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409c22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409c26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409c2a:	bf1d      	ittte	ne
  409c2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409c30:	ea94 0f0c 	teqne	r4, ip
  409c34:	ea95 0f0c 	teqne	r5, ip
  409c38:	f000 f8a7 	bleq	409d8a <__aeabi_ddiv+0x16e>
  409c3c:	eba4 0405 	sub.w	r4, r4, r5
  409c40:	ea81 0e03 	eor.w	lr, r1, r3
  409c44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409c48:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409c4c:	f000 8088 	beq.w	409d60 <__aeabi_ddiv+0x144>
  409c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409c54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409c58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  409c5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409c60:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409c64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409c68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  409c6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409c70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409c74:	429d      	cmp	r5, r3
  409c76:	bf08      	it	eq
  409c78:	4296      	cmpeq	r6, r2
  409c7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  409c7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409c82:	d202      	bcs.n	409c8a <__aeabi_ddiv+0x6e>
  409c84:	085b      	lsrs	r3, r3, #1
  409c86:	ea4f 0232 	mov.w	r2, r2, rrx
  409c8a:	1ab6      	subs	r6, r6, r2
  409c8c:	eb65 0503 	sbc.w	r5, r5, r3
  409c90:	085b      	lsrs	r3, r3, #1
  409c92:	ea4f 0232 	mov.w	r2, r2, rrx
  409c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  409c9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  409c9e:	ebb6 0e02 	subs.w	lr, r6, r2
  409ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
  409ca6:	bf22      	ittt	cs
  409ca8:	1ab6      	subcs	r6, r6, r2
  409caa:	4675      	movcs	r5, lr
  409cac:	ea40 000c 	orrcs.w	r0, r0, ip
  409cb0:	085b      	lsrs	r3, r3, #1
  409cb2:	ea4f 0232 	mov.w	r2, r2, rrx
  409cb6:	ebb6 0e02 	subs.w	lr, r6, r2
  409cba:	eb75 0e03 	sbcs.w	lr, r5, r3
  409cbe:	bf22      	ittt	cs
  409cc0:	1ab6      	subcs	r6, r6, r2
  409cc2:	4675      	movcs	r5, lr
  409cc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409cc8:	085b      	lsrs	r3, r3, #1
  409cca:	ea4f 0232 	mov.w	r2, r2, rrx
  409cce:	ebb6 0e02 	subs.w	lr, r6, r2
  409cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
  409cd6:	bf22      	ittt	cs
  409cd8:	1ab6      	subcs	r6, r6, r2
  409cda:	4675      	movcs	r5, lr
  409cdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  409ce0:	085b      	lsrs	r3, r3, #1
  409ce2:	ea4f 0232 	mov.w	r2, r2, rrx
  409ce6:	ebb6 0e02 	subs.w	lr, r6, r2
  409cea:	eb75 0e03 	sbcs.w	lr, r5, r3
  409cee:	bf22      	ittt	cs
  409cf0:	1ab6      	subcs	r6, r6, r2
  409cf2:	4675      	movcs	r5, lr
  409cf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  409cf8:	ea55 0e06 	orrs.w	lr, r5, r6
  409cfc:	d018      	beq.n	409d30 <__aeabi_ddiv+0x114>
  409cfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409d02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409d06:	ea4f 1606 	mov.w	r6, r6, lsl #4
  409d0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  409d0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409d12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409d16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  409d1a:	d1c0      	bne.n	409c9e <__aeabi_ddiv+0x82>
  409d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409d20:	d10b      	bne.n	409d3a <__aeabi_ddiv+0x11e>
  409d22:	ea41 0100 	orr.w	r1, r1, r0
  409d26:	f04f 0000 	mov.w	r0, #0
  409d2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  409d2e:	e7b6      	b.n	409c9e <__aeabi_ddiv+0x82>
  409d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409d34:	bf04      	itt	eq
  409d36:	4301      	orreq	r1, r0
  409d38:	2000      	moveq	r0, #0
  409d3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409d3e:	bf88      	it	hi
  409d40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409d44:	f63f aeaf 	bhi.w	409aa6 <__aeabi_dmul+0xde>
  409d48:	ebb5 0c03 	subs.w	ip, r5, r3
  409d4c:	bf04      	itt	eq
  409d4e:	ebb6 0c02 	subseq.w	ip, r6, r2
  409d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409d56:	f150 0000 	adcs.w	r0, r0, #0
  409d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409d5e:	bd70      	pop	{r4, r5, r6, pc}
  409d60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409d64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409d68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  409d6c:	bfc2      	ittt	gt
  409d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409d76:	bd70      	popgt	{r4, r5, r6, pc}
  409d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409d7c:	f04f 0e00 	mov.w	lr, #0
  409d80:	3c01      	subs	r4, #1
  409d82:	e690      	b.n	409aa6 <__aeabi_dmul+0xde>
  409d84:	ea45 0e06 	orr.w	lr, r5, r6
  409d88:	e68d      	b.n	409aa6 <__aeabi_dmul+0xde>
  409d8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409d8e:	ea94 0f0c 	teq	r4, ip
  409d92:	bf08      	it	eq
  409d94:	ea95 0f0c 	teqeq	r5, ip
  409d98:	f43f af3b 	beq.w	409c12 <__aeabi_dmul+0x24a>
  409d9c:	ea94 0f0c 	teq	r4, ip
  409da0:	d10a      	bne.n	409db8 <__aeabi_ddiv+0x19c>
  409da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409da6:	f47f af34 	bne.w	409c12 <__aeabi_dmul+0x24a>
  409daa:	ea95 0f0c 	teq	r5, ip
  409dae:	f47f af25 	bne.w	409bfc <__aeabi_dmul+0x234>
  409db2:	4610      	mov	r0, r2
  409db4:	4619      	mov	r1, r3
  409db6:	e72c      	b.n	409c12 <__aeabi_dmul+0x24a>
  409db8:	ea95 0f0c 	teq	r5, ip
  409dbc:	d106      	bne.n	409dcc <__aeabi_ddiv+0x1b0>
  409dbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409dc2:	f43f aefd 	beq.w	409bc0 <__aeabi_dmul+0x1f8>
  409dc6:	4610      	mov	r0, r2
  409dc8:	4619      	mov	r1, r3
  409dca:	e722      	b.n	409c12 <__aeabi_dmul+0x24a>
  409dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409dd0:	bf18      	it	ne
  409dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409dd6:	f47f aec5 	bne.w	409b64 <__aeabi_dmul+0x19c>
  409dda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  409dde:	f47f af0d 	bne.w	409bfc <__aeabi_dmul+0x234>
  409de2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409de6:	f47f aeeb 	bne.w	409bc0 <__aeabi_dmul+0x1f8>
  409dea:	e712      	b.n	409c12 <__aeabi_dmul+0x24a>

00409dec <__gedf2>:
  409dec:	f04f 3cff 	mov.w	ip, #4294967295
  409df0:	e006      	b.n	409e00 <__cmpdf2+0x4>
  409df2:	bf00      	nop

00409df4 <__ledf2>:
  409df4:	f04f 0c01 	mov.w	ip, #1
  409df8:	e002      	b.n	409e00 <__cmpdf2+0x4>
  409dfa:	bf00      	nop

00409dfc <__cmpdf2>:
  409dfc:	f04f 0c01 	mov.w	ip, #1
  409e00:	f84d cd04 	str.w	ip, [sp, #-4]!
  409e04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409e08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409e10:	bf18      	it	ne
  409e12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409e16:	d01b      	beq.n	409e50 <__cmpdf2+0x54>
  409e18:	b001      	add	sp, #4
  409e1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409e1e:	bf0c      	ite	eq
  409e20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409e24:	ea91 0f03 	teqne	r1, r3
  409e28:	bf02      	ittt	eq
  409e2a:	ea90 0f02 	teqeq	r0, r2
  409e2e:	2000      	moveq	r0, #0
  409e30:	4770      	bxeq	lr
  409e32:	f110 0f00 	cmn.w	r0, #0
  409e36:	ea91 0f03 	teq	r1, r3
  409e3a:	bf58      	it	pl
  409e3c:	4299      	cmppl	r1, r3
  409e3e:	bf08      	it	eq
  409e40:	4290      	cmpeq	r0, r2
  409e42:	bf2c      	ite	cs
  409e44:	17d8      	asrcs	r0, r3, #31
  409e46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409e4a:	f040 0001 	orr.w	r0, r0, #1
  409e4e:	4770      	bx	lr
  409e50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409e58:	d102      	bne.n	409e60 <__cmpdf2+0x64>
  409e5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409e5e:	d107      	bne.n	409e70 <__cmpdf2+0x74>
  409e60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409e68:	d1d6      	bne.n	409e18 <__cmpdf2+0x1c>
  409e6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409e6e:	d0d3      	beq.n	409e18 <__cmpdf2+0x1c>
  409e70:	f85d 0b04 	ldr.w	r0, [sp], #4
  409e74:	4770      	bx	lr
  409e76:	bf00      	nop

00409e78 <__aeabi_cdrcmple>:
  409e78:	4684      	mov	ip, r0
  409e7a:	4610      	mov	r0, r2
  409e7c:	4662      	mov	r2, ip
  409e7e:	468c      	mov	ip, r1
  409e80:	4619      	mov	r1, r3
  409e82:	4663      	mov	r3, ip
  409e84:	e000      	b.n	409e88 <__aeabi_cdcmpeq>
  409e86:	bf00      	nop

00409e88 <__aeabi_cdcmpeq>:
  409e88:	b501      	push	{r0, lr}
  409e8a:	f7ff ffb7 	bl	409dfc <__cmpdf2>
  409e8e:	2800      	cmp	r0, #0
  409e90:	bf48      	it	mi
  409e92:	f110 0f00 	cmnmi.w	r0, #0
  409e96:	bd01      	pop	{r0, pc}

00409e98 <__aeabi_dcmpeq>:
  409e98:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e9c:	f7ff fff4 	bl	409e88 <__aeabi_cdcmpeq>
  409ea0:	bf0c      	ite	eq
  409ea2:	2001      	moveq	r0, #1
  409ea4:	2000      	movne	r0, #0
  409ea6:	f85d fb08 	ldr.w	pc, [sp], #8
  409eaa:	bf00      	nop

00409eac <__aeabi_dcmplt>:
  409eac:	f84d ed08 	str.w	lr, [sp, #-8]!
  409eb0:	f7ff ffea 	bl	409e88 <__aeabi_cdcmpeq>
  409eb4:	bf34      	ite	cc
  409eb6:	2001      	movcc	r0, #1
  409eb8:	2000      	movcs	r0, #0
  409eba:	f85d fb08 	ldr.w	pc, [sp], #8
  409ebe:	bf00      	nop

00409ec0 <__aeabi_dcmple>:
  409ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
  409ec4:	f7ff ffe0 	bl	409e88 <__aeabi_cdcmpeq>
  409ec8:	bf94      	ite	ls
  409eca:	2001      	movls	r0, #1
  409ecc:	2000      	movhi	r0, #0
  409ece:	f85d fb08 	ldr.w	pc, [sp], #8
  409ed2:	bf00      	nop

00409ed4 <__aeabi_dcmpge>:
  409ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
  409ed8:	f7ff ffce 	bl	409e78 <__aeabi_cdrcmple>
  409edc:	bf94      	ite	ls
  409ede:	2001      	movls	r0, #1
  409ee0:	2000      	movhi	r0, #0
  409ee2:	f85d fb08 	ldr.w	pc, [sp], #8
  409ee6:	bf00      	nop

00409ee8 <__aeabi_dcmpgt>:
  409ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
  409eec:	f7ff ffc4 	bl	409e78 <__aeabi_cdrcmple>
  409ef0:	bf34      	ite	cc
  409ef2:	2001      	movcc	r0, #1
  409ef4:	2000      	movcs	r0, #0
  409ef6:	f85d fb08 	ldr.w	pc, [sp], #8
  409efa:	bf00      	nop

00409efc <__aeabi_dcmpun>:
  409efc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409f00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409f04:	d102      	bne.n	409f0c <__aeabi_dcmpun+0x10>
  409f06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409f0a:	d10a      	bne.n	409f22 <__aeabi_dcmpun+0x26>
  409f0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409f14:	d102      	bne.n	409f1c <__aeabi_dcmpun+0x20>
  409f16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409f1a:	d102      	bne.n	409f22 <__aeabi_dcmpun+0x26>
  409f1c:	f04f 0000 	mov.w	r0, #0
  409f20:	4770      	bx	lr
  409f22:	f04f 0001 	mov.w	r0, #1
  409f26:	4770      	bx	lr

00409f28 <__aeabi_d2iz>:
  409f28:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409f2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409f30:	d215      	bcs.n	409f5e <__aeabi_d2iz+0x36>
  409f32:	d511      	bpl.n	409f58 <__aeabi_d2iz+0x30>
  409f34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409f38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409f3c:	d912      	bls.n	409f64 <__aeabi_d2iz+0x3c>
  409f3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409f46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409f4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409f4e:	fa23 f002 	lsr.w	r0, r3, r2
  409f52:	bf18      	it	ne
  409f54:	4240      	negne	r0, r0
  409f56:	4770      	bx	lr
  409f58:	f04f 0000 	mov.w	r0, #0
  409f5c:	4770      	bx	lr
  409f5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409f62:	d105      	bne.n	409f70 <__aeabi_d2iz+0x48>
  409f64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409f68:	bf08      	it	eq
  409f6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409f6e:	4770      	bx	lr
  409f70:	f04f 0000 	mov.w	r0, #0
  409f74:	4770      	bx	lr
  409f76:	bf00      	nop

00409f78 <__aeabi_uldivmod>:
  409f78:	b953      	cbnz	r3, 409f90 <__aeabi_uldivmod+0x18>
  409f7a:	b94a      	cbnz	r2, 409f90 <__aeabi_uldivmod+0x18>
  409f7c:	2900      	cmp	r1, #0
  409f7e:	bf08      	it	eq
  409f80:	2800      	cmpeq	r0, #0
  409f82:	bf1c      	itt	ne
  409f84:	f04f 31ff 	movne.w	r1, #4294967295
  409f88:	f04f 30ff 	movne.w	r0, #4294967295
  409f8c:	f000 b97a 	b.w	40a284 <__aeabi_idiv0>
  409f90:	f1ad 0c08 	sub.w	ip, sp, #8
  409f94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409f98:	f000 f806 	bl	409fa8 <__udivmoddi4>
  409f9c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409fa4:	b004      	add	sp, #16
  409fa6:	4770      	bx	lr

00409fa8 <__udivmoddi4>:
  409fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409fac:	468c      	mov	ip, r1
  409fae:	460d      	mov	r5, r1
  409fb0:	4604      	mov	r4, r0
  409fb2:	9e08      	ldr	r6, [sp, #32]
  409fb4:	2b00      	cmp	r3, #0
  409fb6:	d151      	bne.n	40a05c <__udivmoddi4+0xb4>
  409fb8:	428a      	cmp	r2, r1
  409fba:	4617      	mov	r7, r2
  409fbc:	d96d      	bls.n	40a09a <__udivmoddi4+0xf2>
  409fbe:	fab2 fe82 	clz	lr, r2
  409fc2:	f1be 0f00 	cmp.w	lr, #0
  409fc6:	d00b      	beq.n	409fe0 <__udivmoddi4+0x38>
  409fc8:	f1ce 0c20 	rsb	ip, lr, #32
  409fcc:	fa01 f50e 	lsl.w	r5, r1, lr
  409fd0:	fa20 fc0c 	lsr.w	ip, r0, ip
  409fd4:	fa02 f70e 	lsl.w	r7, r2, lr
  409fd8:	ea4c 0c05 	orr.w	ip, ip, r5
  409fdc:	fa00 f40e 	lsl.w	r4, r0, lr
  409fe0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409fe4:	0c25      	lsrs	r5, r4, #16
  409fe6:	fbbc f8fa 	udiv	r8, ip, sl
  409fea:	fa1f f987 	uxth.w	r9, r7
  409fee:	fb0a cc18 	mls	ip, sl, r8, ip
  409ff2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409ff6:	fb08 f309 	mul.w	r3, r8, r9
  409ffa:	42ab      	cmp	r3, r5
  409ffc:	d90a      	bls.n	40a014 <__udivmoddi4+0x6c>
  409ffe:	19ed      	adds	r5, r5, r7
  40a000:	f108 32ff 	add.w	r2, r8, #4294967295
  40a004:	f080 8123 	bcs.w	40a24e <__udivmoddi4+0x2a6>
  40a008:	42ab      	cmp	r3, r5
  40a00a:	f240 8120 	bls.w	40a24e <__udivmoddi4+0x2a6>
  40a00e:	f1a8 0802 	sub.w	r8, r8, #2
  40a012:	443d      	add	r5, r7
  40a014:	1aed      	subs	r5, r5, r3
  40a016:	b2a4      	uxth	r4, r4
  40a018:	fbb5 f0fa 	udiv	r0, r5, sl
  40a01c:	fb0a 5510 	mls	r5, sl, r0, r5
  40a020:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a024:	fb00 f909 	mul.w	r9, r0, r9
  40a028:	45a1      	cmp	r9, r4
  40a02a:	d909      	bls.n	40a040 <__udivmoddi4+0x98>
  40a02c:	19e4      	adds	r4, r4, r7
  40a02e:	f100 33ff 	add.w	r3, r0, #4294967295
  40a032:	f080 810a 	bcs.w	40a24a <__udivmoddi4+0x2a2>
  40a036:	45a1      	cmp	r9, r4
  40a038:	f240 8107 	bls.w	40a24a <__udivmoddi4+0x2a2>
  40a03c:	3802      	subs	r0, #2
  40a03e:	443c      	add	r4, r7
  40a040:	eba4 0409 	sub.w	r4, r4, r9
  40a044:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a048:	2100      	movs	r1, #0
  40a04a:	2e00      	cmp	r6, #0
  40a04c:	d061      	beq.n	40a112 <__udivmoddi4+0x16a>
  40a04e:	fa24 f40e 	lsr.w	r4, r4, lr
  40a052:	2300      	movs	r3, #0
  40a054:	6034      	str	r4, [r6, #0]
  40a056:	6073      	str	r3, [r6, #4]
  40a058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a05c:	428b      	cmp	r3, r1
  40a05e:	d907      	bls.n	40a070 <__udivmoddi4+0xc8>
  40a060:	2e00      	cmp	r6, #0
  40a062:	d054      	beq.n	40a10e <__udivmoddi4+0x166>
  40a064:	2100      	movs	r1, #0
  40a066:	e886 0021 	stmia.w	r6, {r0, r5}
  40a06a:	4608      	mov	r0, r1
  40a06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a070:	fab3 f183 	clz	r1, r3
  40a074:	2900      	cmp	r1, #0
  40a076:	f040 808e 	bne.w	40a196 <__udivmoddi4+0x1ee>
  40a07a:	42ab      	cmp	r3, r5
  40a07c:	d302      	bcc.n	40a084 <__udivmoddi4+0xdc>
  40a07e:	4282      	cmp	r2, r0
  40a080:	f200 80fa 	bhi.w	40a278 <__udivmoddi4+0x2d0>
  40a084:	1a84      	subs	r4, r0, r2
  40a086:	eb65 0503 	sbc.w	r5, r5, r3
  40a08a:	2001      	movs	r0, #1
  40a08c:	46ac      	mov	ip, r5
  40a08e:	2e00      	cmp	r6, #0
  40a090:	d03f      	beq.n	40a112 <__udivmoddi4+0x16a>
  40a092:	e886 1010 	stmia.w	r6, {r4, ip}
  40a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a09a:	b912      	cbnz	r2, 40a0a2 <__udivmoddi4+0xfa>
  40a09c:	2701      	movs	r7, #1
  40a09e:	fbb7 f7f2 	udiv	r7, r7, r2
  40a0a2:	fab7 fe87 	clz	lr, r7
  40a0a6:	f1be 0f00 	cmp.w	lr, #0
  40a0aa:	d134      	bne.n	40a116 <__udivmoddi4+0x16e>
  40a0ac:	1beb      	subs	r3, r5, r7
  40a0ae:	0c3a      	lsrs	r2, r7, #16
  40a0b0:	fa1f fc87 	uxth.w	ip, r7
  40a0b4:	2101      	movs	r1, #1
  40a0b6:	fbb3 f8f2 	udiv	r8, r3, r2
  40a0ba:	0c25      	lsrs	r5, r4, #16
  40a0bc:	fb02 3318 	mls	r3, r2, r8, r3
  40a0c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a0c4:	fb0c f308 	mul.w	r3, ip, r8
  40a0c8:	42ab      	cmp	r3, r5
  40a0ca:	d907      	bls.n	40a0dc <__udivmoddi4+0x134>
  40a0cc:	19ed      	adds	r5, r5, r7
  40a0ce:	f108 30ff 	add.w	r0, r8, #4294967295
  40a0d2:	d202      	bcs.n	40a0da <__udivmoddi4+0x132>
  40a0d4:	42ab      	cmp	r3, r5
  40a0d6:	f200 80d1 	bhi.w	40a27c <__udivmoddi4+0x2d4>
  40a0da:	4680      	mov	r8, r0
  40a0dc:	1aed      	subs	r5, r5, r3
  40a0de:	b2a3      	uxth	r3, r4
  40a0e0:	fbb5 f0f2 	udiv	r0, r5, r2
  40a0e4:	fb02 5510 	mls	r5, r2, r0, r5
  40a0e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a0ec:	fb0c fc00 	mul.w	ip, ip, r0
  40a0f0:	45a4      	cmp	ip, r4
  40a0f2:	d907      	bls.n	40a104 <__udivmoddi4+0x15c>
  40a0f4:	19e4      	adds	r4, r4, r7
  40a0f6:	f100 33ff 	add.w	r3, r0, #4294967295
  40a0fa:	d202      	bcs.n	40a102 <__udivmoddi4+0x15a>
  40a0fc:	45a4      	cmp	ip, r4
  40a0fe:	f200 80b8 	bhi.w	40a272 <__udivmoddi4+0x2ca>
  40a102:	4618      	mov	r0, r3
  40a104:	eba4 040c 	sub.w	r4, r4, ip
  40a108:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a10c:	e79d      	b.n	40a04a <__udivmoddi4+0xa2>
  40a10e:	4631      	mov	r1, r6
  40a110:	4630      	mov	r0, r6
  40a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a116:	f1ce 0420 	rsb	r4, lr, #32
  40a11a:	fa05 f30e 	lsl.w	r3, r5, lr
  40a11e:	fa07 f70e 	lsl.w	r7, r7, lr
  40a122:	fa20 f804 	lsr.w	r8, r0, r4
  40a126:	0c3a      	lsrs	r2, r7, #16
  40a128:	fa25 f404 	lsr.w	r4, r5, r4
  40a12c:	ea48 0803 	orr.w	r8, r8, r3
  40a130:	fbb4 f1f2 	udiv	r1, r4, r2
  40a134:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a138:	fb02 4411 	mls	r4, r2, r1, r4
  40a13c:	fa1f fc87 	uxth.w	ip, r7
  40a140:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a144:	fb01 f30c 	mul.w	r3, r1, ip
  40a148:	42ab      	cmp	r3, r5
  40a14a:	fa00 f40e 	lsl.w	r4, r0, lr
  40a14e:	d909      	bls.n	40a164 <__udivmoddi4+0x1bc>
  40a150:	19ed      	adds	r5, r5, r7
  40a152:	f101 30ff 	add.w	r0, r1, #4294967295
  40a156:	f080 808a 	bcs.w	40a26e <__udivmoddi4+0x2c6>
  40a15a:	42ab      	cmp	r3, r5
  40a15c:	f240 8087 	bls.w	40a26e <__udivmoddi4+0x2c6>
  40a160:	3902      	subs	r1, #2
  40a162:	443d      	add	r5, r7
  40a164:	1aeb      	subs	r3, r5, r3
  40a166:	fa1f f588 	uxth.w	r5, r8
  40a16a:	fbb3 f0f2 	udiv	r0, r3, r2
  40a16e:	fb02 3310 	mls	r3, r2, r0, r3
  40a172:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a176:	fb00 f30c 	mul.w	r3, r0, ip
  40a17a:	42ab      	cmp	r3, r5
  40a17c:	d907      	bls.n	40a18e <__udivmoddi4+0x1e6>
  40a17e:	19ed      	adds	r5, r5, r7
  40a180:	f100 38ff 	add.w	r8, r0, #4294967295
  40a184:	d26f      	bcs.n	40a266 <__udivmoddi4+0x2be>
  40a186:	42ab      	cmp	r3, r5
  40a188:	d96d      	bls.n	40a266 <__udivmoddi4+0x2be>
  40a18a:	3802      	subs	r0, #2
  40a18c:	443d      	add	r5, r7
  40a18e:	1aeb      	subs	r3, r5, r3
  40a190:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a194:	e78f      	b.n	40a0b6 <__udivmoddi4+0x10e>
  40a196:	f1c1 0720 	rsb	r7, r1, #32
  40a19a:	fa22 f807 	lsr.w	r8, r2, r7
  40a19e:	408b      	lsls	r3, r1
  40a1a0:	fa05 f401 	lsl.w	r4, r5, r1
  40a1a4:	ea48 0303 	orr.w	r3, r8, r3
  40a1a8:	fa20 fe07 	lsr.w	lr, r0, r7
  40a1ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a1b0:	40fd      	lsrs	r5, r7
  40a1b2:	ea4e 0e04 	orr.w	lr, lr, r4
  40a1b6:	fbb5 f9fc 	udiv	r9, r5, ip
  40a1ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a1be:	fb0c 5519 	mls	r5, ip, r9, r5
  40a1c2:	fa1f f883 	uxth.w	r8, r3
  40a1c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a1ca:	fb09 f408 	mul.w	r4, r9, r8
  40a1ce:	42ac      	cmp	r4, r5
  40a1d0:	fa02 f201 	lsl.w	r2, r2, r1
  40a1d4:	fa00 fa01 	lsl.w	sl, r0, r1
  40a1d8:	d908      	bls.n	40a1ec <__udivmoddi4+0x244>
  40a1da:	18ed      	adds	r5, r5, r3
  40a1dc:	f109 30ff 	add.w	r0, r9, #4294967295
  40a1e0:	d243      	bcs.n	40a26a <__udivmoddi4+0x2c2>
  40a1e2:	42ac      	cmp	r4, r5
  40a1e4:	d941      	bls.n	40a26a <__udivmoddi4+0x2c2>
  40a1e6:	f1a9 0902 	sub.w	r9, r9, #2
  40a1ea:	441d      	add	r5, r3
  40a1ec:	1b2d      	subs	r5, r5, r4
  40a1ee:	fa1f fe8e 	uxth.w	lr, lr
  40a1f2:	fbb5 f0fc 	udiv	r0, r5, ip
  40a1f6:	fb0c 5510 	mls	r5, ip, r0, r5
  40a1fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a1fe:	fb00 f808 	mul.w	r8, r0, r8
  40a202:	45a0      	cmp	r8, r4
  40a204:	d907      	bls.n	40a216 <__udivmoddi4+0x26e>
  40a206:	18e4      	adds	r4, r4, r3
  40a208:	f100 35ff 	add.w	r5, r0, #4294967295
  40a20c:	d229      	bcs.n	40a262 <__udivmoddi4+0x2ba>
  40a20e:	45a0      	cmp	r8, r4
  40a210:	d927      	bls.n	40a262 <__udivmoddi4+0x2ba>
  40a212:	3802      	subs	r0, #2
  40a214:	441c      	add	r4, r3
  40a216:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a21a:	eba4 0408 	sub.w	r4, r4, r8
  40a21e:	fba0 8902 	umull	r8, r9, r0, r2
  40a222:	454c      	cmp	r4, r9
  40a224:	46c6      	mov	lr, r8
  40a226:	464d      	mov	r5, r9
  40a228:	d315      	bcc.n	40a256 <__udivmoddi4+0x2ae>
  40a22a:	d012      	beq.n	40a252 <__udivmoddi4+0x2aa>
  40a22c:	b156      	cbz	r6, 40a244 <__udivmoddi4+0x29c>
  40a22e:	ebba 030e 	subs.w	r3, sl, lr
  40a232:	eb64 0405 	sbc.w	r4, r4, r5
  40a236:	fa04 f707 	lsl.w	r7, r4, r7
  40a23a:	40cb      	lsrs	r3, r1
  40a23c:	431f      	orrs	r7, r3
  40a23e:	40cc      	lsrs	r4, r1
  40a240:	6037      	str	r7, [r6, #0]
  40a242:	6074      	str	r4, [r6, #4]
  40a244:	2100      	movs	r1, #0
  40a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a24a:	4618      	mov	r0, r3
  40a24c:	e6f8      	b.n	40a040 <__udivmoddi4+0x98>
  40a24e:	4690      	mov	r8, r2
  40a250:	e6e0      	b.n	40a014 <__udivmoddi4+0x6c>
  40a252:	45c2      	cmp	sl, r8
  40a254:	d2ea      	bcs.n	40a22c <__udivmoddi4+0x284>
  40a256:	ebb8 0e02 	subs.w	lr, r8, r2
  40a25a:	eb69 0503 	sbc.w	r5, r9, r3
  40a25e:	3801      	subs	r0, #1
  40a260:	e7e4      	b.n	40a22c <__udivmoddi4+0x284>
  40a262:	4628      	mov	r0, r5
  40a264:	e7d7      	b.n	40a216 <__udivmoddi4+0x26e>
  40a266:	4640      	mov	r0, r8
  40a268:	e791      	b.n	40a18e <__udivmoddi4+0x1e6>
  40a26a:	4681      	mov	r9, r0
  40a26c:	e7be      	b.n	40a1ec <__udivmoddi4+0x244>
  40a26e:	4601      	mov	r1, r0
  40a270:	e778      	b.n	40a164 <__udivmoddi4+0x1bc>
  40a272:	3802      	subs	r0, #2
  40a274:	443c      	add	r4, r7
  40a276:	e745      	b.n	40a104 <__udivmoddi4+0x15c>
  40a278:	4608      	mov	r0, r1
  40a27a:	e708      	b.n	40a08e <__udivmoddi4+0xe6>
  40a27c:	f1a8 0802 	sub.w	r8, r8, #2
  40a280:	443d      	add	r5, r7
  40a282:	e72b      	b.n	40a0dc <__udivmoddi4+0x134>

0040a284 <__aeabi_idiv0>:
  40a284:	4770      	bx	lr
  40a286:	bf00      	nop
  40a288:	09632509 	.word	0x09632509
  40a28c:	25097525 	.word	0x25097525
  40a290:	75250975 	.word	0x75250975
  40a294:	00000a0d 	.word	0x00000a0d
  40a298:	454c4449 	.word	0x454c4449
  40a29c:	00000000 	.word	0x00000000
  40a2a0:	51726d54 	.word	0x51726d54
  40a2a4:	00000000 	.word	0x00000000
  40a2a8:	20726d54 	.word	0x20726d54
  40a2ac:	00637653 	.word	0x00637653
  40a2b0:	72746e65 	.word	0x72746e65
  40a2b4:	6520756f 	.word	0x6520756f
  40a2b8:	5355206d 	.word	0x5355206d
  40a2bc:	31545241 	.word	0x31545241
  40a2c0:	4e41485f 	.word	0x4e41485f
  40a2c4:	52454c44 	.word	0x52454c44
  40a2c8:	00000a20 	.word	0x00000a20
  40a2cc:	5f747562 	.word	0x5f747562
  40a2d0:	6c6c6163 	.word	0x6c6c6163
  40a2d4:	6b636162 	.word	0x6b636162
  40a2d8:	00000a20 	.word	0x00000a20
  40a2dc:	616d6573 	.word	0x616d6573
  40a2e0:	6f726166 	.word	0x6f726166
  40a2e4:	20787420 	.word	0x20787420
  40a2e8:	0000000a 	.word	0x0000000a
  40a2ec:	46202d2d 	.word	0x46202d2d
  40a2f0:	72656572 	.word	0x72656572
  40a2f4:	20736f74 	.word	0x20736f74
  40a2f8:	6d617845 	.word	0x6d617845
  40a2fc:	20656c70 	.word	0x20656c70
  40a300:	0d0a2d2d 	.word	0x0d0a2d2d
  40a304:	00000000 	.word	0x00000000
  40a308:	454d4153 	.word	0x454d4153
  40a30c:	582d3037 	.word	0x582d3037
  40a310:	00444c50 	.word	0x00444c50
  40a314:	25202d2d 	.word	0x25202d2d
  40a318:	000d0a73 	.word	0x000d0a73
  40a31c:	323a3231 	.word	0x323a3231
  40a320:	31333a32 	.word	0x31333a32
  40a324:	00000000 	.word	0x00000000
  40a328:	2079614d 	.word	0x2079614d
  40a32c:	32203820 	.word	0x32203820
  40a330:	00303230 	.word	0x00303230
  40a334:	43202d2d 	.word	0x43202d2d
  40a338:	69706d6f 	.word	0x69706d6f
  40a33c:	3a64656c 	.word	0x3a64656c
  40a340:	20732520 	.word	0x20732520
  40a344:	2d207325 	.word	0x2d207325
  40a348:	000d0a2d 	.word	0x000d0a2d
  40a34c:	696e6f4d 	.word	0x696e6f4d
  40a350:	00726f74 	.word	0x00726f74
  40a354:	6c696146 	.word	0x6c696146
  40a358:	74206465 	.word	0x74206465
  40a35c:	7263206f 	.word	0x7263206f
  40a360:	65746165 	.word	0x65746165
  40a364:	6e6f4d20 	.word	0x6e6f4d20
  40a368:	726f7469 	.word	0x726f7469
  40a36c:	73617420 	.word	0x73617420
  40a370:	000a0d6b 	.word	0x000a0d6b
  40a374:	0064654c 	.word	0x0064654c
  40a378:	6c696146 	.word	0x6c696146
  40a37c:	74206465 	.word	0x74206465
  40a380:	7263206f 	.word	0x7263206f
  40a384:	65746165 	.word	0x65746165
  40a388:	73657420 	.word	0x73657420
  40a38c:	656c2074 	.word	0x656c2074
  40a390:	61742064 	.word	0x61742064
  40a394:	0a0d6b73 	.word	0x0a0d6b73
  40a398:	00000000 	.word	0x00000000
  40a39c:	74726175 	.word	0x74726175
  40a3a0:	00007852 	.word	0x00007852
  40a3a4:	6c696146 	.word	0x6c696146
  40a3a8:	74206465 	.word	0x74206465
  40a3ac:	7263206f 	.word	0x7263206f
  40a3b0:	65746165 	.word	0x65746165
  40a3b4:	73657420 	.word	0x73657420
  40a3b8:	61742074 	.word	0x61742074
  40a3bc:	75206b73 	.word	0x75206b73
  40a3c0:	52747261 	.word	0x52747261
  40a3c4:	000a0d58 	.word	0x000a0d58
  40a3c8:	63657865 	.word	0x63657865
  40a3cc:	00657475 	.word	0x00657475
  40a3d0:	6c696146 	.word	0x6c696146
  40a3d4:	74206465 	.word	0x74206465
  40a3d8:	7263206f 	.word	0x7263206f
  40a3dc:	65746165 	.word	0x65746165
  40a3e0:	73617420 	.word	0x73617420
  40a3e4:	7865206b 	.word	0x7865206b
  40a3e8:	74756365 	.word	0x74756365
  40a3ec:	000a0d65 	.word	0x000a0d65
  40a3f0:	746e6544 	.word	0x746e6544
  40a3f4:	64206f72 	.word	0x64206f72
  40a3f8:	6572206f 	.word	0x6572206f
  40a3fc:	76696563 	.word	0x76696563
  40a400:	6f632065 	.word	0x6f632065
  40a404:	6e616d6d 	.word	0x6e616d6d
  40a408:	00000064 	.word	0x00000064
  40a40c:	2064656c 	.word	0x2064656c
  40a410:	6f742030 	.word	0x6f742030
  40a414:	656c6767 	.word	0x656c6767
  40a418:	00000000 	.word	0x00000000
  40a41c:	2064656c 	.word	0x2064656c
  40a420:	6f742031 	.word	0x6f742031
  40a424:	656c6767 	.word	0x656c6767
  40a428:	00000000 	.word	0x00000000
  40a42c:	2064656c 	.word	0x2064656c
  40a430:	6f742032 	.word	0x6f742032
  40a434:	656c6767 	.word	0x656c6767
  40a438:	00000000 	.word	0x00000000
  40a43c:	2064656c 	.word	0x2064656c
  40a440:	6f742033 	.word	0x6f742033
  40a444:	656c6767 	.word	0x656c6767
  40a448:	00000000 	.word	0x00000000
  40a44c:	2064656c 	.word	0x2064656c
  40a450:	6e6f2031 	.word	0x6e6f2031
  40a454:	00000000 	.word	0x00000000
  40a458:	2064656c 	.word	0x2064656c
  40a45c:	666f2031 	.word	0x666f2031
  40a460:	00000066 	.word	0x00000066
  40a464:	2064656c 	.word	0x2064656c
  40a468:	666f2032 	.word	0x666f2032
  40a46c:	00000066 	.word	0x00000066
  40a470:	2064656c 	.word	0x2064656c
  40a474:	6e6f2032 	.word	0x6e6f2032
  40a478:	00000000 	.word	0x00000000
  40a47c:	2064656c 	.word	0x2064656c
  40a480:	666f2033 	.word	0x666f2033
  40a484:	00000066 	.word	0x00000066
  40a488:	2064656c 	.word	0x2064656c
  40a48c:	6e6f2033 	.word	0x6e6f2033
  40a490:	00000000 	.word	0x00000000
  40a494:	686c6166 	.word	0x686c6166
  40a498:	6d652061 	.word	0x6d652061
  40a49c:	69726320 	.word	0x69726320
  40a4a0:	6f207261 	.word	0x6f207261
  40a4a4:	6d657320 	.word	0x6d657320
  40a4a8:	726f6661 	.word	0x726f6661
  40a4ac:	000a206f 	.word	0x000a206f
  40a4b0:	52544e45 	.word	0x52544e45
  40a4b4:	4e20554f 	.word	0x4e20554f
  40a4b8:	41535345 	.word	0x41535345
  40a4bc:	524f5020 	.word	0x524f5020
  40a4c0:	0a204152 	.word	0x0a204152
  40a4c4:	00000020 	.word	0x00000020
  40a4c8:	72746e65 	.word	0x72746e65
  40a4cc:	6e20756f 	.word	0x6e20756f
  40a4d0:	6669206f 	.word	0x6669206f
  40a4d4:	0000000a 	.word	0x0000000a
  40a4d8:	72746e65 	.word	0x72746e65
  40a4dc:	6e20756f 	.word	0x6e20756f
  40a4e0:	6c65206f 	.word	0x6c65206f
  40a4e4:	000a6573 	.word	0x000a6573
  40a4e8:	49555141 	.word	0x49555141
  40a4ec:	6325203a 	.word	0x6325203a
  40a4f0:	00000000 	.word	0x00000000
  40a4f4:	63617473 	.word	0x63617473
  40a4f8:	766f206b 	.word	0x766f206b
  40a4fc:	6c667265 	.word	0x6c667265
  40a500:	2520776f 	.word	0x2520776f
  40a504:	73252078 	.word	0x73252078
  40a508:	00000a0d 	.word	0x00000a0d

0040a50c <_global_impure_ptr>:
  40a50c:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40a51c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a52c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a53c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a54c:	0000296c 00000030                       l)..0...

0040a554 <blanks.7223>:
  40a554:	20202020 20202020 20202020 20202020                     

0040a564 <zeroes.7224>:
  40a564:	30303030 30303030 30303030 30303030     0000000000000000

0040a574 <blanks.7217>:
  40a574:	20202020 20202020 20202020 20202020                     

0040a584 <zeroes.7218>:
  40a584:	30303030 30303030 30303030 30303030     0000000000000000
  40a594:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a5a4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40a5b4:	00000000                                ....

0040a5b8 <__mprec_bigtens>:
  40a5b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a5c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a5d8:	7f73bf3c 75154fdd                       <.s..O.u

0040a5e0 <__mprec_tens>:
  40a5e0:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a5f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a600:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a610:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a620:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a630:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a640:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a650:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a660:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a670:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a680:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a690:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a6a0:	79d99db4 44ea7843                       ...yCx.D

0040a6a8 <p05.6055>:
  40a6a8:	00000005 00000019 0000007d              ........}...

0040a6b4 <_ctype_>:
  40a6b4:	20202000 20202020 28282020 20282828     .         ((((( 
  40a6c4:	20202020 20202020 20202020 20202020                     
  40a6d4:	10108820 10101010 10101010 10101010      ...............
  40a6e4:	04040410 04040404 10040404 10101010     ................
  40a6f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a704:	01010101 01010101 01010101 10101010     ................
  40a714:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a724:	02020202 02020202 02020202 10101010     ................
  40a734:	00000020 00000000 00000000 00000000      ...............
	...

0040a7b8 <_init>:
  40a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a7ba:	bf00      	nop
  40a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a7be:	bc08      	pop	{r3}
  40a7c0:	469e      	mov	lr, r3
  40a7c2:	4770      	bx	lr

0040a7c4 <__init_array_start>:
  40a7c4:	00406bd5 	.word	0x00406bd5

0040a7c8 <__frame_dummy_init_array_entry>:
  40a7c8:	0040018d                                ..@.

0040a7cc <_fini>:
  40a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a7ce:	bf00      	nop
  40a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a7d2:	bc08      	pop	{r3}
  40a7d4:	469e      	mov	lr, r3
  40a7d6:	4770      	bx	lr

0040a7d8 <__fini_array_start>:
  40a7d8:	00400169 	.word	0x00400169
